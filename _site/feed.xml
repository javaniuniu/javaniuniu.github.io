<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-04-30T13:11:51+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JAVA 牛牛</title><subtitle>主要是想看下自己能在技术这条路上能坚持多久
</subtitle><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><entry><title type="html">202. 快乐数</title><link href="http://localhost:4000/leetcode/2020/0430/030/06" rel="alternate" type="text/html" title="202. 快乐数" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2020/0430/030/202.%20%E5%BF%AB%E4%B9%90%E6%95%B0</id><content type="html" xml:base="http://localhost:4000/leetcode/2020/0430/030/06">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;难度&lt;/strong&gt;：&lt;code class=&quot;success highlighter-rouge&quot;&gt;简单&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;本题涉及算法&lt;/strong&gt;： &lt;code class=&quot;success highlighter-rouge&quot;&gt;算数&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;思路&lt;/strong&gt;： &lt;code class=&quot;info highlighter-rouge&quot;&gt;算数&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类似题型&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;题目-202-快乐数&quot;&gt;题目 &lt;a href=&quot;https://leetcode-cn.com/problems/happy-number/&quot;&gt;202. 快乐数&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;编写一个算法来判断一个数 n 是不是快乐数。&lt;/p&gt;

&lt;p&gt;「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 &lt;strong&gt;无限循环&lt;/strong&gt; 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。&lt;/p&gt;

&lt;p&gt;如果 n 是快乐数就返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; ；不是，则返回 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h3 id=&quot;示例&quot;&gt;示例：&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入：19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;解题思路&quot;&gt;解题思路&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;根据题意 ，可得出伪代码
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;根据题目发现判断条件
    &lt;ol&gt;
      &lt;li&gt;当 sumNum = 1 返回True&lt;/li&gt;
      &lt;li&gt;当 sumNum = 7 返回True 需要多 n = 1111111 单独判断&lt;/li&gt;
      &lt;li&gt;当 1 &amp;lt; sumNum &amp;lt; 10 即  循环后 n = 2 和 3  的会出现 无限循环的情况&lt;/li&gt;
      &lt;li&gt;当 sumNum &amp;gt; 10 ,则 赋值 n = sumNum 继续循环&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;代码&quot;&gt;代码&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isHappy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sumNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sumNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumNum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumNum&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sumNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="leetcode" /><category term="算数" /><summary type="html">难度：简单 本题涉及算法： 算数 思路： 算数 类似题型: 题目 202. 快乐数 编写一个算法来判断一个数 n 是不是快乐数。 「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。 如果 n 是快乐数就返回 True ；不是，则返回 False 。   示例： 输入：19 输出：true 解释： 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 解题思路 根据题意 ，可得出伪代码 def getNum(n): while n!=0: a = n%10 n //= 10 根据题目发现判断条件 当 sumNum = 1 返回True 当 sumNum = 7 返回True 需要多 n = 1111111 单独判断 当 1 &amp;lt; sumNum &amp;lt; 10 即 循环后 n = 2 和 3 的会出现 无限循环的情况 当 sumNum &amp;gt; 10 ,则 赋值 n = sumNum 继续循环 代码 class Solution: def isHappy(self, n: int) -&amp;gt; bool: sumNum = 0; while n!=0: sumNum += (n%10)*(n%10) n //= 10 if n == 0: if sumNum == 1 or sumNum==7: return True if sumNum&amp;lt;10: return False else : n = sumNum sumNum = 0</summary></entry><entry><title type="html">贪心</title><link href="http://localhost:4000/algo/2020/0430/006" rel="alternate" type="text/html" title="贪心" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E8%B4%AA%E5%BF%83</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/006">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="贪心" /><summary type="html">TODO</summary></entry><entry><title type="html">线性扫描</title><link href="http://localhost:4000/algo/2020/0430/005" rel="alternate" type="text/html" title="线性扫描" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/005">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="线性扫描" /><summary type="html">TODO</summary></entry><entry><title type="html">小根堆</title><link href="http://localhost:4000/algo/2020/0430/004" rel="alternate" type="text/html" title="小根堆" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E5%B0%8F%E6%A0%B9%E5%A0%86</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/004">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="小根堆" /><summary type="html">TODO</summary></entry><entry><title type="html">大根堆</title><link href="http://localhost:4000/algo/2020/0430/003" rel="alternate" type="text/html" title="大根堆" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E5%A4%A7%E6%A0%B9%E5%A0%86</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/003">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="大根堆" /><summary type="html">TODO</summary></entry><entry><title type="html">哈希表</title><link href="http://localhost:4000/algo/2020/0430/002" rel="alternate" type="text/html" title="哈希表" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E5%93%88%E5%B8%8C%E8%A1%A8</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/002">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="哈希表" /><summary type="html">TODO</summary></entry><entry><title type="html">markdown常见数学符号和运算</title><link href="http://localhost:4000/mark/markdown/common" rel="alternate" type="text/html" title="markdown常见数学符号和运算" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/mark/markdown/markdown%E5%B8%B8%E8%A7%81%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E5%92%8C%E8%BF%90%E7%AE%97</id><content type="html" xml:base="http://localhost:4000/mark/markdown/common">&lt;p&gt;MarkDown常用数学符号
记得一定要加$$才可以显示效果&lt;/p&gt;

&lt;h3 id=&quot;显示效果&quot;&gt;显示效果&lt;/h3&gt;

&lt;h4 id=&quot;语法&quot;&gt;语法：&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;$ 数学符号必须加在里面 $&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;上标&quot;&gt;上标&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$x^2$&lt;/code&gt;    $x^2$&lt;/p&gt;

&lt;h3 id=&quot;包括整体&quot;&gt;包括整体&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$Z^{yx}$&lt;/code&gt;     $Z^{yx}$&lt;/p&gt;

&lt;h3 id=&quot;大括号&quot;&gt;大括号&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \left(大括号)\right. $&lt;/code&gt;     $\left(大括号)\right.$&lt;/p&gt;

&lt;h3 id=&quot;分割线&quot;&gt;分割线&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\frac{ x }{ y }&lt;/code&gt;     $\frac{ x }{ y }$
​&lt;/p&gt;

&lt;h3 id=&quot;开方&quot;&gt;开方&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \sqrt{ x } $&lt;/code&gt;      $\sqrt{ x }$
​
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \sqrt[ 3 ]{ x } $&lt;/code&gt;    $\sqrt[ 3 ]{ x }$
​&lt;/p&gt;

&lt;h3 id=&quot;省略号&quot;&gt;省略号&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \ldots $ 表示与文本底线对齐的省略号，$ \cdots $ 表示与文本中线对齐的省略号 &lt;/code&gt;      $\ldots $  $ \cdots$&lt;/p&gt;

&lt;h3 id=&quot;矢量&quot;&gt;矢量&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \vec{ a } $&lt;/code&gt;     $\vec{ a }$&lt;/p&gt;

&lt;h3 id=&quot;积分&quot;&gt;积分&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \int_0^2 x^2 {\rm d}x $&lt;/code&gt;       $\int_0^2 x^2 {\rm d}x$&lt;/p&gt;

&lt;h3 id=&quot;极限&quot;&gt;极限&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)} $&lt;/code&gt;      $\lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)}$
​&lt;/p&gt;

&lt;h3 id=&quot;累加&quot;&gt;累加&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sum_{i=0}^n$  $\frac{1}{i^2} $&lt;/code&gt;      $\sum_{i=0}^n$ $\frac{1}{i^2}$&lt;/p&gt;

&lt;h3 id=&quot;累乘&quot;&gt;累乘&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\prod_{i=0}^n \frac{1}{i^2}$&lt;/code&gt;         $\prod_{i=0}^n \frac{1}{i^2}$
​&lt;/p&gt;

&lt;h3 id=&quot;希腊字母&quot;&gt;希腊字母&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\alpha$&lt;/code&gt;  $\alpha$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\beta$&lt;/code&gt;   $\beta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\gamma$&lt;/code&gt;  $\gamma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Gamma$&lt;/code&gt;  $\Gamma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\delta$&lt;/code&gt;  $\delta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Delta$&lt;/code&gt;  $\Delta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\epsilon$&lt;/code&gt;  $\epsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varepsilon$&lt;/code&gt; $\varepsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\zeta$&lt;/code&gt; $\zeta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\eta$&lt;/code&gt;  $\eta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\theta$&lt;/code&gt;  $\theta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Theta$&lt;/code&gt;  $\Theta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\vartheta$&lt;/code&gt; $\vartheta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iota$&lt;/code&gt; $\iota$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\kappa$&lt;/code&gt;  $\kappa$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\lambda$&lt;/code&gt; $\lambda$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Lambda$&lt;/code&gt; $\Lambda$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\mu$&lt;/code&gt; $\mu$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\nu$&lt;/code&gt; $\nu$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\xi$&lt;/code&gt; $\xi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Xi$&lt;/code&gt; $\Xi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\pi$&lt;/code&gt; $\pi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Pi$&lt;/code&gt; $\Pi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varpi$&lt;/code&gt;  $\varpi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\rho$&lt;/code&gt;  $\rho$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varrho$&lt;/code&gt; $\varrho$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sigma$&lt;/code&gt;  $\sigma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varsigma$&lt;/code&gt; $\varsigma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\tau$&lt;/code&gt;  $\tau$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\upsilon$&lt;/code&gt;  $\upsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Upsilon$&lt;/code&gt;  $\Upsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\phi$&lt;/code&gt;  $\phi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Phi$&lt;/code&gt;  $\Phi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varphi$&lt;/code&gt; $\varphi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\chi$&lt;/code&gt;  $\chi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\psi$&lt;/code&gt;  $\psi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Psi$&lt;/code&gt;  $\Psi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\omega$&lt;/code&gt;  $\omega$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Omega$&lt;/code&gt;  $\Omega$&lt;/p&gt;

&lt;h3 id=&quot;关系运算符&quot;&gt;关系运算符：&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\pm$&lt;/code&gt;  $\pm$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\times$&lt;/code&gt;  $\times$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\div$&lt;/code&gt;  $\div$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\mid$&lt;/code&gt;  $\mid$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\nmid$&lt;/code&gt;  $\nmid$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\cdot$&lt;/code&gt;  $\cdot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\circ$&lt;/code&gt;  $\circ$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\ast$&lt;/code&gt;  $\ast$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigodot$&lt;/code&gt;  $\bigodot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigotimes$&lt;/code&gt;  $\bigotimes$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigoplus$&lt;/code&gt;  $\bigoplus$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\leq$&lt;/code&gt;  $\leq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\geq$&lt;/code&gt;  $\geq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\neq$&lt;/code&gt;  $\neq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\approx$&lt;/code&gt;  $\approx$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\equiv$&lt;/code&gt;  $\equiv$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sum$&lt;/code&gt;  $\sum$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\prod$&lt;/code&gt;  $\prod$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\coprod$&lt;/code&gt;  $\coprod$&lt;/p&gt;

&lt;h3 id=&quot;集合运算符&quot;&gt;集合运算符：&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\emptyset$&lt;/code&gt;  $\emptyset$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\in$&lt;/code&gt;  $\in$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\notin$&lt;/code&gt;  $\notin$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\subset$&lt;/code&gt;  $\subset$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\supset$&lt;/code&gt;  $\supset$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\subseteq$&lt;/code&gt;  $\subseteq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\supseteq$&lt;/code&gt;  $\supseteq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigcap$&lt;/code&gt;  $\bigcap$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigcup$&lt;/code&gt;  $\bigcup$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigvee$&lt;/code&gt;  $\bigvee$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigwedge$&lt;/code&gt;  $\bigwedge$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\biguplus$&lt;/code&gt;  $\biguplus$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigsqcup$&lt;/code&gt;  $\bigsqcup$&lt;/p&gt;

&lt;h3 id=&quot;对数运算符&quot;&gt;对数运算符：&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\log$&lt;/code&gt;  $\log$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\lg$&lt;/code&gt;  $\lg$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\ln$&lt;/code&gt;  $\ln$&lt;/p&gt;

&lt;h3 id=&quot;三角运算符&quot;&gt;三角运算符：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bot$&lt;/code&gt;  $\bot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\angle$&lt;/code&gt;  $\angle$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$30^\circ$&lt;/code&gt;  $30^\circ$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sin$&lt;/code&gt;  $\sin$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\cos$&lt;/code&gt;  $\cos$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\tan$&lt;/code&gt;  $\tan$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\cot$&lt;/code&gt;  $\cot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sec$&lt;/code&gt;  $\sec$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\csc$&lt;/code&gt;  $\csc$&lt;/p&gt;

&lt;h3 id=&quot;微积分运算符&quot;&gt;微积分运算符：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\prime$&lt;/code&gt;  $\prime$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\int$&lt;/code&gt;  $\int$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iint$&lt;/code&gt;  $\iint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iiint$&lt;/code&gt;  $\iiint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iiiint$&lt;/code&gt;  $\iiiint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\oint$&lt;/code&gt;  $\oint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\lim$&lt;/code&gt;  $\lim$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\infty$&lt;/code&gt;  $\infty$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\nabla$&lt;/code&gt;  $\nabla$&lt;/p&gt;

&lt;h3 id=&quot;逻辑运算符&quot;&gt;逻辑运算符：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\because$&lt;/code&gt;  $\because$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\therefore$&lt;/code&gt;  $\therefore$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\forall$&lt;/code&gt;  $\forall$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\exists$&lt;/code&gt;  $\exists$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\not=$&lt;/code&gt;  $\not=$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\not&amp;gt;$&lt;/code&gt;  $\not&amp;gt;$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\not\subset$&lt;/code&gt;  $\not\subset$&lt;/p&gt;

&lt;h3 id=&quot;戴帽符号&quot;&gt;戴帽符号：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\hat{y}$&lt;/code&gt;  $\hat{y}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\check{y}$&lt;/code&gt;  $\check{y}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\breve{y}$&lt;/code&gt;  $\breve{y}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bar{a}$&lt;/code&gt;  $\bar{a}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\tilde{a}$&lt;/code&gt;  $\tilde{a}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\widetilde{A}$&lt;/code&gt;  $\widetilde{A}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\vec{a}$&lt;/code&gt;  $\vec{a}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\dot$&lt;/code&gt;  $\dot
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\ddot$&lt;/code&gt;  $\ddot&lt;/p&gt;

&lt;h3 id=&quot;连线符号&quot;&gt;连线符号：&lt;/h3&gt;
&lt;p&gt;​
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$&lt;/code&gt;  $\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$&lt;/p&gt;

&lt;p&gt;箭头符号：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\uparrow$&lt;/code&gt;  $\uparrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\downarrow$&lt;/code&gt;  $\downarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Uparrow$&lt;/code&gt;  $\Uparrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Downarrow$&lt;/code&gt;  $\Downarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\rightarrow$&lt;/code&gt;  $\rightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\leftarrow$&lt;/code&gt;  $\leftarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Rightarrow$&lt;/code&gt;  $\Rightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Leftarrow$&lt;/code&gt;  $\Leftarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\longrightarrow$&lt;/code&gt;  $\longrightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\longleftarrow$&lt;/code&gt;  $\longleftarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Longrightarrow$&lt;/code&gt;  $\Longrightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Longleftarrow$&lt;/code&gt;  $\Longleftarrow$&lt;/p&gt;

&lt;h3 id=&quot;分段函数&quot;&gt;分段函数&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
函数名=\begin{cases}
公式1 &amp; 条件1 \\
公式2 &amp; 条件2 \\
公式3 &amp; 条件3
\end{cases} %]]&gt;&lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$$ 函数名=\begin{cases}
公式1 &amp;amp; 条件1 \\
公式2 &amp;amp; 条件2 \\
公式3 &amp;amp; 条件3
\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$$
 \left[
 \begin{matrix}
   1 &amp;amp; 2 &amp;amp; 3 \\
   4 &amp;amp; 5 &amp;amp; 6 \\
   7 &amp;amp; 8 &amp;amp; 9
  \end{matrix}
  \right] \tag{3}
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left[
 \begin{matrix}
   1 &amp; 2 &amp; 3 \\
   4 &amp; 5 &amp; 6 \\
   7 &amp; 8 &amp; 9
  \end{matrix}
  \right] \tag{3} %]]&gt;&lt;/script&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="markdown常见数学符号和运算" /><summary type="html">MarkDown常用数学符号 记得一定要加$$才可以显示效果 显示效果 语法： $ 数学符号必须加在里面 $ 上标 语法： $x^2$ $x^2$ 包括整体 语法： $Z^{yx}$ $Z^{yx}$ 大括号 语法： $ \left(大括号)\right. $ $\left(大括号)\right.$ 分割线 语法： $\frac{ x }{ y } $\frac{ x }{ y }$ ​ 开方 语法： $ \sqrt{ x } $ $\sqrt{ x }$ ​ $ \sqrt[ 3 ]{ x } $ $\sqrt[ 3 ]{ x }$ ​ 省略号 语法： $ \ldots $ 表示与文本底线对齐的省略号，$ \cdots $ 表示与文本中线对齐的省略号 $\ldots $ $ \cdots$ 矢量 语法： $ \vec{ a } $ $\vec{ a }$ 积分 语法： $ \int_0^2 x^2 {\rm d}x $ $\int_0^2 x^2 {\rm d}x$ 极限 语法： $ \lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)} $ $\lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)}$ ​ 累加 语法： $\sum_{i=0}^n$ $\frac{1}{i^2} $ $\sum_{i=0}^n$ $\frac{1}{i^2}$ 累乘 语法： $\prod_{i=0}^n \frac{1}{i^2}$ $\prod_{i=0}^n \frac{1}{i^2}$ ​ 希腊字母 $\alpha$ $\alpha$ $\beta$ $\beta$ $\gamma$ $\gamma$ $\Gamma$ $\Gamma$ $\delta$ $\delta$ $\Delta$ $\Delta$ $\epsilon$ $\epsilon$ $\varepsilon$ $\varepsilon$ $\zeta$ $\zeta$ $\eta$ $\eta$ $\theta$ $\theta$ $\Theta$ $\Theta$ $\vartheta$ $\vartheta$ $\iota$ $\iota$ $\kappa$ $\kappa$ $\lambda$ $\lambda$ $\Lambda$ $\Lambda$ $\mu$ $\mu$ $\nu$ $\nu$ $\xi$ $\xi$ $\Xi$ $\Xi$ $\pi$ $\pi$ $\Pi$ $\Pi$ $\varpi$ $\varpi$ $\rho$ $\rho$ $\varrho$ $\varrho$ $\sigma$ $\sigma$ $\varsigma$ $\varsigma$ $\tau$ $\tau$ $\upsilon$ $\upsilon$ $\Upsilon$ $\Upsilon$ $\phi$ $\phi$ $\Phi$ $\Phi$ $\varphi$ $\varphi$ $\chi$ $\chi$ $\psi$ $\psi$ $\Psi$ $\Psi$ $\omega$ $\omega$ $\Omega$ $\Omega$ 关系运算符： $\pm$ $\pm$ $\times$ $\times$ $\div$ $\div$ $\mid$ $\mid$ $\nmid$ $\nmid$ $\cdot$ $\cdot$ $\circ$ $\circ$ $\ast$ $\ast$ $\bigodot$ $\bigodot$ $\bigotimes$ $\bigotimes$ $\bigoplus$ $\bigoplus$ $\leq$ $\leq$ $\geq$ $\geq$ $\neq$ $\neq$ $\approx$ $\approx$ $\equiv$ $\equiv$ $\sum$ $\sum$ $\prod$ $\prod$ $\coprod$ $\coprod$ 集合运算符： $\emptyset$ $\emptyset$ $\in$ $\in$ $\notin$ $\notin$ $\subset$ $\subset$ $\supset$ $\supset$ $\subseteq$ $\subseteq$ $\supseteq$ $\supseteq$ $\bigcap$ $\bigcap$ $\bigcup$ $\bigcup$ $\bigvee$ $\bigvee$ $\bigwedge$ $\bigwedge$ $\biguplus$ $\biguplus$ $\bigsqcup$ $\bigsqcup$ 对数运算符： $\log$ $\log$ $\lg$ $\lg$ $\ln$ $\ln$ 三角运算符： $\bot$ $\bot$ $\angle$ $\angle$ $30^\circ$ $30^\circ$ $\sin$ $\sin$ $\cos$ $\cos$ $\tan$ $\tan$ $\cot$ $\cot$ $\sec$ $\sec$ $\csc$ $\csc$ 微积分运算符： $\prime$ $\prime$ $\int$ $\int$ $\iint$ $\iint$ $\iiint$ $\iiint$ $\iiiint$ $\iiiint$ $\oint$ $\oint$ $\lim$ $\lim$ $\infty$ $\infty$ $\nabla$ $\nabla$ 逻辑运算符： $\because$ $\because$ $\therefore$ $\therefore$ $\forall$ $\forall$ $\exists$ $\exists$ $\not=$ $\not=$ $\not&amp;gt;$ $\not&amp;gt;$ $\not\subset$ $\not\subset$ 戴帽符号： $\hat{y}$ $\hat{y}$ $\check{y}$ $\check{y}$ $\breve{y}$ $\breve{y}$ $\bar{a}$ $\bar{a}$ $\tilde{a}$ $\tilde{a}$ $\widetilde{A}$ $\widetilde{A}$ $\vec{a}$ $\vec{a}$ $\dot$ $\dot $\ddot$ $\ddot 连线符号： ​ $\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$ $\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$ 箭头符号： $\uparrow$ $\uparrow$ $\downarrow$ $\downarrow$ $\Uparrow$ $\Uparrow$ $\Downarrow$ $\Downarrow$ $\rightarrow$ $\rightarrow$ $\leftarrow$ $\leftarrow$ $\Rightarrow$ $\Rightarrow$ $\Leftarrow$ $\Leftarrow$ $\longrightarrow$ $\longrightarrow$ $\longleftarrow$ $\longleftarrow$ $\Longrightarrow$ $\Longrightarrow$ $\Longleftarrow$ $\Longleftarrow$ 分段函数 $$ 函数名=\begin{cases} 公式1 &amp;amp; 条件1 \\ 公式2 &amp;amp; 条件2 \\ 公式3 &amp;amp; 条件3 \end{cases}$$ $$ \left[ \begin{matrix} 1 &amp;amp; 2 &amp;amp; 3 \\ 4 &amp;amp; 5 &amp;amp; 6 \\ 7 &amp;amp; 8 &amp;amp; 9 \end{matrix} \right] \tag{3} $$</summary></entry><entry><title type="html">最大公约数和最小公倍数</title><link href="http://localhost:4000/math/2020/0429/001" rel="alternate" type="text/html" title="最大公约数和最小公倍数" /><published>2020-04-29T00:00:00+08:00</published><updated>2020-04-29T00:00:00+08:00</updated><id>http://localhost:4000/math/2020/0429/%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0</id><content type="html" xml:base="http://localhost:4000/math/2020/0429/001">&lt;ul&gt;
  &lt;li&gt;相关题目
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/leetcode/2020/0321/005&quot;&gt;365. 水壶问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1-欧几里得法辗转相除法&quot;&gt;1. 欧几里得法(辗转相除法)&lt;/h3&gt;
&lt;p&gt;这条算法基于一个定理：&lt;strong&gt;两个正整数a和b（a&amp;gt;b），它们的最大公约数等于a除以b的余数c和b之间的最大公约数&lt;/strong&gt;。比如10和25，25除以10商2余5，那么10和25的最大公约数，等同于10和5的最大公约数。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基于这条定理：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;首先，我们先计算出a除以b的余数c，把问题转化成求出b和c的最大公约数；然后计算出b除以c的余数d，把问题转化成求出c和d的最大公约数；再然后计算出c除以d的余数e，把问题转化成求出d和e的最大公约数……以此类推，逐渐把两个较大整数之间的运算简化成两个较小整数之间的运算，直到两个数可以整除，或者其中一个数减小到1为止。&lt;/p&gt;

&lt;h4 id=&quot;贴代码&quot;&gt;贴代码：&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;first_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    第一种方法：欧几里得算法----辗转相除法
    :param a: 第一个数
    :param b: 第二个数
    :return: 最大公约数
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 如果最终余数为0 公约数就计算出来了
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-穷举法一个一个除&quot;&gt;2. 穷举法(一个一个除)&lt;/h3&gt;
&lt;p&gt;这个比较好理解。因为a,b两个数的最大公因数肯定小于等于相对更小的那个数，所以从两个数中较小数开始由大到小列举，直到找到公约数立即中断列举，得到的公约数便是最大公约数 。代码如下：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;second_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    第二种方法：一个一个除
    :param a: 第一个数
    :param b: 第二个数
    :return: 最大公约数
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 保证a&amp;gt;b
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;3-stein算法&quot;&gt;3. stein算法&lt;/h3&gt;
&lt;p&gt;看下面这两个结论&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;gcd(a, a) = a， 也就是一个数和他自己的公约数是其自身。&lt;/li&gt;
  &lt;li&gt;gcd(ka, kb) = k * gcd(a, b)，也就是最大公约数运算和倍乘运算可以交换，特殊的，&lt;strong&gt;当k=2时，说明两个偶数的最大公约数比如能被2整除。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;third_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    第三种方法思想：stein算法
        gcd(a,a)=a，也就是一个数和其自身的公约数仍是其自身。
        gcd(ka,kb)=k gcd(a,b)，也就是最大公约数运算和倍乘运算可以交换。特殊地，当k=2时，说明两个偶数的最大公约数必然能被2整除。
        当k与b互为质数，gcd(ka,b)=gcd(a,b)，也就是约掉两个数中只有其中一个含有的因子不影响最大公约数。特殊地，当k=2时，说明计算一个偶数
    和一个奇数的最大公约数时，可以先将偶数除以2。
    :param a: 第一个数
    :param b: 第二个数
    :return: 最大公约数
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#保证b比a小
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# a,b都是偶数 除2右移一位即可
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# a是偶数
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# b是偶数
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 都是奇数
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;求出a,b的最大公约数后，利用lcm(a,b) = (a*b)/gcd(a,b) 计算出两个数的 &lt;strong&gt;最小公倍数：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 求两个数的最小公倍数
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lcm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;third_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-三个数的最大公约数和最小公倍数&quot;&gt;4. 三个数的最大公约数和最小公倍数&lt;/h3&gt;

&lt;p&gt;计算三个数的最大公约数时，我是利用之前写好的计算2个数的最大公约数的方法，先算出a,b的公约数，再用a,b的公约数与c再代入方法，此时返回的值就是三个数的最大公约数了。&lt;/p&gt;

&lt;p&gt;同样，在计算三个数的最小公倍数时，多次嵌套，先求出两个数的最小公倍数，再求其与第三个数的最小公倍数。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;three_num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
    求三个数的最大公约数
    :param a: 第一个数
    :param b: 第二个数
    :param c: 第三个数
    :return: 这三个数的最大公约数
    &quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 多次嵌套，返回3个数的最大公约数
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first_way&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="数学" /><category term="欧几里得法(辗转相除法)" /><category term="穷举法" /><category term="stein算法" /><category term="最大公约数和最小公倍数" /><category term="三个数的最大公约数和最小公倍数" /><summary type="html">相关题目 365. 水壶问题 1. 欧几里得法(辗转相除法) 这条算法基于一个定理：两个正整数a和b（a&amp;gt;b），它们的最大公约数等于a除以b的余数c和b之间的最大公约数。比如10和25，25除以10商2余5，那么10和25的最大公约数，等同于10和5的最大公约数。 基于这条定理： 首先，我们先计算出a除以b的余数c，把问题转化成求出b和c的最大公约数；然后计算出b除以c的余数d，把问题转化成求出c和d的最大公约数；再然后计算出c除以d的余数e，把问题转化成求出d和e的最大公约数……以此类推，逐渐把两个较大整数之间的运算简化成两个较小整数之间的运算，直到两个数可以整除，或者其中一个数减小到1为止。 贴代码： def first_way(a, b): &quot;&quot;&quot; 第一种方法：欧几里得算法----辗转相除法 :param a: 第一个数 :param b: 第二个数 :return: 最大公约数 &quot;&quot;&quot; # 如果最终余数为0 公约数就计算出来了 while(b!=0): temp = a % b a = b b = temp return a 2. 穷举法(一个一个除) 这个比较好理解。因为a,b两个数的最大公因数肯定小于等于相对更小的那个数，所以从两个数中较小数开始由大到小列举，直到找到公约数立即中断列举，得到的公约数便是最大公约数 。代码如下： def second_way(a, b): &quot;&quot;&quot; 第二种方法：一个一个除 :param a: 第一个数 :param b: 第二个数 :return: 最大公约数 &quot;&quot;&quot; # 保证a&amp;gt;b if(a&amp;lt;b): a,b = b,a for i in range(1,b+1): if (a%i==0) and (b%i==0): value = i; return value 3. stein算法 看下面这两个结论 gcd(a, a) = a， 也就是一个数和他自己的公约数是其自身。 gcd(ka, kb) = k * gcd(a, b)，也就是最大公约数运算和倍乘运算可以交换，特殊的，当k=2时，说明两个偶数的最大公约数比如能被2整除。 def third_way(a,b): &quot;&quot;&quot; 第三种方法思想：stein算法 gcd(a,a)=a，也就是一个数和其自身的公约数仍是其自身。 gcd(ka,kb)=k gcd(a,b)，也就是最大公约数运算和倍乘运算可以交换。特殊地，当k=2时，说明两个偶数的最大公约数必然能被2整除。 当k与b互为质数，gcd(ka,b)=gcd(a,b)，也就是约掉两个数中只有其中一个含有的因子不影响最大公约数。特殊地，当k=2时，说明计算一个偶数 和一个奇数的最大公约数时，可以先将偶数除以2。 :param a: 第一个数 :param b: 第二个数 :return: 最大公约数 &quot;&quot;&quot; #保证b比a小 if a &amp;lt; b: a, b = b, a if (0 == b): return a # a,b都是偶数 除2右移一位即可 if a % 2 == 0 and b % 2 == 0: return 2 * third_way(a &amp;gt;&amp;gt; 1, b &amp;gt;&amp;gt; 1) # a是偶数 if a % 2 == 0: return third_way(a &amp;gt;&amp;gt; 1, b) # b是偶数 if b % 2 == 0: return third_way(a, b &amp;gt;&amp;gt; 1) # 都是奇数 return third_way((a + b) &amp;gt;&amp;gt; 1, (a - b) &amp;gt;&amp;gt; 1) 求出a,b的最大公约数后，利用lcm(a,b) = (a*b)/gcd(a,b) 计算出两个数的 最小公倍数： # 求两个数的最小公倍数 def lcm(a,b): return a * b / third_way(a, b) 4. 三个数的最大公约数和最小公倍数 计算三个数的最大公约数时，我是利用之前写好的计算2个数的最大公约数的方法，先算出a,b的公约数，再用a,b的公约数与c再代入方法，此时返回的值就是三个数的最大公约数了。 同样，在计算三个数的最小公倍数时，多次嵌套，先求出两个数的最小公倍数，再求其与第三个数的最小公倍数。 def three_num(a,b,c): &quot;&quot;&quot; 求三个数的最大公约数 :param a: 第一个数 :param b: 第二个数 :param c: 第三个数 :return: 这三个数的最大公约数 &quot;&quot;&quot; # 多次嵌套，返回3个数的最大公约数 return first_way(first_way(a,b),c)</summary></entry><entry><title type="html">1095. 山脉数组中查找目标值</title><link href="http://localhost:4000/leetcode/2020/0429/029/05" rel="alternate" type="text/html" title="1095. 山脉数组中查找目标值" /><published>2020-04-29T00:00:00+08:00</published><updated>2020-04-29T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2020/0429/029/1095.%20%E5%B1%B1%E8%84%89%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%9B%AE%E6%A0%87%E5%80%BC</id><content type="html" xml:base="http://localhost:4000/leetcode/2020/0429/029/05">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;难度&lt;/strong&gt;：&lt;code class=&quot;error highlighter-rouge&quot;&gt;困难&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;本题涉及算法&lt;/strong&gt;： &lt;code class=&quot;success highlighter-rouge&quot;&gt;二分查找&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;思路&lt;/strong&gt;： &lt;code class=&quot;success highlighter-rouge&quot;&gt;二分查找&lt;/code&gt; &lt;code class=&quot;success highlighter-rouge&quot;&gt;找到峰顶&lt;/code&gt;  &lt;code class=&quot;success highlighter-rouge&quot;&gt;分割数组&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类似题型&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;题目1095-山脉数组中查找目标值&quot;&gt;题目&lt;a href=&quot;https://leetcode-cn.com/problems/find-in-mountain-array/&quot;&gt;1095. 山脉数组中查找目标值&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(这是一个 交互式问题 ）&lt;/p&gt;

&lt;p&gt;给你一个 &lt;strong&gt;山脉数组&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;mountainArr&lt;/code&gt;，请你返回能够使得 &lt;code class=&quot;highlighter-rouge&quot;&gt;mountainArr.get(index)&lt;/code&gt; 等于 &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; 最小 的下标 &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt; 值。&lt;/p&gt;

&lt;p&gt;如果不存在这样的下标 &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;，就请返回 -1。
 &lt;/p&gt;

&lt;p&gt;何为山脉数组？如果数组 A 是一个山脉数组的话，那它满足如下条件：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首先&lt;/strong&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;A.length &amp;gt;= 3&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其次&lt;/strong&gt;，在 0 &amp;lt; i &amp;lt; A.length - 1 条件下，存在 i 使得：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A[0] &amp;lt; A[1] &amp;lt; ... A[i-1] &amp;lt; A[i]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A[i] &amp;gt; A[i+1] &amp;gt; ... &amp;gt; A[A.length - 1]&lt;/code&gt;
 &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;你将 不能直接访问该山脉数组，必须通过 MountainArray 接口来获取数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MountainArray.get(k) - 会返回数组中索引为k 的元素（下标从 0 开始）&lt;/li&gt;
  &lt;li&gt;MountainArray.length() - 会返回该数组的长度
 &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;对 MountainArray.get 发起超过 100 次调用的提交将被视为错误答案。此外，任何试图规避判题系统的解决方案都将会导致比赛资格被取消。&lt;/li&gt;
  &lt;li&gt;为了帮助大家更好地理解交互式问题，我们准备了一个样例 “答案”：https://leetcode-cn.com/playground/RKhe3ave，请注意这 不是一个正确答案。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;示例-1&quot;&gt;示例 1：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入：array = [1,2,3,4,5,3,1], target = 3
输出：2
解释：3 在数组中出现了两次，下标分别为 2 和 5，我们返回最小的下标 2。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;示例-2&quot;&gt;示例 2：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入：array = [0,1,2,4,2,1], target = 3
输出：-1
解释：3 在数组中没有出现，返回 -1。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;提示&quot;&gt;提示：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3 &amp;lt;= mountain_arr.length() &amp;lt;= 10000
0 &amp;lt;= target &amp;lt;= 10^9
0 &amp;lt;= mountain_arr.get(index) &amp;lt;= 10^9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;方法一&quot;&gt;方法一&lt;/h3&gt;
&lt;h4 id=&quot;解题思路&quot;&gt;解题思路&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;搜索指定值 二分查找&lt;/li&gt;
  &lt;li&gt;对于这种 可以分成左右数组来获取值&lt;/li&gt;
  &lt;li&gt;先寻找峰值&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 搜索指定值 二分查找
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 对于这种 可以分成左右数组来获取值
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# 先寻找峰值
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findInMountainArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 判断最高峰
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;


        &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# 左半
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 右半
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountain_arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// java版会超时&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findInMountainArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MountainArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 判断最高峰&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 左半&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 右半&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mountainArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]==-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="leetcode" /><category term="二分查找" /><summary type="html">难度：困难 本题涉及算法： 二分查找 思路： 二分查找 找到峰顶 分割数组 类似题型: 题目1095. 山脉数组中查找目标值 (这是一个 交互式问题 ） 给你一个 山脉数组 mountainArr，请你返回能够使得 mountainArr.get(index) 等于 target 最小 的下标 index 值。 如果不存在这样的下标 index，就请返回 -1。   何为山脉数组？如果数组 A 是一个山脉数组的话，那它满足如下条件： 首先，A.length &amp;gt;= 3 其次，在 0 &amp;lt; i &amp;lt; A.length - 1 条件下，存在 i 使得： A[0] &amp;lt; A[1] &amp;lt; ... A[i-1] &amp;lt; A[i] A[i] &amp;gt; A[i+1] &amp;gt; ... &amp;gt; A[A.length - 1]   你将 不能直接访问该山脉数组，必须通过 MountainArray 接口来获取数据： MountainArray.get(k) - 会返回数组中索引为k 的元素（下标从 0 开始） MountainArray.length() - 会返回该数组的长度   注意： 对 MountainArray.get 发起超过 100 次调用的提交将被视为错误答案。此外，任何试图规避判题系统的解决方案都将会导致比赛资格被取消。 为了帮助大家更好地理解交互式问题，我们准备了一个样例 “答案”：https://leetcode-cn.com/playground/RKhe3ave，请注意这 不是一个正确答案。 示例 1： 输入：array = [1,2,3,4,5,3,1], target = 3 输出：2 解释：3 在数组中出现了两次，下标分别为 2 和 5，我们返回最小的下标 2。 示例 2： 输入：array = [0,1,2,4,2,1], target = 3 输出：-1 解释：3 在数组中没有出现，返回 -1。 提示： 3 &amp;lt;= mountain_arr.length() &amp;lt;= 10000 0 &amp;lt;= target &amp;lt;= 10^9 0 &amp;lt;= mountain_arr.get(index) &amp;lt;= 10^9 方法一 解题思路 搜索指定值 二分查找 对于这种 可以分成左右数组来获取值 先寻找峰值 class Solution(object): # 搜索指定值 二分查找 # 对于这种 可以分成左右数组来获取值 # 先寻找峰值 def findInMountainArray(self, target, mountain_arr): res = [-1,-1] lo = 0 hi = mountain_arr.length() top=0 # 判断最高峰 while lo&amp;lt;hi: mid = lo+ (hi-lo)//2 if mountain_arr.get(mid) &amp;gt; mountain_arr.get(mid-1): lo = mid + 1 else: hi = mid top = lo -1 lo = 0 hi = top # 左半 while lo&amp;lt;hi: mid = lo+ (hi-lo)//2 if mountain_arr.get(mid) == target: res[0] = mid if mountain_arr.get(mid) &amp;gt; target: hi = mid else: lo = mid + 1 lo = top hi = mountain_arr.length() # 右半 while lo&amp;lt;hi: mid = lo+ (hi-lo)//2 if mountain_arr.get(mid) == target: res[1] = mid if mountain_arr.get(mid) &amp;gt; target: lo = mid + 1 else: hi = mid if res[0]==-1: return res[1] return res[0] // java版会超时 public int findInMountainArray(int target, MountainArray mountainArr) { int lo =0,hi = mountainArr.length(),top=0; int[] res = new int[]{-1,-1}; // 判断最高峰 while(lo&amp;lt;hi) { int mid = lo+ (hi-lo)/2; if (mountainArr.get(mid]&amp;gt;mountainArr.get(mid-1)) lo = mid+1; else if(mountainArr.get(mid]&amp;lt;mountainArr.get(mid-1)) hi = mid; } top = lo-1; lo = 0; hi = top; // 左半 while(lo&amp;lt;hi){ int mid = lo+ (hi-lo)/2; if (mountainArr.get(mid)==target) res[0] = mid; if (mountainArr.get(mid)&amp;gt;target) hi = mid; else lo = mid+1; } hi = mountainArr.length(); lo = top; // 右半 while(lo&amp;lt;hi){ int mid = lo+ (hi-lo)/2; if (mountainArr.get(mid)==target) res[1] = mid; if (mountainArr.get(mid)&amp;gt;target) lo = mid+1; else hi = mid; } if (res[0]==-1) return res[1]; return res[0]; }</summary></entry><entry><title type="html">按位与、或、异或等运算方法</title><link href="http://localhost:4000/web/skill/arithmetic" rel="alternate" type="text/html" title="按位与、或、异或等运算方法" /><published>2020-04-28T00:00:00+08:00</published><updated>2020-04-28T00:00:00+08:00</updated><id>http://localhost:4000/web/skill/%E6%8C%89%E4%BD%8D%E4%B8%8E%E3%80%81%E6%88%96%E3%80%81%E5%BC%82%E6%88%96%E7%AD%89%E8%BF%90%E7%AE%97%E6%96%B9%E6%B3%95</id><content type="html" xml:base="http://localhost:4000/web/skill/arithmetic">&lt;h3 id=&quot;按位与运算符&quot;&gt;按位与运算符（&amp;amp;）&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;参加运算的两个数据，按二进制位进行“与”运算。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;运算规则：0&amp;amp;0=0;   0&amp;amp;1=0;    1&amp;amp;0=0;     1&amp;amp;1=1;
即：两位同时为“1”，结果才为“1”，否则为0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;例如&lt;/strong&gt;：3&amp;amp;5  即 0000 0011 &amp;amp; 0000 0101 = 0000 0001   因此，3&amp;amp;5的值得1。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另，负数按补码形式参加按位与运算。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;与运算的特殊用途&quot;&gt;“与运算”的特殊用途：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。&lt;/li&gt;
  &lt;li&gt;取一个数中指定位
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;：找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;例：设X=10101110，
    取X的低4位，用 X &amp;amp; 0000 1111 = 0000 1110 即可得到；
    还可用来取X的2、4、6位。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;按位或运算符&quot;&gt;按位或运算符（|）&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;参加运算的两个对象，按二进制位进行“或”运算。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;运算规则：0|0=0；   0|1=1；   1|0=1；    1|1=1；
即 ：参加运算的两个对象只要有一个为1，其值为1。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;例如:3|5　即 0000 0011 | 0000 0101 = 0000 0111   因此，3|5的值得7。　&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另，负数按补码形式参加按位或运算。&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;或运算特殊作用&quot;&gt;“或运算”特殊作用：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;常用来对一个数据的某些位置1。
&lt;strong&gt;方法&lt;/strong&gt;：找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;例：将X=10100000的低4位置1 ，用 X | 0000 1111 = 1010 1111即可得到。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;异或运算符&quot;&gt;异或运算符（^）&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;参加运算的两个数据，按二进制位进行“异或”运算。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;运算规则：0^0=0；   0^1=1；   1^0=1；   1^1=0；
即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h4 id=&quot;异或运算的特殊作用&quot;&gt;“异或运算”的特殊作用：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;使特定位翻转找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;例：X=10101110，使X低4位翻转，用X ^ 0000 1111 = 1010 0001即可得到。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;与0相异或，保留原值 ，X ^ 0000 0000 = 1010 1110。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从上面的例题可以清楚的看到这一点。&lt;/p&gt;

&lt;h3 id=&quot;取反运算符&quot;&gt;取反运算符（~）&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;参加运算的一个数据，按二进制位进行“取反”运算。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;运算规则：~1=0；   ~0=1；
即：对一个二进制数按位取反，即将0变1，1变0。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使一个数的最低位为零，可以表示为：a&amp;amp;~1。&lt;/p&gt;

&lt;p&gt;~1的值为1111111111111110，再按“与”运算，最低位一定为0。因为“~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。&lt;/p&gt;

&lt;h3 id=&quot;左移运算符&quot;&gt;左移运算符（«）&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;例：a = a &amp;lt;&amp;lt; 2 将a的二进制位左移2位，右补0，
左移1位后a = a * 2; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。&lt;/p&gt;

&lt;h3 id=&quot;右移运算符&quot;&gt;右移运算符（»）&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;操作数每右移一位，相当于该数除以2。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;例如：a = a &amp;gt;&amp;gt; 2 将a的二进制位右移2位，
左补0 or 补1 得看被移数是正还是负。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt;&amp;gt; 运算符把 expression1 的所有位向右移 expression2 指定的位数。expression1 的符号位被用来填充右移后左边空出来的位。向右移出的位被丢弃。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;例如，下面的代码被求值后，temp 的值是 -4：
-14 （即二进制的 11110010）右移两位等于 -4 （即二进制的 11111100）。
var temp = -14 &amp;gt;&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&quot;无符号右移运算符&quot;&gt;无符号右移运算符（»&amp;gt;）&lt;/h3&gt;

&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; 运算符把 expression1 的各个位向右移 expression2 指定的位数。右移后左边空出的位用零来填充。移出右边的位被丢弃。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;例如：var temp = -14 &amp;gt;&amp;gt;&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;变量 temp 的值为 -14 （即二进制的 11111111 11111111 11111111 11110010），向右移两位后等于 1073741820 （即二进制的 00111111 11111111 11111111 11111100）。&lt;/p&gt;

&lt;h3 id=&quot;复合赋值运算符&quot;&gt;复合赋值运算符&lt;/h3&gt;

&lt;p&gt;位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;=    例：a &amp;amp;= b        相当于a=a &amp;amp; b

|=    例：a |= b        相当于a=a | b

&amp;gt;&amp;gt;=   例：a &amp;gt;&amp;gt;= b       相当于a=a &amp;gt;&amp;gt; b

&amp;lt;&amp;lt;= 例：a &amp;lt;&amp;lt;= b       相当于a=a &amp;lt;&amp;lt; b

^=   例：a ^= b       相当于a=a ^ b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;运算规则：和前面讲的复合赋值运算符的运算规则相似。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;|=：两个二进制对应位都为0时，结果等于0，否则结果等于1；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&amp;amp;=：两个二进制的对应位都为1时，结果为1，否则结果等于0；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;^=：两个二进制的对应位相同，结果为0，否则结果为1。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不同长度的数据进行位运算&lt;/p&gt;

&lt;p&gt;如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。&lt;/p&gt;

&lt;p&gt;以“与”运算为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与”运算，右端对齐后，左边不足的位依下面三种情况补足，&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果整型数据为正数，左边补16个0。&lt;/li&gt;
  &lt;li&gt;如果整型数据为负数，左边补16个1。&lt;/li&gt;
  &lt;li&gt;如果整形数据为无符号数，左边也补16个0。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如：long a=123;int b=1;计算a &amp;amp; b。&lt;/p&gt;

&lt;p&gt;如：long a=123;int b=-1;计算a &amp;amp; b。&lt;/p&gt;

&lt;p&gt;如：long a=123;unsigned int b=1;计算a &amp;amp; b。&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="开发技巧" /><category term="按位与运算符" /><summary type="html">按位与运算符（&amp;amp;） 参加运算的两个数据，按二进制位进行“与”运算。 运算规则：0&amp;amp;0=0;   0&amp;amp;1=0;    1&amp;amp;0=0;     1&amp;amp;1=1; 即：两位同时为“1”，结果才为“1”，否则为0 例如：3&amp;amp;5  即 0000 0011 &amp;amp; 0000 0101 = 0000 0001   因此，3&amp;amp;5的值得1。 另，负数按补码形式参加按位与运算。 “与运算”的特殊用途： 清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。 取一个数中指定位 方法：找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位。 例：设X=10101110，     取X的低4位，用 X &amp;amp; 0000 1111 = 0000 1110 即可得到；     还可用来取X的2、4、6位。 按位或运算符（|） 参加运算的两个对象，按二进制位进行“或”运算。 运算规则：0|0=0；   0|1=1；   1|0=1；    1|1=1； 即 ：参加运算的两个对象只要有一个为1，其值为1。 例如:3|5　即 0000 0011 | 0000 0101 = 0000 0111   因此，3|5的值得7。　 另，负数按补码形式参加按位或运算。 “或运算”特殊作用： 常用来对一个数据的某些位置1。 方法：找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1。 例：将X=10100000的低4位置1 ，用 X | 0000 1111 = 1010 1111即可得到。 异或运算符（^） 参加运算的两个数据，按二进制位进行“异或”运算。 运算规则：0^0=0；   0^1=1；   1^0=1；   1^1=0； 即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。   “异或运算”的特殊作用： 使特定位翻转找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。 例：X=10101110，使X低4位翻转，用X ^ 0000 1111 = 1010 0001即可得到。 与0相异或，保留原值 ，X ^ 0000 0000 = 1010 1110。 从上面的例题可以清楚的看到这一点。 取反运算符（~） 参加运算的一个数据，按二进制位进行“取反”运算。 运算规则：~1=0；   ~0=1； 即：对一个二进制数按位取反，即将0变1，1变0。 使一个数的最低位为零，可以表示为：a&amp;amp;~1。 ~1的值为1111111111111110，再按“与”运算，最低位一定为0。因为“~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。 左移运算符（«） 将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。 例：a = a &amp;lt;&amp;lt; 2 将a的二进制位左移2位，右补0， 左移1位后a = a * 2;  若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。 右移运算符（»） 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。 操作数每右移一位，相当于该数除以2。 例如：a = a &amp;gt;&amp;gt; 2 将a的二进制位右移2位， 左补0 or 补1 得看被移数是正还是负。 &amp;gt;&amp;gt; 运算符把 expression1 的所有位向右移 expression2 指定的位数。expression1 的符号位被用来填充右移后左边空出来的位。向右移出的位被丢弃。 例如，下面的代码被求值后，temp 的值是 -4： -14 （即二进制的 11110010）右移两位等于 -4 （即二进制的 11111100）。 var temp = -14 &amp;gt;&amp;gt; 2   无符号右移运算符（»&amp;gt;） &amp;gt;&amp;gt;&amp;gt; 运算符把 expression1 的各个位向右移 expression2 指定的位数。右移后左边空出的位用零来填充。移出右边的位被丢弃。 例如：var temp = -14 &amp;gt;&amp;gt;&amp;gt; 2 变量 temp 的值为 -14 （即二进制的 11111111 11111111 11111111 11110010），向右移两位后等于 1073741820 （即二进制的 00111111 11111111 11111111 11111100）。 复合赋值运算符 位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是： &amp;amp;=    例：a &amp;amp;= b        相当于a=a &amp;amp; b |=    例：a |= b        相当于a=a | b &amp;gt;&amp;gt;=   例：a &amp;gt;&amp;gt;= b       相当于a=a &amp;gt;&amp;gt; b &amp;lt;&amp;lt;= 例：a &amp;lt;&amp;lt;= b       相当于a=a &amp;lt;&amp;lt; b ^=   例：a ^= b       相当于a=a ^ b 运算规则：和前面讲的复合赋值运算符的运算规则相似。 |=：两个二进制对应位都为0时，结果等于0，否则结果等于1； &amp;amp;=：两个二进制的对应位都为1时，结果为1，否则结果等于0； ^=：两个二进制的对应位相同，结果为0，否则结果为1。 不同长度的数据进行位运算 如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。 以“与”运算为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与”运算，右端对齐后，左边不足的位依下面三种情况补足， 如果整型数据为正数，左边补16个0。 如果整型数据为负数，左边补16个1。 如果整形数据为无符号数，左边也补16个0。 如：long a=123;int b=1;计算a &amp;amp; b。 如：long a=123;int b=-1;计算a &amp;amp; b。 如：long a=123;unsigned int b=1;计算a &amp;amp; b。</summary></entry></feed>