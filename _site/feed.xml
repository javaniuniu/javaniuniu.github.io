<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-05-02T11:48:24+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JAVA 牛牛</title><subtitle>主要是想看下自己能在技术这条路上能坚持多久
</subtitle><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><entry><title type="html">3. 无重复字符的最长子串</title><link href="http://localhost:4000/leetcode/2020/0502/002/08" rel="alternate" type="text/html" title="3. 无重复字符的最长子串" /><published>2020-05-02T00:00:00+08:00</published><updated>2020-05-02T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2020/0502/002/3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2</id><content type="html" xml:base="http://localhost:4000/leetcode/2020/0502/002/08">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;难度&lt;/strong&gt;：&lt;code class=&quot;warning highlighter-rouge&quot;&gt;中等&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;本题涉及算法&lt;/strong&gt;： &lt;code class=&quot;success highlighter-rouge&quot;&gt;滑动窗口&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;思路&lt;/strong&gt;： &lt;code class=&quot;info highlighter-rouge&quot;&gt;滑动窗口&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类似题型&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/leetcode/2020/0426/025&quot;&gt;5393. 可获得的最大点数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;题目-3-无重复字符的最长子串&quot;&gt;题目 &lt;a href=&quot;https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/&quot;&gt;3. 无重复字符的最长子串&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。&lt;/p&gt;

&lt;p&gt;示例 1:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入: &quot;abcabcbb&quot;
输出: 3
解释 : 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;示例 2:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入: &quot;bbbbb&quot;
输出: 1
解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;示例 3:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入: &quot;pwwkew&quot;
输出: 3
解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;解题思路-滑动窗口&quot;&gt;解题思路 滑动窗口&lt;/h3&gt;
&lt;h4 id=&quot;什么是滑动窗口&quot;&gt;什么是滑动窗口？&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;其实就是一个队列(或一个集合)，比如例题中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;abcabcbb&lt;/code&gt;，进入这个队列（窗口）为 abc 满足题目要求，当再进入 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;，队列变成了 &lt;code class=&quot;highlighter-rouge&quot;&gt;abca&lt;/code&gt;，这时候不满足要求。所以，我们要移动这个队列！&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何移动&quot;&gt;如何移动？&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;我们只要把队列的左边的元素移出就行了，直到满足题目要求！(不在出现重复字符串)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一直维持这样的队列，找出队列出现最长的长度时候，求出解！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;时间复杂度：$O(n)$&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;代码&quot;&gt;代码&lt;/h3&gt;
&lt;h4 id=&quot;python&quot;&gt;python&lt;/h4&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 当前长度
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;maxLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 最长字符串
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 用来存储滑动的字符串
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;curLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;# 这里是while循环，当重复字符串一直在集合当中，会一直删除左边的字符串，直到删除重复字符串   
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;curLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;#比较当前长度和最长长度
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curLen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxLen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maxLen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curLen&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maxLen&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;java&quot;&gt;java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lengthOfLongestSubstring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cul_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cul_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cul_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cul_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;max_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cul_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="leetcode" /><category term="滑动窗口" /><summary type="html">难度：中等 本题涉及算法： 滑动窗口 思路： 滑动窗口 类似题型: 5393. 可获得的最大点数 题目 3. 无重复字符的最长子串 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 示例 1: 输入: &quot;abcabcbb&quot; 输出: 3 解释 : 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。 示例 2: 输入: &quot;bbbbb&quot; 输出: 1 解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。 示例 3: 输入: &quot;pwwkew&quot; 输出: 3 解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。   请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。 解题思路 滑动窗口 什么是滑动窗口？ 其实就是一个队列(或一个集合)，比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！ 如何移动？ 我们只要把队列的左边的元素移出就行了，直到满足题目要求！(不在出现重复字符串) 一直维持这样的队列，找出队列出现最长的长度时候，求出解！ 时间复杂度：$O(n)$ 代码 python class Solution(object): def lengthOfLongestSubstring(self, s): if not s: return 0 left = 0 curLen = 0 # 当前长度 maxLen = 0 # 最长字符串 lookup = set() # 用来存储滑动的字符串 for i in range(len(s)): curLen +=1 # 这里是while循环，当重复字符串一直在集合当中，会一直删除左边的字符串，直到删除重复字符串 while s[i] in lookup: lookup.remove(s[left]) left += 1 curLen -= 1 #比较当前长度和最长长度 if curLen &amp;gt; maxLen:maxLen=curLen lookup.add(s[i]) return maxLen java class Solution { public int lengthOfLongestSubstring(String s) { int left = 0; Set&amp;lt;Character&amp;gt; lookup = new HashSet&amp;lt;&amp;gt;(); int cul_len = 0; int max_len = 0; for (int i=0;i&amp;lt;s.length();i++) { cul_len += 1; while (lookup.contains(s.charAt(i))) { lookup.remove(s.charAt(left)); left += 1; cul_len -= 1; } if(cul_len&amp;gt;max_len) max_len = cul_len; lookup.add(s.charAt(i)); } return max_len; } }</summary></entry><entry><title type="html">21. 合并两个有序链表</title><link href="http://localhost:4000/leetcode/2020/0501/002" rel="alternate" type="text/html" title="21. 合并两个有序链表" /><published>2020-05-01T00:00:00+08:00</published><updated>2020-05-01T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2020/0501/21.%20%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8</id><content type="html" xml:base="http://localhost:4000/leetcode/2020/0501/002">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;难度&lt;/strong&gt;：&lt;code class=&quot;success highlighter-rouge&quot;&gt;简单&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;本题涉及算法&lt;/strong&gt;： &lt;code class=&quot;success highlighter-rouge&quot;&gt;递归&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;思路&lt;/strong&gt;： &lt;code class=&quot;info highlighter-rouge&quot;&gt;递归&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类似题型&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;题目-21-合并两个有序链表&quot;&gt;题目 &lt;a href=&quot;https://leetcode-cn.com/problems/merge-two-sorted-lists/&quot;&gt;21. 合并两个有序链表&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 &lt;/p&gt;

&lt;h3 id=&quot;示例&quot;&gt;示例：&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4
输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;方法一-递归&quot;&gt;方法一 递归&lt;/h3&gt;

&lt;h4 id=&quot;java&quot;&gt;java&lt;/h4&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListNode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mergeTwoLists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="leetcode" /><category term="递归" /><summary type="html">难度：简单 本题涉及算法： 递归 思路： 递归 类似题型: 题目 21. 合并两个有序链表 将两个升序链表合并为一个新的升序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。  示例： 输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4 方法一 递归 java class Solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { if (l1 == null) return l2; if (l2 == null) return l1; if (l1.val &amp;lt; l2.val) { l1.next = mergeTwoLists(l1.next, l2); return l1; } else { l2.next = mergeTwoLists(l1, l2.next); return l2; } } }</summary></entry><entry><title type="html">滑动窗口</title><link href="http://localhost:4000/algo/2020/0501/007" rel="alternate" type="text/html" title="滑动窗口" /><published>2020-05-01T00:00:00+08:00</published><updated>2020-05-01T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0501/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3</id><content type="html" xml:base="http://localhost:4000/algo/2020/0501/007">&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;
&lt;p&gt;TODO&lt;/p&gt;

&lt;h2 id=&quot;常见解题思路&quot;&gt;常见解题思路&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;维护一个长度为 &lt;code class=&quot;highlighter-rouge&quot;&gt;len - k&lt;/code&gt; 的宽口， 窗口里面的值最小，则其它数相加为最大数
    &lt;ul&gt;
      &lt;li&gt;类似题目有&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/leetcode/2020/0426/025&quot;&gt;5393. 可获得的最大点数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/leetcode/2020/0502/002/08&quot;&gt;3. 无重复字符的最长子串&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="滑动窗口" /><summary type="html">概念 TODO 常见解题思路 维护一个长度为 len - k 的宽口， 窗口里面的值最小，则其它数相加为最大数 类似题目有 5393. 可获得的最大点数 3. 无重复字符的最长子串</summary></entry><entry><title type="html">5. 最长回文串</title><link href="http://localhost:4000/leetcode/2020/0501/001/07" rel="alternate" type="text/html" title="5. 最长回文串" /><published>2020-05-01T00:00:00+08:00</published><updated>2020-05-01T00:00:00+08:00</updated><id>http://localhost:4000/leetcode/2020/0501/001/5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2</id><content type="html" xml:base="http://localhost:4000/leetcode/2020/0501/001/07">&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;难度&lt;/strong&gt;：&lt;code class=&quot;warning highlighter-rouge&quot;&gt;中等&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;本题涉及算法&lt;/strong&gt;： &lt;code class=&quot;success highlighter-rouge&quot;&gt;中心扩展算法&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;思路&lt;/strong&gt;： &lt;code class=&quot;info highlighter-rouge&quot;&gt;中心扩展算法&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;类似题型&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;题目-5-最长回文子串&quot;&gt;题目 &lt;a href=&quot;https://leetcode-cn.com/problems/longest-palindromic-substring/&quot;&gt;5. 最长回文子串&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;给定一个字符串 &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; ，找到 &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;  中最长的回文子串。你可以假设 s 的最大长度为 1000。&lt;/p&gt;

&lt;h3 id=&quot;示例&quot;&gt;示例&lt;/h3&gt;
&lt;h4 id=&quot;示例-1&quot;&gt;示例 1：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入: &quot;babad&quot;
输出: &quot;bab&quot;
注意: &quot;aba&quot; 也是一个有效答案。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;示例-2&quot;&gt;示例 2：&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入: &quot;cbbd&quot;
输出: &quot;bb&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;方法一--中心扩展算法&quot;&gt;方法一  中心扩展算法&lt;/h3&gt;
&lt;h4 id=&quot;解题思路&quot;&gt;解题思路&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;首先，要明白 &lt;code class=&quot;highlighter-rouge&quot;&gt;expandAroundCenter&lt;/code&gt; 函数作用是以一个中心向两侧扩展找到这个中心最长回文串的长度，参数 &lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; 就是为了指定中心。&lt;/li&gt;
  &lt;li&gt;其次，中心可能是一个或两个字符。如：对于字符串“abcda”，“c”是中心；对于字符串“adccda”，“cc”是中心。&lt;/li&gt;
  &lt;li&gt;那么，&lt;code class=&quot;highlighter-rouge&quot;&gt;expandAroundCenter(s, i, i)&lt;/code&gt; 就是在找以 i（一个字符）为中心的最长回文串的长度；&lt;code class=&quot;highlighter-rouge&quot;&gt;expandAroundCenter(s, i, i + 1)&lt;/code&gt; 是在找以 i 和i+1（两个字符）为中心的最长回文串的长度。&lt;/li&gt;
  &lt;li&gt;将得到的两个长度和缓存的最长回文串长度相比较。若新得到的长度较长，表达式：$start = i - (len - 1) / 2$;$end = i + len / 2$; 就得出了新的最长回文串的开始和结束位置。&lt;/li&gt;
  &lt;li&gt;最后，for循环遍历了一遍，以一个字符为中心总共找了 n 次，以两个字符为中心总共找了 n-1 次，所以说“总共有2n−1 个这样的中心”。&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandAroundCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 一个中心的情况 aba&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expandAroundCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 两个中心的情况 abba&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 每次循环 判断最长的回文串首尾&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 当一个中心的情况 start = i - len/2 当两个中心的情况 i 右边做了 i+1 操作 所以 len -1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 这个还好理解&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 中心扩展算法&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expandAroundCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lenOne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandAroundCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 一个中心的情况 aba
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;lenTwo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expandAroundCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 两个中心的情况 abba
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;lenMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lenOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lenTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 每次循环 判断最长的回文串首尾
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lenMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# // 当一个中心的情况 start = i - len/2 当两个中心的情况 i 右边做了 i+1 操作 所以 len -1
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lenMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 这个还好理解
&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 中心扩展算法
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;expandAroundCenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;st&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcba'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 有括号和没有括号的区别
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longestPalindrome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="leetcode" /><category term="中心扩展算法" /><summary type="html">难度：中等 本题涉及算法： 中心扩展算法 思路： 中心扩展算法 类似题型: 题目 5. 最长回文子串 给定一个字符串 s ，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。 示例 示例 1： 输入: &quot;babad&quot; 输出: &quot;bab&quot; 注意: &quot;aba&quot; 也是一个有效答案。 示例 2： 输入: &quot;cbbd&quot; 输出: &quot;bb&quot; 方法一 中心扩展算法 解题思路 首先，要明白 expandAroundCenter 函数作用是以一个中心向两侧扩展找到这个中心最长回文串的长度，参数 left 和 right 就是为了指定中心。 其次，中心可能是一个或两个字符。如：对于字符串“abcda”，“c”是中心；对于字符串“adccda”，“cc”是中心。 那么，expandAroundCenter(s, i, i) 就是在找以 i（一个字符）为中心的最长回文串的长度；expandAroundCenter(s, i, i + 1) 是在找以 i 和i+1（两个字符）为中心的最长回文串的长度。 将得到的两个长度和缓存的最长回文串长度相比较。若新得到的长度较长，表达式：$start = i - (len - 1) / 2$;$end = i + len / 2$; 就得出了新的最长回文串的开始和结束位置。 最后，for循环遍历了一遍，以一个字符为中心总共找了 n 次，以两个字符为中心总共找了 n-1 次，所以说“总共有2n−1 个这样的中心”。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 public String longestPalindrome(String s) { if (s == null || s.length() &amp;lt; 1) return &quot;&quot;; int start = 0, end = 0; for (int i = 0; i &amp;lt; s.length(); i++) { int len1 = expandAroundCenter(s, i, i); // 一个中心的情况 aba int len2 = expandAroundCenter(s, i, i + 1); // 两个中心的情况 abba int len = Math.max(len1, len2); if (len &amp;gt; end - start) { // 每次循环 判断最长的回文串首尾 start = i - (len - 1) / 2; // 当一个中心的情况 start = i - len/2 当两个中心的情况 i 右边做了 i+1 操作 所以 len -1 end = i + len / 2; // 这个还好理解 } } return s.substring(start, end + 1); } // 中心扩展算法 private int expandAroundCenter(String s, int left, int right) { while (left &amp;gt;= 0 &amp;amp;&amp;amp; right &amp;lt; s.length() &amp;amp;&amp;amp; s.charAt(left) == s.charAt(right)) { left--; right++; } return right - left - 1; } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution: def longestPalindrome(self,s: str) -&amp;gt; str: start , end = 0 , 0 for i in range(len(s)-1): lenOne = self.expandAroundCenter(s,i,i) # 一个中心的情况 aba lenTwo = self.expandAroundCenter(s,i,i+1) # 两个中心的情况 abba lenMax = max(lenOne,lenTwo) if lenMax &amp;gt; end - start: # 每次循环 判断最长的回文串首尾 start = i - (lenMax-1)//2 # // 当一个中心的情况 start = i - len/2 当两个中心的情况 i 右边做了 i+1 操作 所以 len -1 end = i + lenMax//2 # 这个还好理解 return s[start:end+1] # 中心扩展算法 def expandAroundCenter(self,s:str ,left:int,right:int) -&amp;gt;int: while left &amp;gt;= 0 and right &amp;lt; len(s) and s[left] == s[right]: left = left -1 right = right +1 return right - left -1 if __name__ == &quot;__main__&quot;: st = 'abcba' solution = Solution() # 有括号和没有括号的区别 res = solution.longestPalindrome(st) print(res)</summary></entry><entry><title type="html">markdown常见数学符号和运算</title><link href="http://localhost:4000/mark/markdown/common" rel="alternate" type="text/html" title="markdown常见数学符号和运算" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/mark/markdown/markdown%E5%B8%B8%E8%A7%81%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E5%92%8C%E8%BF%90%E7%AE%97</id><content type="html" xml:base="http://localhost:4000/mark/markdown/common">&lt;p&gt;MarkDown常用数学符号
记得一定要加$$才可以显示效果&lt;/p&gt;

&lt;h3 id=&quot;显示效果&quot;&gt;显示效果&lt;/h3&gt;

&lt;h4 id=&quot;语法&quot;&gt;语法：&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ 数学符号必须加在运算符号前后&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;上标&quot;&gt;上标&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$x^2$&lt;/code&gt;    $x^2$&lt;/p&gt;

&lt;h3 id=&quot;下标&quot;&gt;下标&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$x_i$&lt;/code&gt; $x_i$&lt;/p&gt;

&lt;h3 id=&quot;四则运算&quot;&gt;四则运算&lt;/h3&gt;
&lt;p&gt;加法运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y=z$&lt;/code&gt;，如：$x+y=z$ &lt;br /&gt;
减法运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x-y=z$ &lt;/code&gt;，如：$x-y=z$  &lt;br /&gt;
加减运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x \pm y=z$&lt;/code&gt;，如：$x \pm y=z$  &lt;br /&gt;
减甲运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x \mp y=z$&lt;/code&gt;，如：$x \mp y=z$  &lt;br /&gt;
乘法运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x \times y=z$&lt;/code&gt;，如：$x \times y=z$ &lt;br /&gt;
点乘运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x \cdot y=z$&lt;/code&gt;，如：$x \cdot y=z$  &lt;br /&gt;
星乘运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x \ast y=z$&lt;/code&gt;，如：$x \ast y=z$ &lt;br /&gt;
除法运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x \div y=z$&lt;/code&gt;，如：$x \div y=z$ &lt;br /&gt;
斜法运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x/y=z$&lt;/code&gt;，如：$x/y=z$  &lt;br /&gt;
分式表示，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$\frac{x+y}{y+z}$&lt;/code&gt;，如：$\frac{x+y}{y+z}$  &lt;br /&gt;
分式表示，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;${x+y} \over {y+z}$&lt;/code&gt;，如：${x+y} \over {y+z}$  &lt;br /&gt;
绝对值表示，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;如：$|x+y|$&lt;/code&gt;，如：$|x+y|$&lt;/p&gt;

&lt;h3 id=&quot;高级运算&quot;&gt;高级运算&lt;/h3&gt;
&lt;p&gt;平均数运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$\overline{xyz}$&lt;/code&gt;，如：$\overline{xyz}$  &lt;br /&gt;
开二次方运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sqrt x$&lt;/code&gt;，如：$\sqrt x$ &lt;br /&gt;
开方运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sqrt[3]{x+y}$&lt;/code&gt;，如：$\sqrt[3]{x+y}$ &lt;br /&gt;
对数运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$\log(x)$&lt;/code&gt;，如：$\log(x)$ &lt;br /&gt;
&lt;!-- 极限运算，符号：`$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$`，如：$\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$   
极限运算，符号：`$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$`，如：$\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}$   
求和运算，符号：`$\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$`，如：$\sum^{x\to\infty}_{y\to0}{\frac{x}{y}}$   
求和运算，符号：`$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$`，如：$\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}$   
积分运算，符号：`$\int^{\infty}_{0}{xdx}$`，如：$\int^{\infty}_{0}{xdx}$   
积分运算，符号：`$\displaystyle \int^{\infty}_{0}{xdx}$`，如：$\displaystyle \int^{\infty}_{0}{xdx}$    --&gt;
微分运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$\frac{\partial x}{\partial y}$&lt;/code&gt;，如：$\frac{\partial x}{\partial y}$ &lt;br /&gt;
矩阵表示，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$\left[ \begin{matrix} 1 &amp;amp;2 &amp;amp;\cdots &amp;amp;4\5 &amp;amp;6 &amp;amp;\cdots &amp;amp;8\\vdots &amp;amp;\vdots &amp;amp;\ddots &amp;amp;\vdots\13 &amp;amp;14 &amp;amp;\cdots &amp;amp;16\end{matrix} \right]$&lt;/code&gt;，如：$\left[ \begin{matrix} 1 &amp;amp;2 &amp;amp;\cdots &amp;amp;4\5 &amp;amp;6 &amp;amp;\cdots &amp;amp;8\vdots &amp;amp;\vdots &amp;amp;\ddots &amp;amp;\vdots\13 &amp;amp;14 &amp;amp;\cdots &amp;amp;16\end{matrix} \right]$&lt;/p&gt;

&lt;h3 id=&quot;逻辑运算&quot;&gt;逻辑运算&lt;/h3&gt;
&lt;p&gt;等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y=z$&lt;/code&gt;，如：$x+y=z$ &lt;br /&gt;
大于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y&amp;gt;z$&lt;/code&gt;，如：$x+y&amp;gt;z$ &lt;br /&gt;
小于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y&amp;lt;z$&lt;/code&gt;，如：$x+y&amp;lt;z$ &lt;br /&gt;
大于等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y \geq z$&lt;/code&gt;，如：$x+y \geq z$ &lt;br /&gt;
小于等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y \leq z$&lt;/code&gt;，如：$x+y \leq z$ &lt;br /&gt;
不等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y \neq z$&lt;/code&gt;，如：$x+y \neq z$  &lt;br /&gt;
不大于等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y \ngeq z$&lt;/code&gt;，如：$x+y \ngeq z$  &lt;br /&gt;
不大于等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y \not\geq z$&lt;/code&gt;，如：$x+y \not\geq z$  &lt;br /&gt;
不小于等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;如：$x+y \nleq z$&lt;/code&gt;，如：$x+y \nleq z$  &lt;br /&gt;
不小于等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;如：$x+y \not\leq z$&lt;/code&gt;，如：$x+y \not\leq z$   &lt;br /&gt;
约等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y \approx z$&lt;/code&gt;，如：$x+y \approx z$  &lt;br /&gt;
恒定等于运算，符号：&lt;code class=&quot;highlighter-rouge&quot;&gt;$x+y \equiv z$&lt;/code&gt;，如：$x+y \equiv z$&lt;/p&gt;

&lt;h3 id=&quot;包括整体&quot;&gt;包括整体&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$Z^{yx}$&lt;/code&gt;     $Z^{yx}$&lt;/p&gt;

&lt;h3 id=&quot;大括号&quot;&gt;大括号&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \left(大括号)\right. $&lt;/code&gt;     $\left(大括号)\right.$&lt;/p&gt;

&lt;h3 id=&quot;分割线&quot;&gt;分割线&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\frac{ x }{ y }&lt;/code&gt;     $\frac{ x }{ y }$
​&lt;/p&gt;

&lt;h3 id=&quot;开方&quot;&gt;开方&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \sqrt{ x } $&lt;/code&gt;      $\sqrt{ x }$
​
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \sqrt[ 3 ]{ x } $&lt;/code&gt;    $\sqrt[ 3 ]{ x }$
​&lt;/p&gt;

&lt;h3 id=&quot;省略号&quot;&gt;省略号&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \ldots $ 表示与文本底线对齐的省略号，$ \cdots $ 表示与文本中线对齐的省略号 &lt;/code&gt;      $\ldots $  $ \cdots$&lt;/p&gt;

&lt;h3 id=&quot;矢量&quot;&gt;矢量&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \vec{ a } $&lt;/code&gt;     $\vec{ a }$&lt;/p&gt;

&lt;h3 id=&quot;积分&quot;&gt;积分&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \int_0^2 x^2 {\rm d}x $&lt;/code&gt;       $\int_0^2 x^2 {\rm d}x$&lt;/p&gt;

&lt;h3 id=&quot;极限&quot;&gt;极限&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)} $&lt;/code&gt;      $\lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)}$
​&lt;/p&gt;

&lt;h3 id=&quot;累加&quot;&gt;累加&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sum_{i=0}^n$  $\frac{1}{i^2} $&lt;/code&gt;      $\sum_{i=0}^n$ $\frac{1}{i^2}$&lt;/p&gt;

&lt;h3 id=&quot;累乘&quot;&gt;累乘&lt;/h3&gt;
&lt;p&gt;语法：
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\prod_{i=0}^n \frac{1}{i^2}$&lt;/code&gt;         $\prod_{i=0}^n \frac{1}{i^2}$
​&lt;/p&gt;

&lt;h3 id=&quot;希腊字母&quot;&gt;希腊字母&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\alpha$&lt;/code&gt;  $\alpha$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\beta$&lt;/code&gt;   $\beta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\gamma$&lt;/code&gt;  $\gamma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Gamma$&lt;/code&gt;  $\Gamma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\delta$&lt;/code&gt;  $\delta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Delta$&lt;/code&gt;  $\Delta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\epsilon$&lt;/code&gt;  $\epsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varepsilon$&lt;/code&gt; $\varepsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\zeta$&lt;/code&gt; $\zeta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\eta$&lt;/code&gt;  $\eta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\theta$&lt;/code&gt;  $\theta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Theta$&lt;/code&gt;  $\Theta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\vartheta$&lt;/code&gt; $\vartheta$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iota$&lt;/code&gt; $\iota$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\kappa$&lt;/code&gt;  $\kappa$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\lambda$&lt;/code&gt; $\lambda$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Lambda$&lt;/code&gt; $\Lambda$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\mu$&lt;/code&gt; $\mu$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\nu$&lt;/code&gt; $\nu$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\xi$&lt;/code&gt; $\xi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Xi$&lt;/code&gt; $\Xi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\pi$&lt;/code&gt; $\pi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Pi$&lt;/code&gt; $\Pi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varpi$&lt;/code&gt;  $\varpi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\rho$&lt;/code&gt;  $\rho$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varrho$&lt;/code&gt; $\varrho$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sigma$&lt;/code&gt;  $\sigma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varsigma$&lt;/code&gt; $\varsigma$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\tau$&lt;/code&gt;  $\tau$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\upsilon$&lt;/code&gt;  $\upsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Upsilon$&lt;/code&gt;  $\Upsilon$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\phi$&lt;/code&gt;  $\phi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Phi$&lt;/code&gt;  $\Phi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\varphi$&lt;/code&gt; $\varphi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\chi$&lt;/code&gt;  $\chi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\psi$&lt;/code&gt;  $\psi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Psi$&lt;/code&gt;  $\Psi$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\omega$&lt;/code&gt;  $\omega$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Omega$&lt;/code&gt;  $\Omega$&lt;/p&gt;

&lt;h3 id=&quot;关系运算符&quot;&gt;关系运算符：&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\pm$&lt;/code&gt;  $\pm$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\times$&lt;/code&gt;  $\times$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\div$&lt;/code&gt;  $\div$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\mid$&lt;/code&gt;  $\mid$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\nmid$&lt;/code&gt;  $\nmid$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\cdot$&lt;/code&gt;  $\cdot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\circ$&lt;/code&gt;  $\circ$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\ast$&lt;/code&gt;  $\ast$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigodot$&lt;/code&gt;  $\bigodot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigotimes$&lt;/code&gt;  $\bigotimes$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigoplus$&lt;/code&gt;  $\bigoplus$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\leq$&lt;/code&gt;  $\leq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\geq$&lt;/code&gt;  $\geq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\neq$&lt;/code&gt;  $\neq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\approx$&lt;/code&gt;  $\approx$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\equiv$&lt;/code&gt;  $\equiv$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sum$&lt;/code&gt;  $\sum$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\prod$&lt;/code&gt;  $\prod$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\coprod$&lt;/code&gt;  $\coprod$&lt;/p&gt;

&lt;h3 id=&quot;集合运算符&quot;&gt;集合运算符：&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\emptyset$&lt;/code&gt;  $\emptyset$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\in$&lt;/code&gt;  $\in$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\notin$&lt;/code&gt;  $\notin$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\subset$&lt;/code&gt;  $\subset$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\supset$&lt;/code&gt;  $\supset$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\subseteq$&lt;/code&gt;  $\subseteq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\supseteq$&lt;/code&gt;  $\supseteq$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigcap$&lt;/code&gt;  $\bigcap$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigcup$&lt;/code&gt;  $\bigcup$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigvee$&lt;/code&gt;  $\bigvee$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigwedge$&lt;/code&gt;  $\bigwedge$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\biguplus$&lt;/code&gt;  $\biguplus$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bigsqcup$&lt;/code&gt;  $\bigsqcup$&lt;/p&gt;

&lt;h3 id=&quot;对数运算符&quot;&gt;对数运算符：&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\log$&lt;/code&gt;  $\log$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\lg$&lt;/code&gt;  $\lg$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\ln$&lt;/code&gt;  $\ln$&lt;/p&gt;

&lt;h3 id=&quot;三角运算符&quot;&gt;三角运算符：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bot$&lt;/code&gt;  $\bot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\angle$&lt;/code&gt;  $\angle$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$30^\circ$&lt;/code&gt;  $30^\circ$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sin$&lt;/code&gt;  $\sin$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\cos$&lt;/code&gt;  $\cos$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\tan$&lt;/code&gt;  $\tan$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\cot$&lt;/code&gt;  $\cot$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\sec$&lt;/code&gt;  $\sec$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\csc$&lt;/code&gt;  $\csc$&lt;/p&gt;

&lt;h3 id=&quot;微积分运算符&quot;&gt;微积分运算符：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\prime$&lt;/code&gt;  $\prime$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\int$&lt;/code&gt;  $\int$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iint$&lt;/code&gt;  $\iint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iiint$&lt;/code&gt;  $\iiint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\iiiint$&lt;/code&gt;  $\iiiint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\oint$&lt;/code&gt;  $\oint$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\lim$&lt;/code&gt;  $\lim$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\infty$&lt;/code&gt;  $\infty$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\nabla$&lt;/code&gt;  $\nabla$&lt;/p&gt;

&lt;h3 id=&quot;逻辑运算符&quot;&gt;逻辑运算符：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\because$&lt;/code&gt;  $\because$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\therefore$&lt;/code&gt;  $\therefore$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\forall$&lt;/code&gt;  $\forall$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\exists$&lt;/code&gt;  $\exists$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\not=$&lt;/code&gt;  $\not=$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\not&amp;gt;$&lt;/code&gt;  $\not&amp;gt;$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\not\subset$&lt;/code&gt;  $\not\subset$&lt;/p&gt;

&lt;h3 id=&quot;戴帽符号&quot;&gt;戴帽符号：&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\hat{y}$&lt;/code&gt;  $\hat{y}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\check{y}$&lt;/code&gt;  $\check{y}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\breve{y}$&lt;/code&gt;  $\breve{y}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\bar{a}$&lt;/code&gt;  $\bar{a}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\tilde{a}$&lt;/code&gt;  $\tilde{a}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\widetilde{A}$&lt;/code&gt;  $\widetilde{A}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\vec{a}$&lt;/code&gt;  $\vec{a}$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\dot$&lt;/code&gt;  $\dot
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\ddot$&lt;/code&gt;  $\ddot&lt;/p&gt;

&lt;h3 id=&quot;连线符号&quot;&gt;连线符号：&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\overline{a+b+c+d}$&lt;/code&gt;    $\overline{a+b+c+d}$&lt;/p&gt;

&lt;p&gt;​
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$&lt;/code&gt;  $\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$&lt;/p&gt;

&lt;p&gt;箭头符号：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$\uparrow$&lt;/code&gt;  $\uparrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\downarrow$&lt;/code&gt;  $\downarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Uparrow$&lt;/code&gt;  $\Uparrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Downarrow$&lt;/code&gt;  $\Downarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\rightarrow$&lt;/code&gt;  $\rightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\leftarrow$&lt;/code&gt;  $\leftarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Rightarrow$&lt;/code&gt;  $\Rightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Leftarrow$&lt;/code&gt;  $\Leftarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\longrightarrow$&lt;/code&gt;  $\longrightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\longleftarrow$&lt;/code&gt;  $\longleftarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Longrightarrow$&lt;/code&gt;  $\Longrightarrow$
&lt;code class=&quot;highlighter-rouge&quot;&gt;$\Longleftarrow$&lt;/code&gt;  $\Longleftarrow$&lt;/p&gt;

&lt;h3 id=&quot;分段函数&quot;&gt;分段函数&lt;/h3&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
函数名=\begin{cases}
公式1 &amp; 条件1 \\
公式2 &amp; 条件2 \\
公式3 &amp; 条件3
\end{cases} %]]&gt;&lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$$ 函数名=\begin{cases}
公式1 &amp;amp; 条件1 \\
公式2 &amp;amp; 条件2 \\
公式3 &amp;amp; 条件3
\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$$
 \left[
 \begin{matrix}
   1 &amp;amp; 2 &amp;amp; 3 \\
   4 &amp;amp; 5 &amp;amp; 6 \\
   7 &amp;amp; 8 &amp;amp; 9
  \end{matrix}
  \right] \tag{3}
$$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\left[
 \begin{matrix}
   1 &amp; 2 &amp; 3 \\
   4 &amp; 5 &amp; 6 \\
   7 &amp; 8 &amp; 9
  \end{matrix}
  \right] \tag{3} %]]&gt;&lt;/script&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="markdown常见数学符号和运算" /><summary type="html">MarkDown常用数学符号 记得一定要加$$才可以显示效果 显示效果 语法： $ 数学符号必须加在运算符号前后 上标 语法： $x^2$ $x^2$ 下标 $x_i$ $x_i$ 四则运算 加法运算，符号：$x+y=z$，如：$x+y=z$ 减法运算，符号：$x-y=z$ ，如：$x-y=z$ 加减运算，符号：$x \pm y=z$，如：$x \pm y=z$ 减甲运算，符号：$x \mp y=z$，如：$x \mp y=z$ 乘法运算，符号：$x \times y=z$，如：$x \times y=z$ 点乘运算，符号：$x \cdot y=z$，如：$x \cdot y=z$ 星乘运算，符号：$x \ast y=z$，如：$x \ast y=z$ 除法运算，符号：$x \div y=z$，如：$x \div y=z$ 斜法运算，符号：$x/y=z$，如：$x/y=z$ 分式表示，符号：$\frac{x+y}{y+z}$，如：$\frac{x+y}{y+z}$ 分式表示，符号：${x+y} \over {y+z}$，如：${x+y} \over {y+z}$ 绝对值表示，符号：如：$|x+y|$，如：$|x+y|$ 高级运算 平均数运算，符号：$\overline{xyz}$，如：$\overline{xyz}$ 开二次方运算，符号：$\sqrt x$，如：$\sqrt x$ 开方运算，符号：$\sqrt[3]{x+y}$，如：$\sqrt[3]{x+y}$ 对数运算，符号：$\log(x)$，如：$\log(x)$ 微分运算，符号：$\frac{\partial x}{\partial y}$，如：$\frac{\partial x}{\partial y}$ 矩阵表示，符号：$\left[ \begin{matrix} 1 &amp;amp;2 &amp;amp;\cdots &amp;amp;4\5 &amp;amp;6 &amp;amp;\cdots &amp;amp;8\\vdots &amp;amp;\vdots &amp;amp;\ddots &amp;amp;\vdots\13 &amp;amp;14 &amp;amp;\cdots &amp;amp;16\end{matrix} \right]$，如：$\left[ \begin{matrix} 1 &amp;amp;2 &amp;amp;\cdots &amp;amp;4\5 &amp;amp;6 &amp;amp;\cdots &amp;amp;8\vdots &amp;amp;\vdots &amp;amp;\ddots &amp;amp;\vdots\13 &amp;amp;14 &amp;amp;\cdots &amp;amp;16\end{matrix} \right]$ 逻辑运算 等于运算，符号：$x+y=z$，如：$x+y=z$ 大于运算，符号：$x+y&amp;gt;z$，如：$x+y&amp;gt;z$ 小于运算，符号：$x+y&amp;lt;z$，如：$x+y&amp;lt;z$ 大于等于运算，符号：$x+y \geq z$，如：$x+y \geq z$ 小于等于运算，符号：$x+y \leq z$，如：$x+y \leq z$ 不等于运算，符号：$x+y \neq z$，如：$x+y \neq z$ 不大于等于运算，符号：$x+y \ngeq z$，如：$x+y \ngeq z$ 不大于等于运算，符号：$x+y \not\geq z$，如：$x+y \not\geq z$ 不小于等于运算，符号：如：$x+y \nleq z$，如：$x+y \nleq z$ 不小于等于运算，符号：如：$x+y \not\leq z$，如：$x+y \not\leq z$ 约等于运算，符号：$x+y \approx z$，如：$x+y \approx z$ 恒定等于运算，符号：$x+y \equiv z$，如：$x+y \equiv z$ 包括整体 语法： $Z^{yx}$ $Z^{yx}$ 大括号 语法： $ \left(大括号)\right. $ $\left(大括号)\right.$ 分割线 语法： $\frac{ x }{ y } $\frac{ x }{ y }$ ​ 开方 语法： $ \sqrt{ x } $ $\sqrt{ x }$ ​ $ \sqrt[ 3 ]{ x } $ $\sqrt[ 3 ]{ x }$ ​ 省略号 语法： $ \ldots $ 表示与文本底线对齐的省略号，$ \cdots $ 表示与文本中线对齐的省略号 $\ldots $ $ \cdots$ 矢量 语法： $ \vec{ a } $ $\vec{ a }$ 积分 语法： $ \int_0^2 x^2 {\rm d}x $ $\int_0^2 x^2 {\rm d}x$ 极限 语法： $ \lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)} $ $\lim\limits_{n \rightarrow +\infty} \frac{1}{n(n+1)}$ ​ 累加 语法： $\sum_{i=0}^n$ $\frac{1}{i^2} $ $\sum_{i=0}^n$ $\frac{1}{i^2}$ 累乘 语法： $\prod_{i=0}^n \frac{1}{i^2}$ $\prod_{i=0}^n \frac{1}{i^2}$ ​ 希腊字母 $\alpha$ $\alpha$ $\beta$ $\beta$ $\gamma$ $\gamma$ $\Gamma$ $\Gamma$ $\delta$ $\delta$ $\Delta$ $\Delta$ $\epsilon$ $\epsilon$ $\varepsilon$ $\varepsilon$ $\zeta$ $\zeta$ $\eta$ $\eta$ $\theta$ $\theta$ $\Theta$ $\Theta$ $\vartheta$ $\vartheta$ $\iota$ $\iota$ $\kappa$ $\kappa$ $\lambda$ $\lambda$ $\Lambda$ $\Lambda$ $\mu$ $\mu$ $\nu$ $\nu$ $\xi$ $\xi$ $\Xi$ $\Xi$ $\pi$ $\pi$ $\Pi$ $\Pi$ $\varpi$ $\varpi$ $\rho$ $\rho$ $\varrho$ $\varrho$ $\sigma$ $\sigma$ $\varsigma$ $\varsigma$ $\tau$ $\tau$ $\upsilon$ $\upsilon$ $\Upsilon$ $\Upsilon$ $\phi$ $\phi$ $\Phi$ $\Phi$ $\varphi$ $\varphi$ $\chi$ $\chi$ $\psi$ $\psi$ $\Psi$ $\Psi$ $\omega$ $\omega$ $\Omega$ $\Omega$ 关系运算符： $\pm$ $\pm$ $\times$ $\times$ $\div$ $\div$ $\mid$ $\mid$ $\nmid$ $\nmid$ $\cdot$ $\cdot$ $\circ$ $\circ$ $\ast$ $\ast$ $\bigodot$ $\bigodot$ $\bigotimes$ $\bigotimes$ $\bigoplus$ $\bigoplus$ $\leq$ $\leq$ $\geq$ $\geq$ $\neq$ $\neq$ $\approx$ $\approx$ $\equiv$ $\equiv$ $\sum$ $\sum$ $\prod$ $\prod$ $\coprod$ $\coprod$ 集合运算符： $\emptyset$ $\emptyset$ $\in$ $\in$ $\notin$ $\notin$ $\subset$ $\subset$ $\supset$ $\supset$ $\subseteq$ $\subseteq$ $\supseteq$ $\supseteq$ $\bigcap$ $\bigcap$ $\bigcup$ $\bigcup$ $\bigvee$ $\bigvee$ $\bigwedge$ $\bigwedge$ $\biguplus$ $\biguplus$ $\bigsqcup$ $\bigsqcup$ 对数运算符： $\log$ $\log$ $\lg$ $\lg$ $\ln$ $\ln$ 三角运算符： $\bot$ $\bot$ $\angle$ $\angle$ $30^\circ$ $30^\circ$ $\sin$ $\sin$ $\cos$ $\cos$ $\tan$ $\tan$ $\cot$ $\cot$ $\sec$ $\sec$ $\csc$ $\csc$ 微积分运算符： $\prime$ $\prime$ $\int$ $\int$ $\iint$ $\iint$ $\iiint$ $\iiint$ $\iiiint$ $\iiiint$ $\oint$ $\oint$ $\lim$ $\lim$ $\infty$ $\infty$ $\nabla$ $\nabla$ 逻辑运算符： $\because$ $\because$ $\therefore$ $\therefore$ $\forall$ $\forall$ $\exists$ $\exists$ $\not=$ $\not=$ $\not&amp;gt;$ $\not&amp;gt;$ $\not\subset$ $\not\subset$ 戴帽符号： $\hat{y}$ $\hat{y}$ $\check{y}$ $\check{y}$ $\breve{y}$ $\breve{y}$ $\bar{a}$ $\bar{a}$ $\tilde{a}$ $\tilde{a}$ $\widetilde{A}$ $\widetilde{A}$ $\vec{a}$ $\vec{a}$ $\dot$ $\dot $\ddot$ $\ddot 连线符号： $\overline{a+b+c+d}$ $\overline{a+b+c+d}$ ​ $\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$ $\overbrace{a+\underbrace{b+c}{1.0}+d}^{2.0}$ 箭头符号： $\uparrow$ $\uparrow$ $\downarrow$ $\downarrow$ $\Uparrow$ $\Uparrow$ $\Downarrow$ $\Downarrow$ $\rightarrow$ $\rightarrow$ $\leftarrow$ $\leftarrow$ $\Rightarrow$ $\Rightarrow$ $\Leftarrow$ $\Leftarrow$ $\longrightarrow$ $\longrightarrow$ $\longleftarrow$ $\longleftarrow$ $\Longrightarrow$ $\Longrightarrow$ $\Longleftarrow$ $\Longleftarrow$ 分段函数 $$ 函数名=\begin{cases} 公式1 &amp;amp; 条件1 \\ 公式2 &amp;amp; 条件2 \\ 公式3 &amp;amp; 条件3 \end{cases}$$ $$ \left[ \begin{matrix} 1 &amp;amp; 2 &amp;amp; 3 \\ 4 &amp;amp; 5 &amp;amp; 6 \\ 7 &amp;amp; 8 &amp;amp; 9 \end{matrix} \right] \tag{3} $$</summary></entry><entry><title type="html">贪心</title><link href="http://localhost:4000/algo/2020/0430/006" rel="alternate" type="text/html" title="贪心" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E8%B4%AA%E5%BF%83</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/006">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="贪心" /><summary type="html">TODO</summary></entry><entry><title type="html">线性扫描</title><link href="http://localhost:4000/algo/2020/0430/005" rel="alternate" type="text/html" title="线性扫描" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/005">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="线性扫描" /><summary type="html">TODO</summary></entry><entry><title type="html">快慢指针</title><link href="http://localhost:4000/algo/2020/0430/007" rel="alternate" type="text/html" title="快慢指针" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E5%BF%AB%E6%85%A2%E6%8C%87%E9%92%88</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/007">&lt;ul&gt;
  &lt;li&gt;概念&lt;/li&gt;
  &lt;li&gt;使用场景
    &lt;ul&gt;
      &lt;li&gt;判断循环就用快慢指针&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;示例
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/&quot;&gt;202. 快乐数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="快慢指针" /><summary type="html">概念 使用场景 判断循环就用快慢指针 示例 202. 快乐数</summary></entry><entry><title type="html">小根堆</title><link href="http://localhost:4000/algo/2020/0430/004" rel="alternate" type="text/html" title="小根堆" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E5%B0%8F%E6%A0%B9%E5%A0%86</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/004">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="小根堆" /><summary type="html">TODO</summary></entry><entry><title type="html">大根堆</title><link href="http://localhost:4000/algo/2020/0430/003" rel="alternate" type="text/html" title="大根堆" /><published>2020-04-30T00:00:00+08:00</published><updated>2020-04-30T00:00:00+08:00</updated><id>http://localhost:4000/algo/2020/0430/%E5%A4%A7%E6%A0%B9%E5%A0%86</id><content type="html" xml:base="http://localhost:4000/algo/2020/0430/003">&lt;p&gt;TODO&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="算法" /><category term="大根堆" /><summary type="html">TODO</summary></entry></feed>