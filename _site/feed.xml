<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-02-11T22:15:51+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JAVA 牛牛</title><subtitle>记录在java的道路能走多远
</subtitle><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><entry><title type="html">java中DTO的使用(DTO数据传输对象)</title><link href="http://localhost:4000/codedesign/dto" rel="alternate" type="text/html" title="java中DTO的使用(DTO数据传输对象)" /><published>2020-02-11T00:00:00+08:00</published><updated>2020-02-11T00:00:00+08:00</updated><id>http://localhost:4000/codedesign/DTO</id><content type="html" xml:base="http://localhost:4000/codedesign/dto">&lt;p&gt;比如，Customer领域对象可能会包含一些诸如FirstName, LastName, Email, Address等信息。但如果UI上不打算显示Address的信&lt;/p&gt;

&lt;p&gt;需要了解的是，数据传输对象DTO本身并不是业务对象。数据传输对象是根据UI的需求进行设计的，而不 是根据领域对象进行设计的
简单来说Model面向业务，我们是通过业务来定义Model的。而DTO是面向界面UI，是通过UI的需求来定义的。通过DTO我们实现了表现层与Model之间的解耦，表现层不引用Model，如果开发过程中我们的模型改变了，而界面没变，我们就只需要改Model而不需要去改表现层中的东西。&lt;/p&gt;

&lt;h5 id=&quot;概念&quot;&gt;概念&lt;/h5&gt;

&lt;p&gt;DTO即数据传输对象。之前不明白有些框架中为什么要专门定义DTO来绑定表现层中的数据，为什么不能直接用实体模型呢，有了DTO同时还要维护DTO与Model之间的映射关系。&lt;/p&gt;

&lt;p&gt;然后看了这篇文章中的讨论部分才恍然大悟。&lt;/p&gt;

&lt;p&gt;表现层与应用层之间是通过数据传输对象（DTO）进行交互的，数据传输对象是没有行为的POCO对象，它 的目的只是为了对领域对象进行数据封装，实现层与层之间的数据传递。为何不能直接将领域对象用于 数据传递？因为领域对象更注重领域，而DTO更注重数据。不仅如此，由于“富领域模型”的特点，这样 做会直接将领域对象的行为暴露给表现层。&lt;/p&gt;

&lt;h5 id=&quot;对比&quot;&gt;对比&lt;/h5&gt;
&lt;p&gt;传统的三层架构&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent/minplemon/minplemon.github.io/master/images/java_code_design/52017893333_2.gif&quot; alt=&quot;1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;领域驱动设计的分层&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent/minplemon/minplemon.github.io/tree/master/images/java_code_design/52029421305_2.gif&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;参考文章&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/daxnet/archive/2010/07/07/1772584.html&quot;&gt;EntityFramework之领域驱动设计实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="代码设计" /><summary type="html">比如，Customer领域对象可能会包含一些诸如FirstName, LastName, Email, Address等信息。但如果UI上不打算显示Address的信 需要了解的是，数据传输对象DTO本身并不是业务对象。数据传输对象是根据UI的需求进行设计的，而不 是根据领域对象进行设计的 简单来说Model面向业务，我们是通过业务来定义Model的。而DTO是面向界面UI，是通过UI的需求来定义的。通过DTO我们实现了表现层与Model之间的解耦，表现层不引用Model，如果开发过程中我们的模型改变了，而界面没变，我们就只需要改Model而不需要去改表现层中的东西。 概念 DTO即数据传输对象。之前不明白有些框架中为什么要专门定义DTO来绑定表现层中的数据，为什么不能直接用实体模型呢，有了DTO同时还要维护DTO与Model之间的映射关系。 然后看了这篇文章中的讨论部分才恍然大悟。 表现层与应用层之间是通过数据传输对象（DTO）进行交互的，数据传输对象是没有行为的POCO对象，它 的目的只是为了对领域对象进行数据封装，实现层与层之间的数据传递。为何不能直接将领域对象用于 数据传递？因为领域对象更注重领域，而DTO更注重数据。不仅如此，由于“富领域模型”的特点，这样 做会直接将领域对象的行为暴露给表现层。 对比 传统的三层架构 领域驱动设计的分层 参考文章 EntityFramework之领域驱动设计实践</summary></entry><entry><title type="html">springboot-di</title><link href="http://localhost:4000/springboot/di" rel="alternate" type="text/html" title="springboot-di" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/springboot/springboot-di</id><content type="html" xml:base="http://localhost:4000/springboot/di">&lt;p&gt;A Post with Header Image, See &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout&quot;&gt;Page layout&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="springboot" /><summary type="html">A Post with Header Image, See Page layout for more examples.</summary></entry><entry><title type="html">spring-aoc</title><link href="http://localhost:4000/spring/aoc" rel="alternate" type="text/html" title="spring-aoc" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/spring/spring-aoc</id><content type="html" xml:base="http://localhost:4000/spring/aoc">&lt;p&gt;A Post with Header Image, See &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout&quot;&gt;Page layout&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="spring" /><summary type="html">A Post with Header Image, See Page layout for more examples.</summary></entry><entry><title type="html">TODO</title><link href="http://localhost:4000/todo" rel="alternate" type="text/html" title="TODO" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/TODO</id><content type="html" xml:base="http://localhost:4000/todo">&lt;h2 id=&quot;所有记录&quot;&gt;所有记录&lt;/h2&gt;

&lt;h4 id=&quot;紧急项&quot;&gt;紧急项&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;缓存相关，缓存更新,redis持久化（完成）&lt;/li&gt;
  &lt;li&gt;事务相关(Transactional)&lt;/li&gt;
  &lt;li&gt;微信公众(一周后)&lt;/li&gt;
  &lt;li&gt;csdn 做一个爆款文章&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;靠前项&quot;&gt;靠前项&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;TDD （靠前，明天继续做）&lt;/li&gt;
  &lt;li&gt;Springboot 测试样例&lt;/li&gt;
  &lt;li&gt;VO(完成)、DTO(完成)、DO、PO的概念、区别和用处&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;靠后项&quot;&gt;靠后项&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;数据库设计 （靠后）&lt;/li&gt;
  &lt;li&gt;vhr数据库设计（靠后）&lt;/li&gt;
  &lt;li&gt;工厂类（靠后）&lt;/li&gt;
  &lt;li&gt;异常处理类封装&lt;/li&gt;
  &lt;li&gt;SpringSecurity&lt;/li&gt;
  &lt;li&gt;自定义注解&lt;/li&gt;
  &lt;li&gt;通过ramq实现数据同步&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;已开始&quot;&gt;已开始&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;VO(完成)、DTO、DO、PO的概念、区别和用处&lt;/li&gt;
  &lt;li&gt;mybits（了解大概，在持续做）&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;正在进行&quot;&gt;正在进行&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;开始时间&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2020/02/10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mybatis&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;~&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2020/02/10&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;范型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;BaseService&amp;lt;M extends MyMapper&lt;T&gt;,T&amp;gt;&lt;/T&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;完成完成的都已编辑成文档&quot;&gt;完成(完成的都已编辑成文档)&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;vhr项目完成一遍(完成，现在的想法是做模仿别人的代码先，在做后面添加自己想要的功能)
    &lt;ul&gt;
      &lt;li&gt;基于jpa实现dao层，基于注解实现实体类(待操作)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="TODO" /><summary type="html">所有记录 紧急项 缓存相关，缓存更新,redis持久化（完成） 事务相关(Transactional) 微信公众(一周后) csdn 做一个爆款文章 靠前项 TDD （靠前，明天继续做） Springboot 测试样例 VO(完成)、DTO(完成)、DO、PO的概念、区别和用处 靠后项 数据库设计 （靠后） vhr数据库设计（靠后） 工厂类（靠后） 异常处理类封装 SpringSecurity 自定义注解 通过ramq实现数据同步 已开始 VO(完成)、DTO、DO、PO的概念、区别和用处 mybits（了解大概，在持续做） 正在进行 开始时间 类型 描述 2020/02/10 mybatis ~ 2020/02/10 范型 BaseService&amp;lt;M extends MyMapper,T&amp;gt; 完成(完成的都已编辑成文档) vhr项目完成一遍(完成，现在的想法是做模仿别人的代码先，在做后面添加自己想要的功能) 基于jpa实现dao层，基于注解实现实体类(待操作)</summary></entry><entry><title type="html">注释解释</title><link href="http://localhost:4000/annotation" rel="alternate" type="text/html" title="注释解释" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/annotation</id><content type="html" xml:base="http://localhost:4000/annotation">&lt;p&gt;@Slf4j 一般注解在类的开头 &lt;a href=&quot;https://blog.csdn.net/fanrenxiang/article/details/81012803&quot;&gt;详情参考&lt;/a&gt;&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="注解" /><summary type="html">@Slf4j 一般注解在类的开头 详情参考</summary></entry><entry><title type="html">java代码设计</title><link href="http://localhost:4000/2020/02/10/java-code-design.html" rel="alternate" type="text/html" title="java代码设计" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/2020/02/10/java-code-design</id><content type="html" xml:base="http://localhost:4000/2020/02/10/java-code-design.html">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/king101125s/article/details/104228364&quot;&gt;mysql 视图 &lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;范型 MyMappe extends Mapper, MySqlMapper&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Senssic/sc-whorl/blob/master/sc-whorl-web/src/main/java/sc/whorl/system/commons/MyMapper.java&quot;&gt;源码参考&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.runoob.com/java/java-generics.html&quot;&gt;范型说明参考&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/Thousa_Ho/article/details/73196347&quot;&gt;JAVA VO、DTO、DO、PO的概念&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="代码设计" /><summary type="html">mysql 视图 范型 MyMappe extends Mapper, MySqlMapper 源码参考 范型说明参考 JAVA VO、DTO、DO、PO的概念</summary></entry><entry><title type="html">mark web site</title><link href="http://localhost:4000/mark/website" rel="alternate" type="text/html" title="mark web site" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/mark/mark-web-site</id><content type="html" xml:base="http://localhost:4000/mark/website">&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;logback&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;继承自 log4j&lt;/code&gt;，它建立在有十年工业经验的日志系统之上。它 &lt;code class=&quot;highlighter-rouge&quot;&gt;比其它所有的日志系统更快并且更小&lt;/code&gt;，包含了许多独特并且有用的特性。&lt;a href=&quot;http://www.logback.cn&quot;&gt;详细参考文档&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;领域驱动设计实践&lt;/strong&gt; 领域驱动设计将软件系统分为四层：基础结构层、领域层、应用层和表现层。&lt;a href=&quot;https://www.cnblogs.com/daxnet/archive/2010/07/07/1772584.html&quot;&gt;参考，领域驱动设计实践（一，二，三）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="mark" /><summary type="html">logback 继承自 log4j，它建立在有十年工业经验的日志系统之上。它 比其它所有的日志系统更快并且更小，包含了许多独特并且有用的特性。详细参考文档 领域驱动设计实践 领域驱动设计将软件系统分为四层：基础结构层、领域层、应用层和表现层。参考，领域驱动设计实践（一，二，三）</summary></entry><entry><title type="html">spring-aop</title><link href="http://localhost:4000/spring/aop" rel="alternate" type="text/html" title="spring-aop" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/spring/spring-aop</id><content type="html" xml:base="http://localhost:4000/spring/aop">&lt;p&gt;A Post with Header Image, See &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout&quot;&gt;Page layout&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="spring" /><summary type="html">A Post with Header Image, See Page layout for more examples.</summary></entry><entry><title type="html">spring-di</title><link href="http://localhost:4000/spring/di" rel="alternate" type="text/html" title="spring-di" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/spring/spring-di</id><content type="html" xml:base="http://localhost:4000/spring/di">&lt;p&gt;A Post with Header Image, See &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout&quot;&gt;Page layout&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="spring" /><summary type="html">A Post with Header Image, See Page layout for more examples.</summary></entry><entry><title type="html">springboot-aoc</title><link href="http://localhost:4000/springboot/aoc" rel="alternate" type="text/html" title="springboot-aoc" /><published>2020-02-10T00:00:00+08:00</published><updated>2020-02-10T00:00:00+08:00</updated><id>http://localhost:4000/springboot/springboot-aoc</id><content type="html" xml:base="http://localhost:4000/springboot/aoc">&lt;p&gt;A Post with Header Image, See &lt;a href=&quot;https://tianqi.name/jekyll-TeXt-theme/samples.html#page-layout&quot;&gt;Page layout&lt;/a&gt; for more examples.&lt;/p&gt;

&lt;!--more--&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="springboot" /><summary type="html">A Post with Header Image, See Page layout for more examples.</summary></entry></feed>