<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.1.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2020-07-07T19:37:04+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">JAVA 牛牛</title><subtitle>主要是想看下自己还能在多做些什么
</subtitle><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><entry><title type="html">各种 Spring-Boot-Starters系列 介绍</title><link href="http://localhost:4000/mianshi/springboot/0707/01" rel="alternate" type="text/html" title="各种 Spring-Boot-Starters系列 介绍" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/springboot/0707/%E5%90%84%E7%A7%8D%20Spring-Boot-Starters%E7%B3%BB%E5%88%97%20%E4%BB%8B%E7%BB%8D</id><content type="html" xml:base="http://localhost:4000/mianshi/springboot/0707/01">&lt;h1 id=&quot;spring-boot-application-starters&quot;&gt;Spring Boot application starters&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-thymeleaf&lt;/td&gt;
      &lt;td&gt;使MVC Web applications 支持Thymeleaf&lt;/td&gt;
      &lt;td&gt;Thymeleaf是一个JAVA库，一个XML/XHTML/HTML5的可扩展的模板引擎，同类事物：Jsp&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-couchbase&lt;/td&gt;
      &lt;td&gt;使用Couchbase 文件存储数据库、Spring Data Couchbase&lt;/td&gt;
      &lt;td&gt;Spring Data是一个用于简化数据库访问，并支持云服务的开源框架&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-artemis&lt;/td&gt;
      &lt;td&gt;为JMS messaging使用Apache Artemis&lt;/td&gt;
      &lt;td&gt;JMS是Java消息服务；HornetQ代码库捐献给 Apache ActiveMQ 社区，它现在成为ActiveMQ旗下的一个子项目，名为 “Artemis”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-web-services&lt;/td&gt;
      &lt;td&gt;使用Spring Web Services&lt;/td&gt;
      &lt;td&gt;Spring Web Services是基于Spring框架的Web服务框架，主要侧重于基于文档驱动的Web服务，提供SOAP服务开发，允许通过多种方式创建 Web 服务。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-mail&lt;/td&gt;
      &lt;td&gt;使用Java Mail、Spring email发送支持&lt;/td&gt;
      &lt;td&gt;Java Mail、Spring email为邮件发送工具&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-redis&lt;/td&gt;
      &lt;td&gt;通过Spring Data Redis 、Jedis client使用Redis键值存储数据库&lt;/td&gt;
      &lt;td&gt;Jedis 是 Redis 官方首选的 Java 客户端开发包&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-web&lt;/td&gt;
      &lt;td&gt;构建Web，包含RESTful风格框架SpringMVC和默认的嵌入式容器Tomcat&lt;/td&gt;
      &lt;td&gt;RESTful是一种软件架构风格，设计风格而不是标准，只是提供了一组设计原则和约束条件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-activemq&lt;/td&gt;
      &lt;td&gt;为JMS使用Apache ActiveMQ&lt;/td&gt;
      &lt;td&gt;ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-elasticsearch&lt;/td&gt;
      &lt;td&gt;使用Elasticsearch、analytics engine、Spring Data Elasticsearch&lt;/td&gt;
      &lt;td&gt;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-integration&lt;/td&gt;
      &lt;td&gt;使用Spring Integration&lt;/td&gt;
      &lt;td&gt;Spring Integration是Spring框架创建的一个API，面向企业应用集成（EAI）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-test&lt;/td&gt;
      &lt;td&gt;测试 Spring Boot applications包含JUnit、 Hamcrest、Mockito&lt;/td&gt;
      &lt;td&gt;JUnit、 Hamcrest、Mockito为测试框架&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-jdbc&lt;/td&gt;
      &lt;td&gt;通过 Tomcat JDBC 连接池使用JDBC&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-mobile&lt;/td&gt;
      &lt;td&gt;通过Spring Mobile构建Web应用&lt;/td&gt;
      &lt;td&gt;Spring Mobile 是 Spring MVC 的扩展,用来简化手机上的Web应用开发&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-validation&lt;/td&gt;
      &lt;td&gt;通过Hibernate Validator使用 Java Bean Validation&lt;/td&gt;
      &lt;td&gt;Bean Validation 是一个数据验证的规范；Hibernate Validator是一个数据验证框架&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-hateoas&lt;/td&gt;
      &lt;td&gt;使用Spring MVC、Spring HATEOAS构建 hypermedia-based RESTful Web 应用&lt;/td&gt;
      &lt;td&gt;hypermedia-based似乎是专业术语，博主表示不会翻译；Spring HATEOAS 是一个用于支持实现超文本驱动的 REST Web 服务的开发库&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-jersey&lt;/td&gt;
      &lt;td&gt;通过 JAX-RS、Jersey构建 RESTful web applications；spring-boot-starter-web的另一替代方案&lt;/td&gt;
      &lt;td&gt;JAX-RS是JAVA EE6 引入的一个新技术；Jersey不仅仅是一个JAX-RS的参考实现，Jersey提供自己的API，其API继承自JAX-RS，提供更多的特性和功能以进一步简化RESTful service和客户端的开发&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-neo4j&lt;/td&gt;
      &lt;td&gt;使用Neo4j图形数据库、Spring Data Neo4j&lt;/td&gt;
      &lt;td&gt;Neo4j是一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-websocket&lt;/td&gt;
      &lt;td&gt;使用Spring WebSocket构建 WebSocket 应用&lt;/td&gt;
      &lt;td&gt;Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-aop&lt;/td&gt;
      &lt;td&gt;通过Spring AOP、AspectJ面向切面编程&lt;/td&gt;
      &lt;td&gt;AspectJ是一个面向切面的框架，它扩展了Java语言&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-amqp&lt;/td&gt;
      &lt;td&gt;使用Spring AMQP、Rabbit MQ&lt;/td&gt;
      &lt;td&gt;Spring AMQP 是基于 Spring 框架的 AMQP 消息解决方案,提供模板化的发送和接收消息的抽象层,提供基于消息驱动的 POJO；RabbitMQ是一个在AMQP基础上完整的，可复用的企业消息系统&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-cassandra&lt;/td&gt;
      &lt;td&gt;使用Cassandra分布式数据库、Spring Data Cassandra&lt;/td&gt;
      &lt;td&gt;Apache Cassandra是一套开源分布式NoSQL数据库系统&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-social-facebook&lt;/td&gt;
      &lt;td&gt;使用 Spring Social Facebook&lt;/td&gt;
      &lt;td&gt;Facebook提供用户使用第三方社交网络的账号API，同类事物：QQ第三方登录接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-jta-atomikos&lt;/td&gt;
      &lt;td&gt;为 JTA 使用 Atomikos&lt;/td&gt;
      &lt;td&gt;JTA，即Java Transaction API，JTA允许应用程序执行分布式事务处理；Atomikos 是一个为Java平台提供增值服务的并且开源类事务管理&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-security&lt;/td&gt;
      &lt;td&gt;使用 Spring Security&lt;/td&gt;
      &lt;td&gt;Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-mustache&lt;/td&gt;
      &lt;td&gt;使MVC Web applications 支持Mustache&lt;/td&gt;
      &lt;td&gt;Mustache是基于JavaScript实现的模版引擎，类似于jQuery Template，但是这个模版更加的轻量级，语法更加的简单易用，很容易上手&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-jpa&lt;/td&gt;
      &lt;td&gt;通过 Hibernate 使用 Spring Data JPA （Spring-data-jpa依赖于Hibernate）&lt;/td&gt;
      &lt;td&gt;JPA全称Java Persistence API.JPA通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter&lt;/td&gt;
      &lt;td&gt;Core starter,包括 自动配置支持、 logging and YAML&lt;/td&gt;
      &lt;td&gt;logging是指的Starter的专有框架；YAML是“另一种标记语言”的外语缩写，它参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-groovy-templates&lt;/td&gt;
      &lt;td&gt;使MVC Web applications 支持Groovy Templates&lt;/td&gt;
      &lt;td&gt;Groovy Templates是模视图模板，同类事物：Jsp&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-freemarker&lt;/td&gt;
      &lt;td&gt;使MVC Web applications 支持 FreeMarker&lt;/td&gt;
      &lt;td&gt;FreeMarker是模视图模板，同类事物：Jsp&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-batch&lt;/td&gt;
      &lt;td&gt;使用Spring Batch&lt;/td&gt;
      &lt;td&gt;Spring Batch是一个轻量级的,完全面向Spring的批处理框架,可以应用于企业级大量的数据处理系统&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-social-linkedin&lt;/td&gt;
      &lt;td&gt;使用Spring Social LinkedIn&lt;/td&gt;
      &lt;td&gt;LinkedIn提供用户使用第三方社交网络的账号API，同类事物：QQ第三方登录接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-cache&lt;/td&gt;
      &lt;td&gt;使用 Spring caching 支持&lt;/td&gt;
      &lt;td&gt;Spring caching是Spring的提供的缓存框架&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-solr&lt;/td&gt;
      &lt;td&gt;通过 Spring Data Solr 使用 Apache Solr&lt;/td&gt;
      &lt;td&gt;Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-mongodb&lt;/td&gt;
      &lt;td&gt;使用 MongoDB 文件存储数据库、Spring Data MongoDB&lt;/td&gt;
      &lt;td&gt;Spring Data是一个用于简化数据库访问，并支持云服务的开源框架&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-jooq&lt;/td&gt;
      &lt;td&gt;使用JOOQ链接SQL数据库；spring-boot-starter-data-jpa、spring-boot-starter-jdbc的另一替代方案&lt;/td&gt;
      &lt;td&gt;jOOQ（Java Object Oriented Querying，即面向Java对象查询）是一个高效地合并了复杂SQL、类型安全、源码生成、ActiveRecord、存储过程以及高级数据类型的Java API的类库。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-jta-narayana&lt;/td&gt;
      &lt;td&gt;Spring Boot Narayana JTA Starter&lt;/td&gt;
      &lt;td&gt;似乎和jboss.narayana.jta有关&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-cloud-connectors&lt;/td&gt;
      &lt;td&gt;用连接简化的 Spring Cloud 连接器进行云服务就像Cloud Foundry、Heroku那样&lt;/td&gt;
      &lt;td&gt;Cloud Foundry是VMware推出的业界第一个开源PaaS云平台；Heroku是一个支持多种编程语言的云平台即服务&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-jta-bitronix&lt;/td&gt;
      &lt;td&gt;为JTA transactions 使用 Bitronix&lt;/td&gt;
      &lt;td&gt;Bitronix Transaction Manager (BTM) 是一个简单但完整实现了 JTA 1.1 API 的类库，完全支持 XA 事务管理器，提供 JTA API 所需的所有服务，并让代码保持简洁&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-social-twitter&lt;/td&gt;
      &lt;td&gt;使用 Spring Social Twitter&lt;/td&gt;
      &lt;td&gt;Twitter提供用户使用第三方社交网络的账号API，同类事物：QQ第三方登录接口&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-data-rest&lt;/td&gt;
      &lt;td&gt;使用Spring Data REST 以 REST 方式暴露 Spring Data repositories&lt;/td&gt;
      &lt;td&gt;博主也不是很明白。原文：exposing Spring Data repositories over REST using Spring Data REST&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;spring-boot-production-starters&quot;&gt;Spring Boot production starters&lt;/h1&gt;

&lt;p&gt;下列 starters 可用于添加&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#production-ready&quot;&gt; production ready&lt;/a&gt; 功能&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-actuator&lt;/td&gt;
      &lt;td&gt;使用Spring Boot Actuator 的 production-ready 功能来帮助你监视和管理应用&lt;/td&gt;
      &lt;td&gt;production-ready 目前博主不知道该如何翻译&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;spring-boot-technical-starters&quot;&gt;Spring Boot technical starters&lt;/h1&gt;

&lt;p&gt;最后, Spring Boot 还包括一些 starters ，如果你想剔除或替换某些专门的功能，你可以使用这些 starters :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-undertow&lt;/td&gt;
      &lt;td&gt;使用 Undertow 作为嵌入式服务容器；spring-boot-starter-tomcat的另一替代方案&lt;/td&gt;
      &lt;td&gt;Undertow是JBoss开源组织旗下一款Web服务器的名称&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-jetty&lt;/td&gt;
      &lt;td&gt;使用 Jetty 作为嵌入式服务容器；spring-boot-starter-tomcat的另一替代方案&lt;/td&gt;
      &lt;td&gt;Jetty 是开源 Java 应用服务器，有篇英语新闻译文称“Webtide —— Jetty背后的公司”&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-logging&lt;/td&gt;
      &lt;td&gt;为 logging 使用Logback.默认 logging starter&lt;/td&gt;
      &lt;td&gt;Logback是由log4j创始人设计的又一个开源日志组件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-tomcat&lt;/td&gt;
      &lt;td&gt;使用 Tomcat 作为嵌入式服务容器；作为默认嵌入式服务容器被spring-boot-starter-web使用&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;spring-boot-starter-log4j2&lt;/td&gt;
      &lt;td&gt;使用Log4j2记录日志；spring-boot-starter-logging的另一替代方案&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;剔除logging使用log4j栗子：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 剔除logging --&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-logging&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 添加Log4j --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-log4j2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">Spring Boot application starters Name Description 备注 spring-boot-starter-thymeleaf 使MVC Web applications 支持Thymeleaf Thymeleaf是一个JAVA库，一个XML/XHTML/HTML5的可扩展的模板引擎，同类事物：Jsp spring-boot-starter-data-couchbase 使用Couchbase 文件存储数据库、Spring Data Couchbase Spring Data是一个用于简化数据库访问，并支持云服务的开源框架 spring-boot-starter-artemis 为JMS messaging使用Apache Artemis JMS是Java消息服务；HornetQ代码库捐献给 Apache ActiveMQ 社区，它现在成为ActiveMQ旗下的一个子项目，名为 “Artemis” spring-boot-starter-web-services 使用Spring Web Services Spring Web Services是基于Spring框架的Web服务框架，主要侧重于基于文档驱动的Web服务，提供SOAP服务开发，允许通过多种方式创建 Web 服务。 spring-boot-starter-mail 使用Java Mail、Spring email发送支持 Java Mail、Spring email为邮件发送工具 spring-boot-starter-data-redis 通过Spring Data Redis 、Jedis client使用Redis键值存储数据库 Jedis 是 Redis 官方首选的 Java 客户端开发包 spring-boot-starter-web 构建Web，包含RESTful风格框架SpringMVC和默认的嵌入式容器Tomcat RESTful是一种软件架构风格，设计风格而不是标准，只是提供了一组设计原则和约束条件 spring-boot-starter-activemq 为JMS使用Apache ActiveMQ ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线 spring-boot-starter-data-elasticsearch 使用Elasticsearch、analytics engine、Spring Data Elasticsearch ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口 spring-boot-starter-integration 使用Spring Integration Spring Integration是Spring框架创建的一个API，面向企业应用集成（EAI） spring-boot-starter-test 测试 Spring Boot applications包含JUnit、 Hamcrest、Mockito JUnit、 Hamcrest、Mockito为测试框架 spring-boot-starter-jdbc 通过 Tomcat JDBC 连接池使用JDBC   spring-boot-starter-mobile 通过Spring Mobile构建Web应用 Spring Mobile 是 Spring MVC 的扩展,用来简化手机上的Web应用开发 spring-boot-starter-validation 通过Hibernate Validator使用 Java Bean Validation Bean Validation 是一个数据验证的规范；Hibernate Validator是一个数据验证框架 spring-boot-starter-hateoas 使用Spring MVC、Spring HATEOAS构建 hypermedia-based RESTful Web 应用 hypermedia-based似乎是专业术语，博主表示不会翻译；Spring HATEOAS 是一个用于支持实现超文本驱动的 REST Web 服务的开发库 spring-boot-starter-jersey 通过 JAX-RS、Jersey构建 RESTful web applications；spring-boot-starter-web的另一替代方案 JAX-RS是JAVA EE6 引入的一个新技术；Jersey不仅仅是一个JAX-RS的参考实现，Jersey提供自己的API，其API继承自JAX-RS，提供更多的特性和功能以进一步简化RESTful service和客户端的开发 spring-boot-starter-data-neo4j 使用Neo4j图形数据库、Spring Data Neo4j Neo4j是一个高性能的,NOSQL图形数据库，它将结构化数据存储在网络上而不是表中 spring-boot-starter-websocket 使用Spring WebSocket构建 WebSocket 应用 Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说 spring-boot-starter-aop 通过Spring AOP、AspectJ面向切面编程 AspectJ是一个面向切面的框架，它扩展了Java语言 spring-boot-starter-amqp 使用Spring AMQP、Rabbit MQ Spring AMQP 是基于 Spring 框架的 AMQP 消息解决方案,提供模板化的发送和接收消息的抽象层,提供基于消息驱动的 POJO；RabbitMQ是一个在AMQP基础上完整的，可复用的企业消息系统 spring-boot-starter-data-cassandra 使用Cassandra分布式数据库、Spring Data Cassandra Apache Cassandra是一套开源分布式NoSQL数据库系统 spring-boot-starter-social-facebook 使用 Spring Social Facebook Facebook提供用户使用第三方社交网络的账号API，同类事物：QQ第三方登录接口 spring-boot-starter-jta-atomikos 为 JTA 使用 Atomikos JTA，即Java Transaction API，JTA允许应用程序执行分布式事务处理；Atomikos 是一个为Java平台提供增值服务的并且开源类事务管理 spring-boot-starter-security 使用 Spring Security Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架 spring-boot-starter-mustache 使MVC Web applications 支持Mustache Mustache是基于JavaScript实现的模版引擎，类似于jQuery Template，但是这个模版更加的轻量级，语法更加的简单易用，很容易上手 spring-boot-starter-data-jpa 通过 Hibernate 使用 Spring Data JPA （Spring-data-jpa依赖于Hibernate） JPA全称Java Persistence API.JPA通过JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中 spring-boot-starter Core starter,包括 自动配置支持、 logging and YAML logging是指的Starter的专有框架；YAML是“另一种标记语言”的外语缩写，它参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822 spring-boot-starter-groovy-templates 使MVC Web applications 支持Groovy Templates Groovy Templates是模视图模板，同类事物：Jsp spring-boot-starter-freemarker 使MVC Web applications 支持 FreeMarker FreeMarker是模视图模板，同类事物：Jsp spring-boot-starter-batch 使用Spring Batch Spring Batch是一个轻量级的,完全面向Spring的批处理框架,可以应用于企业级大量的数据处理系统 spring-boot-starter-social-linkedin 使用Spring Social LinkedIn LinkedIn提供用户使用第三方社交网络的账号API，同类事物：QQ第三方登录接口 spring-boot-starter-cache 使用 Spring caching 支持 Spring caching是Spring的提供的缓存框架 spring-boot-starter-data-solr 通过 Spring Data Solr 使用 Apache Solr Apache Solr 是一个开源的搜索服务器。Solr 使用 Java 语言开发，主要基于 HTTP 和 Apache Lucene 实现 spring-boot-starter-data-mongodb 使用 MongoDB 文件存储数据库、Spring Data MongoDB Spring Data是一个用于简化数据库访问，并支持云服务的开源框架 spring-boot-starter-jooq 使用JOOQ链接SQL数据库；spring-boot-starter-data-jpa、spring-boot-starter-jdbc的另一替代方案 jOOQ（Java Object Oriented Querying，即面向Java对象查询）是一个高效地合并了复杂SQL、类型安全、源码生成、ActiveRecord、存储过程以及高级数据类型的Java API的类库。 spring-boot-starter-jta-narayana Spring Boot Narayana JTA Starter 似乎和jboss.narayana.jta有关 spring-boot-starter-cloud-connectors 用连接简化的 Spring Cloud 连接器进行云服务就像Cloud Foundry、Heroku那样 Cloud Foundry是VMware推出的业界第一个开源PaaS云平台；Heroku是一个支持多种编程语言的云平台即服务 spring-boot-starter-jta-bitronix 为JTA transactions 使用 Bitronix Bitronix Transaction Manager (BTM) 是一个简单但完整实现了 JTA 1.1 API 的类库，完全支持 XA 事务管理器，提供 JTA API 所需的所有服务，并让代码保持简洁 spring-boot-starter-social-twitter 使用 Spring Social Twitter Twitter提供用户使用第三方社交网络的账号API，同类事物：QQ第三方登录接口 spring-boot-starter-data-rest 使用Spring Data REST 以 REST 方式暴露 Spring Data repositories 博主也不是很明白。原文：exposing Spring Data repositories over REST using Spring Data REST Spring Boot production starters 下列 starters 可用于添加 production ready 功能 Name Description 备注 spring-boot-starter-actuator 使用Spring Boot Actuator 的 production-ready 功能来帮助你监视和管理应用 production-ready 目前博主不知道该如何翻译 Spring Boot technical starters 最后, Spring Boot 还包括一些 starters ，如果你想剔除或替换某些专门的功能，你可以使用这些 starters : Name Description 备注 spring-boot-starter-undertow 使用 Undertow 作为嵌入式服务容器；spring-boot-starter-tomcat的另一替代方案 Undertow是JBoss开源组织旗下一款Web服务器的名称 spring-boot-starter-jetty 使用 Jetty 作为嵌入式服务容器；spring-boot-starter-tomcat的另一替代方案 Jetty 是开源 Java 应用服务器，有篇英语新闻译文称“Webtide —— Jetty背后的公司” spring-boot-starter-logging 为 logging 使用Logback.默认 logging starter Logback是由log4j创始人设计的又一个开源日志组件 spring-boot-starter-tomcat 使用 Tomcat 作为嵌入式服务容器；作为默认嵌入式服务容器被spring-boot-starter-web使用   spring-boot-starter-log4j2 使用Log4j2记录日志；spring-boot-starter-logging的另一替代方案   剔除logging使用log4j栗子： &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;!-- 剔除logging --&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-logging&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 添加Log4j --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-log4j2&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;</summary></entry><entry><title type="html">腾讯（50道面试题）</title><link href="http://localhost:4000/mianshi/0707/05" rel="alternate" type="text/html" title="腾讯（50道面试题）" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/0707/tencent</id><content type="html" xml:base="http://localhost:4000/mianshi/0707/05">&lt;p&gt;线程池有什么作用？&lt;/p&gt;

&lt;p&gt;说说几种常见的线程池及使用场景。&lt;/p&gt;

&lt;p&gt;什么是反射机制？&lt;/p&gt;

&lt;p&gt;说说反射机制的作用。&lt;/p&gt;

&lt;p&gt;反射机制会不会有性能问题？&lt;/p&gt;

&lt;p&gt;你怎么理解http协议？&lt;/p&gt;

&lt;p&gt;说说http协议的工作流程。&lt;/p&gt;

&lt;p&gt;http有哪些请求提交方式？&lt;/p&gt;

&lt;p&gt;http中的200,302,403,404,500,503都代表什么状态？&lt;/p&gt;

&lt;p&gt;http get和post有什么区别？&lt;/p&gt;

&lt;p&gt;你怎么理解cookie和session，有哪些不同点？&lt;/p&gt;

&lt;p&gt;什么是web缓存？有什么优点？&lt;/p&gt;

&lt;p&gt;什么是https，说说https的工作原理？&lt;/p&gt;

&lt;p&gt;什么是http代理服务器，有什么用？&lt;/p&gt;

&lt;p&gt;什么是虚拟主机及实现原理？&lt;/p&gt;

&lt;p&gt;什么是Java虚拟机，为什么要使用？&lt;/p&gt;

&lt;p&gt;什么是分布式系统？&lt;/p&gt;

&lt;p&gt;分布式系统你会考虑哪些方面？&lt;/p&gt;

&lt;p&gt;讲一讲TCP协议的三次握手和四次挥手流程。&lt;/p&gt;

&lt;p&gt;为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？&lt;/p&gt;

&lt;p&gt;为什么TCP TIME_WAIT状态还需要等2MSL后才能返回到CLOSED状态？&lt;/p&gt;

&lt;p&gt;什么是DoS、DDoS、DRDoS攻击？如何防御？&lt;/p&gt;

&lt;p&gt;描述一下Java异常层次结构。&lt;/p&gt;

&lt;p&gt;什么是检查异常，不受检查异常，运行时异常？并分别举例说明。&lt;/p&gt;

&lt;p&gt;finally块一定会执行吗？&lt;/p&gt;

&lt;p&gt;正常情况下，当在try块或catch块中遇到return语句时，finally语句块在方法返回之前还是之后被执行？&lt;/p&gt;

&lt;p&gt;try、catch、finally语句块的执行顺序。&lt;/p&gt;

&lt;p&gt;Java虚拟机中，数据类型可以分为哪几类？&lt;/p&gt;

&lt;p&gt;Java中，栈的大小通过什么参数来设置？&lt;/p&gt;

&lt;p&gt;一个空Object对象的占多大空间？&lt;/p&gt;

&lt;p&gt;讲一讲垃圾回收算法。&lt;/p&gt;

&lt;p&gt;如何解决内存碎片的问题？&lt;/p&gt;

&lt;p&gt;如何解决同时存在的对象创建和对象回收问题？&lt;/p&gt;

&lt;p&gt;讲一讲内存分代及生命周期。&lt;/p&gt;

&lt;p&gt;什么情况下触发垃圾回收？&lt;/p&gt;

&lt;p&gt;如何选择合适的垃圾收集算法？&lt;/p&gt;

&lt;p&gt;堆大小通过什么参数设置？&lt;/p&gt;

&lt;p&gt;JVM有哪三种垃圾回收器？&lt;/p&gt;

&lt;p&gt;吞吐量优先选择什么垃圾回收器？响应时间优先呢？&lt;/p&gt;

&lt;p&gt;如何进行JVM调优？有哪些方法？&lt;/p&gt;

&lt;p&gt;如何理解内存泄漏问题？有哪些情况会导致内存泄露？如何解决？&lt;/p&gt;

&lt;p&gt;讲讲CAP理念。&lt;/p&gt;

&lt;p&gt;怎么理解强一致性、单调一致性和最终一致性？&lt;/p&gt;

&lt;p&gt;分布式系统设计你会考虑哪些策略？&lt;/p&gt;

&lt;p&gt;最常见的数据分布方式是什么？&lt;/p&gt;

&lt;p&gt;谈一谈一致性哈希算法。&lt;/p&gt;

&lt;p&gt;如何理解选主算法？&lt;/p&gt;

&lt;p&gt;OSI有哪七层模型？TCP/IP是哪四层模型。&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">线程池有什么作用？ 说说几种常见的线程池及使用场景。 什么是反射机制？ 说说反射机制的作用。 反射机制会不会有性能问题？ 你怎么理解http协议？ 说说http协议的工作流程。 http有哪些请求提交方式？ http中的200,302,403,404,500,503都代表什么状态？ http get和post有什么区别？ 你怎么理解cookie和session，有哪些不同点？ 什么是web缓存？有什么优点？ 什么是https，说说https的工作原理？ 什么是http代理服务器，有什么用？ 什么是虚拟主机及实现原理？ 什么是Java虚拟机，为什么要使用？ 什么是分布式系统？ 分布式系统你会考虑哪些方面？ 讲一讲TCP协议的三次握手和四次挥手流程。 为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？ 为什么TCP TIME_WAIT状态还需要等2MSL后才能返回到CLOSED状态？ 什么是DoS、DDoS、DRDoS攻击？如何防御？ 描述一下Java异常层次结构。 什么是检查异常，不受检查异常，运行时异常？并分别举例说明。 finally块一定会执行吗？ 正常情况下，当在try块或catch块中遇到return语句时，finally语句块在方法返回之前还是之后被执行？ try、catch、finally语句块的执行顺序。 Java虚拟机中，数据类型可以分为哪几类？ Java中，栈的大小通过什么参数来设置？ 一个空Object对象的占多大空间？ 讲一讲垃圾回收算法。 如何解决内存碎片的问题？ 如何解决同时存在的对象创建和对象回收问题？ 讲一讲内存分代及生命周期。 什么情况下触发垃圾回收？ 如何选择合适的垃圾收集算法？ 堆大小通过什么参数设置？ JVM有哪三种垃圾回收器？ 吞吐量优先选择什么垃圾回收器？响应时间优先呢？ 如何进行JVM调优？有哪些方法？ 如何理解内存泄漏问题？有哪些情况会导致内存泄露？如何解决？ 讲讲CAP理念。 怎么理解强一致性、单调一致性和最终一致性？ 分布式系统设计你会考虑哪些策略？ 最常见的数据分布方式是什么？ 谈一谈一致性哈希算法。 如何理解选主算法？ OSI有哪七层模型？TCP/IP是哪四层模型。</summary></entry><entry><title type="html">美团（30道面试题）</title><link href="http://localhost:4000/mianshi/0707/05" rel="alternate" type="text/html" title="美团（30道面试题）" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/0707/meituan</id><content type="html" xml:base="http://localhost:4000/mianshi/0707/05">&lt;p&gt;#&lt;/p&gt;

&lt;p&gt;java虚拟机内存模型&lt;/p&gt;

&lt;p&gt;内存溢出一般发生在哪个区？永久代会不会导致内存溢出？&lt;/p&gt;

&lt;p&gt;动态加载类的框架了解哪些？&lt;/p&gt;

&lt;p&gt;动态代理一般有哪几种实现方式？动态代理的应用场景有哪些？&lt;/p&gt;

&lt;p&gt;栈会不会溢出？栈溢出一般抛什么异常？jvm在哪里设置栈的大小？设置的参数是什么？&lt;/p&gt;

&lt;p&gt;jvm的垃圾回收机制？&lt;/p&gt;

&lt;p&gt;java类加载机制？如何实现自定义类加载器？findClass与loadClass的区别？&lt;/p&gt;

&lt;p&gt;String、StringBuffer、StringBuilder的区别？对应的使用场景？&lt;/p&gt;

&lt;p&gt;如何实现不可变的类？&lt;/p&gt;

&lt;p&gt;浅复制和深复制？怎样实现深复制？&lt;/p&gt;

&lt;p&gt;HashMap、HashTable、ConcurrentHashMap的区别？&lt;/p&gt;

&lt;p&gt;CAS是一种什么样的同步机制？&lt;/p&gt;

&lt;p&gt;spring加载bean的流程？&lt;/p&gt;

&lt;p&gt;java线程池？线程池构造函数的几个参数含义？keepAliveTime解释一下？&lt;/p&gt;

&lt;p&gt;一个接口，要去调用另外5个接口，每一个接口都会返回数据给这个调用接口，调用接口要对数据进行合并并返回给上层。这样一种场景可能用到并发包下的哪些类？你会怎么去实现这样的业务场景？&lt;/p&gt;

&lt;p&gt;CountDownLatch和CyclicBarrier的区别？&lt;/p&gt;

&lt;p&gt;线程加锁有哪些方式？synchronized和lock的区别？&lt;/p&gt;

&lt;p&gt;volatile关键字的作用？为什么使用AtomicLong而不使用Long?AtomicLong的底层是怎么实现的？&lt;/p&gt;

&lt;p&gt;mysql的存储引擎有哪几种？&lt;/p&gt;

&lt;p&gt;sql优化有哪些着手点？组合索引的最左前缀原则的含义？&lt;/p&gt;

&lt;p&gt;springmvc处理请求的流程？&lt;/p&gt;

&lt;p&gt;spring的事务怎么使用？事务回滚？自定义异常？&lt;/p&gt;

&lt;p&gt;脏读？幻读？&lt;/p&gt;

&lt;p&gt;tcp四次挥手的过程？TIME_WAIT为什么至少设置两倍的MSL时间？&lt;/p&gt;

&lt;p&gt;了解哪些开源的中间件？缓存？消息？分布式框架？&lt;/p&gt;

&lt;p&gt;用到过哪些设计模式？单例模式的实现？&lt;/p&gt;

&lt;p&gt;数据库的脏读，幻读，不可重复读出现的原因原理，解决办法&lt;/p&gt;

&lt;p&gt;数据库的隔离级别、MVCC&lt;/p&gt;

&lt;p&gt;乐观锁、悲观锁、互斥锁、读写锁的原理实现与区别&lt;/p&gt;

&lt;p&gt;一致性hash算法原理与应用&lt;/p&gt;

&lt;p&gt;CAP原则&lt;/p&gt;

&lt;p&gt;CAS操作&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html"># java虚拟机内存模型 内存溢出一般发生在哪个区？永久代会不会导致内存溢出？ 动态加载类的框架了解哪些？ 动态代理一般有哪几种实现方式？动态代理的应用场景有哪些？ 栈会不会溢出？栈溢出一般抛什么异常？jvm在哪里设置栈的大小？设置的参数是什么？ jvm的垃圾回收机制？ java类加载机制？如何实现自定义类加载器？findClass与loadClass的区别？ String、StringBuffer、StringBuilder的区别？对应的使用场景？ 如何实现不可变的类？ 浅复制和深复制？怎样实现深复制？ HashMap、HashTable、ConcurrentHashMap的区别？ CAS是一种什么样的同步机制？ spring加载bean的流程？ java线程池？线程池构造函数的几个参数含义？keepAliveTime解释一下？ 一个接口，要去调用另外5个接口，每一个接口都会返回数据给这个调用接口，调用接口要对数据进行合并并返回给上层。这样一种场景可能用到并发包下的哪些类？你会怎么去实现这样的业务场景？ CountDownLatch和CyclicBarrier的区别？ 线程加锁有哪些方式？synchronized和lock的区别？ volatile关键字的作用？为什么使用AtomicLong而不使用Long?AtomicLong的底层是怎么实现的？ mysql的存储引擎有哪几种？ sql优化有哪些着手点？组合索引的最左前缀原则的含义？ springmvc处理请求的流程？ spring的事务怎么使用？事务回滚？自定义异常？ 脏读？幻读？ tcp四次挥手的过程？TIME_WAIT为什么至少设置两倍的MSL时间？ 了解哪些开源的中间件？缓存？消息？分布式框架？ 用到过哪些设计模式？单例模式的实现？ 数据库的脏读，幻读，不可重复读出现的原因原理，解决办法 数据库的隔离级别、MVCC 乐观锁、悲观锁、互斥锁、读写锁的原理实现与区别 一致性hash算法原理与应用 CAP原则 CAS操作</summary></entry><entry><title type="html">京东（20道面试题）</title><link href="http://localhost:4000/mianshi/0707/04" rel="alternate" type="text/html" title="京东（20道面试题）" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/0707/jd</id><content type="html" xml:base="http://localhost:4000/mianshi/0707/04">&lt;p&gt;Tomcat的基本架构是什么？&lt;/p&gt;

&lt;p&gt;jvm调优，工作的是怎么用的，垃圾回收的策略有哪些？&lt;/p&gt;

&lt;p&gt;Java 中的线程池是如何实现的？创建线程池的几个核心构造参数？&lt;/p&gt;

&lt;p&gt;对比下 volatile 对比 Synchronized 的异同。&lt;/p&gt;

&lt;p&gt;GC机制是什么?&lt;/p&gt;

&lt;p&gt;垃圾回收器的基本原理是什么？垃圾回收器可以立马回收内存吗？怎样主动通知虚拟机进行垃圾回收？&lt;/p&gt;

&lt;p&gt;类加载器双亲委派模型机制？&lt;/p&gt;

&lt;p&gt;集合的种类以及区别，HashMap底层如何实现？HashMap中Hash冲突是怎么解决的？&lt;/p&gt;

&lt;p&gt;Spring IOC 怎么管理 Bean 之间的依赖关系，怎么避免循环依赖？&lt;/p&gt;

&lt;p&gt;Spring Bean 创建过程中的设计模式？&lt;/p&gt;

&lt;p&gt;InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？&lt;/p&gt;

&lt;p&gt;简述事务的特性？&lt;/p&gt;

&lt;p&gt;什么是MySQL隔离级别？&lt;/p&gt;

&lt;p&gt;如何理解BTree机制？&lt;/p&gt;

&lt;p&gt;谈谈对慢查询分析？MySQL常用优化方式有哪些？？&lt;/p&gt;

&lt;p&gt;谈谈悲观锁和乐观锁及用SQL实现？&lt;/p&gt;

&lt;p&gt;简述三次握手及四次挥手的过程？&lt;/p&gt;

&lt;p&gt;对比B+树索引和 Hash索引？&lt;/p&gt;

&lt;p&gt;MySQL的锁并发？&lt;/p&gt;

&lt;p&gt;高并发场景（领红包）如何防止死锁，保证数据一致性？&lt;/p&gt;

&lt;p&gt;集群与负载均衡的算法与实现？&lt;/p&gt;

&lt;p&gt;简述分库与分表设计？&lt;/p&gt;

&lt;p&gt;分库与分表带来的分布式困境与应对之策？&lt;/p&gt;

&lt;p&gt;加锁机制是什么？&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">Tomcat的基本架构是什么？ jvm调优，工作的是怎么用的，垃圾回收的策略有哪些？ Java 中的线程池是如何实现的？创建线程池的几个核心构造参数？ 对比下 volatile 对比 Synchronized 的异同。 GC机制是什么? 垃圾回收器的基本原理是什么？垃圾回收器可以立马回收内存吗？怎样主动通知虚拟机进行垃圾回收？ 类加载器双亲委派模型机制？ 集合的种类以及区别，HashMap底层如何实现？HashMap中Hash冲突是怎么解决的？ Spring IOC 怎么管理 Bean 之间的依赖关系，怎么避免循环依赖？ Spring Bean 创建过程中的设计模式？ InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？ 简述事务的特性？ 什么是MySQL隔离级别？ 如何理解BTree机制？ 谈谈对慢查询分析？MySQL常用优化方式有哪些？？ 谈谈悲观锁和乐观锁及用SQL实现？ 简述三次握手及四次挥手的过程？ 对比B+树索引和 Hash索引？ MySQL的锁并发？ 高并发场景（领红包）如何防止死锁，保证数据一致性？ 集群与负载均衡的算法与实现？ 简述分库与分表设计？ 分库与分表带来的分布式困境与应对之策？ 加锁机制是什么？</summary></entry><entry><title type="html">百度（24道面试题）</title><link href="http://localhost:4000/mianshi/0707/03" rel="alternate" type="text/html" title="百度（24道面试题）" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/0707/baidu</id><content type="html" xml:base="http://localhost:4000/mianshi/0707/03">&lt;p&gt;手写ArrayList&lt;/p&gt;

&lt;p&gt;手写进制转换算法，求出一个数的二进制数1的个数&lt;/p&gt;

&lt;p&gt;AVA基础 equals和==&lt;/p&gt;

&lt;p&gt;多线程方式、threadlocal，各种锁，synchronized和lock&lt;/p&gt;

&lt;p&gt;设计模式、spring类加载方式、实例保存在哪、aop ioc、反射机制&lt;/p&gt;

&lt;p&gt;类加载器，双亲委派模型，热部署&lt;/p&gt;

&lt;p&gt;jvm内存模型，内存结构、堆的分代算法、堆的分区、gc算法、gc过程。&lt;/p&gt;

&lt;p&gt;tcp ip 七层模型 rest接口规范 get和post区别，长度，安全。&lt;/p&gt;

&lt;p&gt;tcp ip的arp协议，两个同一网络的主机如何获得对方的mac地址。&lt;/p&gt;

&lt;p&gt;负载均衡、高并发、高可用的架构&lt;/p&gt;

&lt;p&gt;mysql的引擎区别&lt;/p&gt;

&lt;p&gt;redis缓存，redis的集群部署，热备份，主从备份，主从数据库，hash映射找到知道指定节点。&lt;/p&gt;

&lt;p&gt;了解云计算么，了解云容器docker么，容器和虚拟机的区别。&lt;/p&gt;

&lt;p&gt;项目中的数据库备份，主从数据库、集群&lt;/p&gt;

&lt;p&gt;数据库的索引原理，b+树原理，trie树引申，二叉查找树的原理&lt;/p&gt;

&lt;p&gt;海量数据中查找一个单词，分布式计算map reduce ，或者用hsah映射筛选部分结果&lt;/p&gt;

&lt;p&gt;java的抽象类和接口区别、java的hashmap，java的内存模型，分区，分代垃圾回收算法。实例、常量放在哪里。&lt;/p&gt;

&lt;p&gt;int 4个字节，double 8个字节。&lt;/p&gt;

&lt;p&gt;多线程中的wait和sleep区别，notify的作用&lt;/p&gt;

&lt;p&gt;设计模式了解哪些，写一个观察者模式。实现两个接口，一个是主题一个是观察者，并写出对应方法。&lt;/p&gt;

&lt;p&gt;写一个生产者消费者队列的方法，分别写两个类代表生产者和消费者，并且用队列模拟其生产消费。用while循环和wait notify可以实现，但我忘记在队列上加synchronize关键字，于是让我再写一题。写的是：输入一个字符串，输入第一个只出现一次的字符，写出来了。&lt;/p&gt;

&lt;p&gt;tcp ip的四次挥手 子网掩码的作用， 子网掩码(subnet mask)又叫 网络掩码 、 地址掩码 、子网络遮罩，它是一种用来指明一个 IP地址 的哪些位标识的是 主机 所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成 网络地址 和 主机地址 两部分。&lt;/p&gt;

&lt;p&gt;了解linux么，说一下linux的内核锁？没接触过。&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;有没有用过sed 使用shell脚本写一个将文本中的字符替换掉的脚本，大概说了一下用grep&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;替换。没再问linux的&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">手写ArrayList 手写进制转换算法，求出一个数的二进制数1的个数 AVA基础 equals和== 多线程方式、threadlocal，各种锁，synchronized和lock 设计模式、spring类加载方式、实例保存在哪、aop ioc、反射机制 类加载器，双亲委派模型，热部署 jvm内存模型，内存结构、堆的分代算法、堆的分区、gc算法、gc过程。 tcp ip 七层模型 rest接口规范 get和post区别，长度，安全。 tcp ip的arp协议，两个同一网络的主机如何获得对方的mac地址。 负载均衡、高并发、高可用的架构 mysql的引擎区别 redis缓存，redis的集群部署，热备份，主从备份，主从数据库，hash映射找到知道指定节点。 了解云计算么，了解云容器docker么，容器和虚拟机的区别。 项目中的数据库备份，主从数据库、集群 数据库的索引原理，b+树原理，trie树引申，二叉查找树的原理 海量数据中查找一个单词，分布式计算map reduce ，或者用hsah映射筛选部分结果 java的抽象类和接口区别、java的hashmap，java的内存模型，分区，分代垃圾回收算法。实例、常量放在哪里。 int 4个字节，double 8个字节。 多线程中的wait和sleep区别，notify的作用 设计模式了解哪些，写一个观察者模式。实现两个接口，一个是主题一个是观察者，并写出对应方法。 写一个生产者消费者队列的方法，分别写两个类代表生产者和消费者，并且用队列模拟其生产消费。用while循环和wait notify可以实现，但我忘记在队列上加synchronize关键字，于是让我再写一题。写的是：输入一个字符串，输入第一个只出现一次的字符，写出来了。 tcp ip的四次挥手 子网掩码的作用， 子网掩码(subnet mask)又叫 网络掩码 、 地址掩码 、子网络遮罩，它是一种用来指明一个 IP地址 的哪些位标识的是 主机 所在的子网，以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码只有一个作用，就是将某个IP地址划分成 网络地址 和 主机地址 两部分。 了解linux么，说一下linux的内核锁？没接触过。 有没有用过sed 使用shell脚本写一个将文本中的字符替换掉的脚本，大概说了一下用grep   替换。没再问linux的</summary></entry><entry><title type="html">阿里（60道面试题）</title><link href="http://localhost:4000/mianshi/0707/02" rel="alternate" type="text/html" title="阿里（60道面试题）" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/0707/alibaba</id><content type="html" xml:base="http://localhost:4000/mianshi/0707/02">&lt;p&gt;1.Java事件机制包括哪三个部分？分别介绍下。&lt;/p&gt;

&lt;p&gt;2.使用线程池的原因？&lt;/p&gt;

&lt;p&gt;3.线程池的作用有哪些？&lt;/p&gt;

&lt;p&gt;4.几种常见的线程池及其各自的使用场景是怎样的。&lt;/p&gt;

&lt;p&gt;5.线程池都有哪几种工作队列？&lt;/p&gt;

&lt;p&gt;6.怎么理解无界队列和有界队列？&lt;/p&gt;

&lt;p&gt;7.线程池中的几种重要的参数及流程说明。&lt;/p&gt;

&lt;p&gt;8.什么是反射机制？&lt;/p&gt;

&lt;p&gt;9.说说反射机制的作用。&lt;/p&gt;

&lt;p&gt;10.反射机制会不会有性能问题？&lt;/p&gt;

&lt;p&gt;11.你怎么理解http协议？&lt;/p&gt;

&lt;p&gt;12.说说http协议的工作流程。&lt;/p&gt;

&lt;p&gt;13.http有哪些请求提交方式？&lt;/p&gt;

&lt;p&gt;14.http中的200,302,403,404,500,503都代表什么状态？&lt;/p&gt;

&lt;p&gt;15.http get和post有什么区别？&lt;/p&gt;

&lt;p&gt;16.你怎么理解cookie和session，有哪些不同点？&lt;/p&gt;

&lt;p&gt;17.什么是web缓存？有什么优点？&lt;/p&gt;

&lt;p&gt;18.什么是https，说说https的工作原理？&lt;/p&gt;

&lt;p&gt;20.什么是虚拟主机及实现原理？&lt;/p&gt;

&lt;p&gt;21.什么是Java虚拟机，为什么要使用？&lt;/p&gt;

&lt;p&gt;22.说说Java虚拟机的生命周期及体系结构。&lt;/p&gt;

&lt;p&gt;23.说一说Java内存区域。&lt;/p&gt;

&lt;p&gt;24.什么是分布式系统？&lt;/p&gt;

&lt;p&gt;25.分布式系统你会考虑哪些方面？&lt;/p&gt;

&lt;p&gt;26.为什么说TCP/IP协议是不可靠的？&lt;/p&gt;

&lt;p&gt;27.OSI有哪七层模型？TCP/IP是哪四层模型。&lt;/p&gt;

&lt;p&gt;28.TCP协议的三次握手，四次挥手流程。&lt;/p&gt;

&lt;p&gt;29.为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？&lt;/p&gt;

&lt;p&gt;32.描述一下Java异常层次结构。&lt;/p&gt;

&lt;p&gt;33.什么是检查异常，不受检查异常，运行时异常？并分别举例说明。&lt;/p&gt;

&lt;p&gt;34.finally块一定会执行吗？&lt;/p&gt;

&lt;p&gt;35.正常情况下，当在try块或catch块中遇到return语句时，finally语句块在方法返回之前还是之后被执行？&lt;/p&gt;

&lt;p&gt;36.try、catch、finally语句块的执行顺序。&lt;/p&gt;

&lt;p&gt;37.Java虚拟机中，数据类型可以分为哪几类？&lt;/p&gt;

&lt;p&gt;38.怎么理解栈、堆？堆中存什么？栈中存什么？&lt;/p&gt;

&lt;p&gt;39.为什么要把堆和栈区分出来呢？栈中不是也可以存储数据吗？&lt;/p&gt;

&lt;p&gt;40.在Java中，什么是是栈的起始点，同是也是程序的起始点？&lt;/p&gt;

&lt;p&gt;43.Java中有没有指针的概念？&lt;/p&gt;

&lt;p&gt;44.Java中，栈的大小通过什么参数来设置？&lt;/p&gt;

&lt;p&gt;45.一个空Object对象的占多大空间？&lt;/p&gt;

&lt;p&gt;46.对象引用类型分为哪几类？&lt;/p&gt;

&lt;p&gt;47.讲一讲垃圾回收算法。&lt;/p&gt;

&lt;p&gt;48.如何解决内存碎片的问题？&lt;/p&gt;

&lt;p&gt;49.如何解决同时存在的对象创建和对象回收问题？&lt;/p&gt;

&lt;p&gt;50.讲一讲内存分代及生命周期。&lt;/p&gt;

&lt;p&gt;51.什么情况下触发垃圾回收？&lt;/p&gt;

&lt;p&gt;52.如何选择合适的垃圾收集算法？&lt;/p&gt;

&lt;p&gt;53.JVM有哪三种垃圾回收器？&lt;/p&gt;

&lt;p&gt;54.JVM中最大堆大小有没有限制？&lt;/p&gt;

&lt;p&gt;55.如何进行JVM调优？有哪些方法？&lt;/p&gt;

&lt;p&gt;56.堆大小通过什么参数设置？&lt;/p&gt;

&lt;p&gt;60.如何解决业务层的数据访问问题？&lt;/p&gt;

&lt;p&gt;61.为了解决数据库服务器的负担，如何做数据库的分布？&lt;/p&gt;

&lt;p&gt;62.什么是著名的拜占庭将军问题？&lt;/p&gt;

&lt;p&gt;63.讲讲CAP理念。&lt;/p&gt;

&lt;p&gt;64.怎么理解强一致性、单调一致性和最终一致性？&lt;/p&gt;

&lt;p&gt;65.分布式系统设计你会考虑哪些策略？&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">1.Java事件机制包括哪三个部分？分别介绍下。 2.使用线程池的原因？ 3.线程池的作用有哪些？ 4.几种常见的线程池及其各自的使用场景是怎样的。 5.线程池都有哪几种工作队列？ 6.怎么理解无界队列和有界队列？ 7.线程池中的几种重要的参数及流程说明。 8.什么是反射机制？ 9.说说反射机制的作用。 10.反射机制会不会有性能问题？ 11.你怎么理解http协议？ 12.说说http协议的工作流程。 13.http有哪些请求提交方式？ 14.http中的200,302,403,404,500,503都代表什么状态？ 15.http get和post有什么区别？ 16.你怎么理解cookie和session，有哪些不同点？ 17.什么是web缓存？有什么优点？ 18.什么是https，说说https的工作原理？ 20.什么是虚拟主机及实现原理？ 21.什么是Java虚拟机，为什么要使用？ 22.说说Java虚拟机的生命周期及体系结构。 23.说一说Java内存区域。 24.什么是分布式系统？ 25.分布式系统你会考虑哪些方面？ 26.为什么说TCP/IP协议是不可靠的？ 27.OSI有哪七层模型？TCP/IP是哪四层模型。 28.TCP协议的三次握手，四次挥手流程。 29.为什么TCP建立连接协议是三次握手，而关闭连接却是四次握手呢？为什么不能用两次握手进行连接？ 32.描述一下Java异常层次结构。 33.什么是检查异常，不受检查异常，运行时异常？并分别举例说明。 34.finally块一定会执行吗？ 35.正常情况下，当在try块或catch块中遇到return语句时，finally语句块在方法返回之前还是之后被执行？ 36.try、catch、finally语句块的执行顺序。 37.Java虚拟机中，数据类型可以分为哪几类？ 38.怎么理解栈、堆？堆中存什么？栈中存什么？ 39.为什么要把堆和栈区分出来呢？栈中不是也可以存储数据吗？ 40.在Java中，什么是是栈的起始点，同是也是程序的起始点？ 43.Java中有没有指针的概念？ 44.Java中，栈的大小通过什么参数来设置？ 45.一个空Object对象的占多大空间？ 46.对象引用类型分为哪几类？ 47.讲一讲垃圾回收算法。 48.如何解决内存碎片的问题？ 49.如何解决同时存在的对象创建和对象回收问题？ 50.讲一讲内存分代及生命周期。 51.什么情况下触发垃圾回收？ 52.如何选择合适的垃圾收集算法？ 53.JVM有哪三种垃圾回收器？ 54.JVM中最大堆大小有没有限制？ 55.如何进行JVM调优？有哪些方法？ 56.堆大小通过什么参数设置？ 60.如何解决业务层的数据访问问题？ 61.为了解决数据库服务器的负担，如何做数据库的分布？ 62.什么是著名的拜占庭将军问题？ 63.讲讲CAP理念。 64.怎么理解强一致性、单调一致性和最终一致性？ 65.分布式系统设计你会考虑哪些策略？</summary></entry><entry><title type="html">Spring中的后置处理器BeanPostProcessor讲解</title><link href="http://localhost:4000/mianshi/spring/0707/11" rel="alternate" type="text/html" title="Spring中的后置处理器BeanPostProcessor讲解" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/spring/0707/Spring%E4%B8%AD%E7%9A%84%E5%90%8E%E7%BD%AE%E5%A4%84%E7%90%86%E5%99%A8BeanPostProcessor%E8%AE%B2%E8%A7%A3</id><content type="html" xml:base="http://localhost:4000/mianshi/spring/0707/11">&lt;p&gt;BeanPostProcessor接口作用：&lt;/p&gt;

&lt;p&gt;如果我们想在Spring容器中完成bean实例化、配置以及其他初始化方法前后要添加一些自己逻辑处理。我们需要定义一个或多个BeanPostProcessor接口实现类，然后注册到Spring IoC容器中。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.test.spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * bean后置处理器
 * @author zss
 *
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostProcessor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;narCodeService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//过滤掉bean实例ID为narCodeService&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器处理bean=【&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;】开始&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;narCodeService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器处理bean=【&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;】完毕!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//注意:接口中两个方法不能返回null，如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到bena实例对象&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将Spring的后置处理器PostProcessor配置到Spring配置文件中&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 定义一个bean --&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;narCodeService&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.test.service.impl.NarCodeServiceImpl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;beanLifecycle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.test.spring.BeanLifecycle&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;init-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;init&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;destroy-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;close&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;张三&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sex&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;男&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Spring后置处理器 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postProcessor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.test.spring.PostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BeanPostProcessor API：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
  
    &lt;span class=&quot;cm&quot;&gt;/** 
     * Apply this BeanPostProcessor to the given new bean instance &amp;lt;i&amp;gt;before&amp;lt;/i&amp;gt; any bean 
     * initialization callbacks (like InitializingBean's {@code afterPropertiesSet} 
     * or a custom init-method). The bean will already be populated with property values.    
     */&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;//实例化、依赖注入完毕，在调用显示的初始化之前完成一些定制的初始化任务  &lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
  
      
    &lt;span class=&quot;cm&quot;&gt;/** 
     * Apply this BeanPostProcessor to the given new bean instance &amp;lt;i&amp;gt;after&amp;lt;/i&amp;gt; any bean 
     * initialization callbacks (like InitializingBean's {@code afterPropertiesSet}   
     * or a custom init-method). The bean will already be populated with property values.       
     */&lt;/span&gt;  
    &lt;span class=&quot;c1&quot;&gt;//实例化、依赖注入、初始化完毕时执行  &lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由API可以看出:
1：后置处理器的postProcessorBeforeInitailization方法是在bean实例化，依赖注入之后及自定义初始化方法(例如：配置文件中bean标签添加init-method属性指定Java类中初始化方法、
@PostConstruct注解指定初始化方法，Java类实现InitailztingBean接口)之前调用
2：后置处理器的postProcessorAfterInitailization方法是在bean实例化、依赖注入及自定义初始化方法之后调用&lt;/p&gt;

&lt;p&gt;注意：
   1.BeanFactory和ApplicationContext两个容器对待bean的后置处理器稍微有些不同。ApplicationContext容器会自动检测Spring配置文件中那些bean所对应的Java类实现了BeanPostProcessor
接口，并自动把它们注册为后置处理器。在创建bean过程中调用它们，所以部署一个后置处理器跟普通的bean没有什么太大区别。&lt;/p&gt;

&lt;p&gt;2.BeanFactory容器注册bean后置处理器时必须通过代码显示的注册，在IoC容器继承体系中的ConfigurableBeanFactory接口中定义了注册方法&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;cm&quot;&gt;/**  
     * Add a new BeanPostProcessor that will get applied to beans created  
     * by this factory. To be invoked during factory configuration.  
     * &amp;lt;p&amp;gt;Note: Post-processors submitted here will be applied in the order of  
     * registration; any ordering semantics expressed through implementing the  
     * {@link org.springframework.core.Ordered} interface will be ignored. Note  
     * that autodetected post-processors (e.g. as beans in an ApplicationContext)  
     * will always be applied after programmatically registered ones.  
     * @param beanPostProcessor the post-processor to register  
     */&lt;/span&gt;    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addBeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Spring如何调用多个BeanPostProcessor实现类：&lt;/p&gt;

&lt;p&gt;我们可以在Spring配置文件中添加多个BeanPostProcessor(后置处理器)接口实现类，在默认情况下Spring容器会根据后置处理器的定义顺序来依次调用。&lt;/p&gt;

&lt;p&gt;Spring配置文件：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- bean定义 --&amp;gt;&lt;/span&gt;    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;narCodeService&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.test.service.impl.NarCodeServiceImpl&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postProcessor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.test.spring.PostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;postProcessorB&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.test.spring.PostProcessorB&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BeanPostProcessor实现类：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.test.spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * bean后置处理器
 * @author zss
 *
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostProcessor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器处理bean=【&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;】开始&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器处理bean=【&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;】完毕!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----------------------------------------------------------------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.test.spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostProcessorB&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器开始调用了&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器调用结束了&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.test.spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.support.AbstractApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.context.support.ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;AbstractApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applicationcontext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;》》》Spring ApplicationContext容器开始初始化了......&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;applicationcontext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test1-service.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;》》》Spring ApplicationContext容器初始化完毕了......&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;applicationcontext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;registerShutdownHook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;》》》Spring ApplicationContext容器开始初始化了......
2017-03-19 10:50:29  INFO:ClassPathXmlApplicationContext-Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 10:50:29 CST 2017]; root of context hierarchy
2017-03-19 10:50:29  INFO:XmlBeanDefinitionReader-Loading XML bean definitions from class path resource [test1-service.xml]
后置处理器处理bean=【narCodeService】开始
后置处理器开始调用了
后置处理器处理bean=【narCodeService】完毕!
后置处理器调用结束了
》》》Spring ApplicationContext容器初始化完毕了......
2017-03-19 10:50:34  INFO:ClassPathXmlApplicationContext-Closing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 10:50:29 CST 2017]; root of context hierarchy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在Spring机制中可以指定后置处理器调用顺序，通过让BeanPostProcessor接口实现类实现Ordered接口getOrder方法，该方法返回一整数，默认值为 0，优先级最高，值越大优先级越低&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.test.spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.core.Ordered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * bean后置处理器
 * @author zss
 *
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostProcessor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ordered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器处理bean=【&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;】开始&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器处理bean=【&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;】完毕!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;----------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.test.spring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.core.Ordered&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PostProcessorB&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ordered&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器开始调用了&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;后置处理器调用结束了&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;》》》Spring ApplicationContext容器开始初始化了......
2017-03-19 11:04:10 INFO:ClassPathXmlApplicationContext-Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 11:04:10 CST 2017]; root of context hierarchy
2017-03-19 11:04:10 INFO:XmlBeanDefinitionReader-Loading XML bean definitions from class path resource [test1-service.xml]
后置处理器开始调用了
后置处理器处理bean=【narCodeService】开始
后置处理器调用结束了
后置处理器处理bean=【narCodeService】完毕!
》》》Spring ApplicationContext容器初始化完毕了......
2017-03-19 11:04:14 INFO:ClassPathXmlApplicationContext-Closing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 11:04:10 CST 2017]; root of context hierarchy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">BeanPostProcessor接口作用： 如果我们想在Spring容器中完成bean实例化、配置以及其他初始化方法前后要添加一些自己逻辑处理。我们需要定义一个或多个BeanPostProcessor接口实现类，然后注册到Spring IoC容器中。 package com.test.spring; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanPostProcessor; /** * bean后置处理器 * @author zss * */ public class PostProcessor implements BeanPostProcessor { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { if (&quot;narCodeService&quot;.equals(beanName)) {//过滤掉bean实例ID为narCodeService return bean; } System.out.println(&quot;后置处理器处理bean=【&quot;+beanName+&quot;】开始&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { if (&quot;narCodeService&quot;.equals(beanName)) { return bean; } System.out.println(&quot;后置处理器处理bean=【&quot;+beanName+&quot;】完毕!&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } } //注意:接口中两个方法不能返回null，如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到bena实例对象 //因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中 将Spring的后置处理器PostProcessor配置到Spring配置文件中 &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt; &amp;lt;!-- 定义一个bean --&amp;gt; &amp;lt;bean id=&quot;narCodeService&quot; class=&quot;com.test.service.impl.NarCodeServiceImpl&quot;&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&quot;beanLifecycle&quot; class=&quot;com.test.spring.BeanLifecycle&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&amp;gt; &amp;lt;property name=&quot;name&quot; value=&quot;张三&quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;property name=&quot;sex&quot; value=&quot;男&quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- Spring后置处理器 --&amp;gt; &amp;lt;bean id=&quot;postProcessor&quot; class=&quot;com.test.spring.PostProcessor&quot;/&amp;gt; &amp;lt;/beans&amp;gt; BeanPostProcessor API： public interface BeanPostProcessor { /** * Apply this BeanPostProcessor to the given new bean instance &amp;lt;i&amp;gt;before&amp;lt;/i&amp;gt; any bean * initialization callbacks (like InitializingBean's {@code afterPropertiesSet} * or a custom init-method). The bean will already be populated with property values. */ //实例化、依赖注入完毕，在调用显示的初始化之前完成一些定制的初始化任务 Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException; /** * Apply this BeanPostProcessor to the given new bean instance &amp;lt;i&amp;gt;after&amp;lt;/i&amp;gt; any bean * initialization callbacks (like InitializingBean's {@code afterPropertiesSet} * or a custom init-method). The bean will already be populated with property values. */ //实例化、依赖注入、初始化完毕时执行 Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException; } 由API可以看出: 1：后置处理器的postProcessorBeforeInitailization方法是在bean实例化，依赖注入之后及自定义初始化方法(例如：配置文件中bean标签添加init-method属性指定Java类中初始化方法、 @PostConstruct注解指定初始化方法，Java类实现InitailztingBean接口)之前调用 2：后置处理器的postProcessorAfterInitailization方法是在bean实例化、依赖注入及自定义初始化方法之后调用 注意： 1.BeanFactory和ApplicationContext两个容器对待bean的后置处理器稍微有些不同。ApplicationContext容器会自动检测Spring配置文件中那些bean所对应的Java类实现了BeanPostProcessor 接口，并自动把它们注册为后置处理器。在创建bean过程中调用它们，所以部署一个后置处理器跟普通的bean没有什么太大区别。 2.BeanFactory容器注册bean后置处理器时必须通过代码显示的注册，在IoC容器继承体系中的ConfigurableBeanFactory接口中定义了注册方法 /** * Add a new BeanPostProcessor that will get applied to beans created * by this factory. To be invoked during factory configuration. * &amp;lt;p&amp;gt;Note: Post-processors submitted here will be applied in the order of * registration; any ordering semantics expressed through implementing the * {@link org.springframework.core.Ordered} interface will be ignored. Note * that autodetected post-processors (e.g. as beans in an ApplicationContext) * will always be applied after programmatically registered ones. * @param beanPostProcessor the post-processor to register */ void addBeanPostProcessor(BeanPostProcessor beanPostProcessor); Spring如何调用多个BeanPostProcessor实现类： 我们可以在Spring配置文件中添加多个BeanPostProcessor(后置处理器)接口实现类，在默认情况下Spring容器会根据后置处理器的定义顺序来依次调用。 Spring配置文件： &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt; &amp;lt;!-- bean定义 --&amp;gt; &amp;lt;bean id=&quot;narCodeService&quot; class=&quot;com.test.service.impl.NarCodeServiceImpl&quot;&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&quot;postProcessor&quot; class=&quot;com.test.spring.PostProcessor&quot;/&amp;gt; &amp;lt;bean id=&quot;postProcessorB&quot; class=&quot;com.test.spring.PostProcessorB&quot;/&amp;gt; &amp;lt;/beans&amp;gt; BeanPostProcessor实现类： package com.test.spring; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanPostProcessor; /** * bean后置处理器 * @author zss * */ public class PostProcessor implements BeanPostProcessor { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器处理bean=【&quot;+beanName+&quot;】开始&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器处理bean=【&quot;+beanName+&quot;】完毕!&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } } ---------------------------------------------------------------------------------------------------------------------------------------- package com.test.spring; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanPostProcessor; public class PostProcessorB implements BeanPostProcessor { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器开始调用了&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器调用结束了&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } } 测试： package com.test.spring; import org.junit.Before; import org.junit.Test; import org.springframework.context.support.AbstractApplicationContext; import org.springframework.context.support.ClassPathXmlApplicationContext; public class T { AbstractApplicationContext applicationcontext=null; @Before public void before() { System.out.println(&quot;》》》Spring ApplicationContext容器开始初始化了......&quot;); applicationcontext= new ClassPathXmlApplicationContext(new String[]{&quot;test1-service.xml&quot;}); System.out.println(&quot;》》》Spring ApplicationContext容器初始化完毕了......&quot;); } @Test public void test() { applicationcontext.registerShutdownHook(); } } 测试结果： 》》》Spring ApplicationContext容器开始初始化了...... 2017-03-19 10:50:29 INFO:ClassPathXmlApplicationContext-Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 10:50:29 CST 2017]; root of context hierarchy 2017-03-19 10:50:29 INFO:XmlBeanDefinitionReader-Loading XML bean definitions from class path resource [test1-service.xml] 后置处理器处理bean=【narCodeService】开始 后置处理器开始调用了 后置处理器处理bean=【narCodeService】完毕! 后置处理器调用结束了 》》》Spring ApplicationContext容器初始化完毕了...... 2017-03-19 10:50:34 INFO:ClassPathXmlApplicationContext-Closing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 10:50:29 CST 2017]; root of context hierarchy 在Spring机制中可以指定后置处理器调用顺序，通过让BeanPostProcessor接口实现类实现Ordered接口getOrder方法，该方法返回一整数，默认值为 0，优先级最高，值越大优先级越低 例如： package com.test.spring; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanPostProcessor; import org.springframework.core.Ordered; /** * bean后置处理器 * @author zss * */ public class PostProcessor implements BeanPostProcessor,Ordered{ @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器处理bean=【&quot;+beanName+&quot;】开始&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器处理bean=【&quot;+beanName+&quot;】完毕!&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } @Override public int getOrder() { return 1; } } ---------------------------------------------------------------------------- package com.test.spring; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanPostProcessor; import org.springframework.core.Ordered; public class PostProcessorB implements BeanPostProcessor,Ordered { @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器开始调用了&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;后置处理器调用结束了&quot;); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } return bean; } @Override public int getOrder() { return 0; } } 测试结果： 》》》Spring ApplicationContext容器开始初始化了...... 2017-03-19 11:04:10 INFO:ClassPathXmlApplicationContext-Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 11:04:10 CST 2017]; root of context hierarchy 2017-03-19 11:04:10 INFO:XmlBeanDefinitionReader-Loading XML bean definitions from class path resource [test1-service.xml] 后置处理器开始调用了 后置处理器处理bean=【narCodeService】开始 后置处理器调用结束了 后置处理器处理bean=【narCodeService】完毕! 》》》Spring ApplicationContext容器初始化完毕了...... 2017-03-19 11:04:14 INFO:ClassPathXmlApplicationContext-Closing org.springframework.context.support.ClassPathXmlApplicationContext@18c92ff9: startup date [Sun Mar 19 11:04:10 CST 2017]; root of context hierarchy</summary></entry><entry><title type="html">Spring中的aware接口</title><link href="http://localhost:4000/mianshi/spring/0707/10" rel="alternate" type="text/html" title="Spring中的aware接口" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/spring/0707/Spring%E4%B8%AD%E7%9A%84aware%E6%8E%A5%E5%8F%A3</id><content type="html" xml:base="http://localhost:4000/mianshi/spring/0707/10">&lt;p&gt;Spring中有很多继承于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aware&lt;/code&gt;中的接口，这些接口到底是做什么用到的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mianshiti/0707/3397380-6ef519bbc705ce28.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aware&lt;/code&gt;,翻译过来是知道的，已感知的，意识到的，所以这些接口从字面意思应该是能感知到所有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aware&lt;/code&gt;前面的含义。&lt;/p&gt;

&lt;p&gt;先举个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;的例子，实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;接口，可以让该&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bean&lt;/code&gt;感知到自身的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanName&lt;/code&gt;（对应Spring容器的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanId&lt;/code&gt;属性）属性,举个例子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;接口的定义&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanNameAware&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Aware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;定义两个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;,一个实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;,一个不实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.github.jettyrun.springinterface.demo.aware.beannameaware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.BeanNameAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Created by jetty on 18/1/31.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanNameAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setBeanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//ID保存BeanName的值&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;id='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;, name='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;, address='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.github.jettyrun.springinterface.demo.aware.beannameaware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.BeanNameAware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * Created by jetty on 18/1/31.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;id='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;, name='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;, address='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在Spring配置文件中初始化两个对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zhangsan&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.github.jettyrun.springinterface.demo.aware.beannameaware.User&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zhangsan&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;address&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;火星&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lisi&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.github.jettyrun.springinterface.demo.aware.beannameaware.User2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lisi&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;address&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;火星&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;main方法测试一下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;接口所起的作用。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;classpath:application-beanaware.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;实现了BeanNameAware接口的信息BeanId=%s,所有信息=%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;

        &lt;span class=&quot;nc&quot;&gt;User2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;未实现BeanNameAware接口的信息BeanId=%s,所有信息=%s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;运行结果&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;实现了BeanNameAware接口的信息BeanId=zhangsan,所有信息=User{id='zhangsan', name='zhangsan', address='火星'}
未实现BeanNameAware接口的信息BeanId=null,所有信息=User{id='null', name='lisi', address='火星'}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;能够看到，我们在实现了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;中，获取到了Spring容器中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanId&lt;/code&gt;（对应&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;spring配置文件&lt;/code&gt;中的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt;属性），而没有实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User2&lt;/code&gt;，则不能获取到Spring容器中的Id属性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanNameAware&lt;/code&gt;接口是为了让自身&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bean&lt;/code&gt;能够感知到，获取到自身在Spring容器中的id属性。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;同理，其他的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aware&lt;/code&gt;接口也是为了能够感知到自身的一些属性。
 比如实现了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationContextAware&lt;/code&gt;接口的类，能够获取到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ApplicationContext&lt;/code&gt;，实现了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactoryAware&lt;/code&gt;接口的类，能够获取到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BeanFactory&lt;/code&gt;对象。&lt;/strong&gt;&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">Spring中有很多继承于aware中的接口，这些接口到底是做什么用到的。 aware,翻译过来是知道的，已感知的，意识到的，所以这些接口从字面意思应该是能感知到所有Aware前面的含义。 先举个BeanNameAware的例子，实现BeanNameAware接口，可以让该Bean感知到自身的BeanName（对应Spring容器的BeanId属性）属性,举个例子： BeanNameAware接口的定义 public interface BeanNameAware extends Aware { void setBeanName(String name); } 定义两个User,一个实现BeanNameAware,一个不实现。 package com.github.jettyrun.springinterface.demo.aware.beannameaware; import org.springframework.beans.factory.BeanNameAware; /** * Created by jetty on 18/1/31. */ public class User implements BeanNameAware{ private String id; private String name; private String address; public void setBeanName(String beanName) { //ID保存BeanName的值 id=beanName; } public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return &quot;User{&quot; + &quot;id='&quot; + id + '\'' + &quot;, name='&quot; + name + '\'' + &quot;, address='&quot; + address + '\'' + '}'; } } package com.github.jettyrun.springinterface.demo.aware.beannameaware; import org.springframework.beans.factory.BeanNameAware; /** * Created by jetty on 18/1/31. */ public class User2 { private String id; private String name; private String address; public String getId() { return id; } public void setId(String id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return &quot;User{&quot; + &quot;id='&quot; + id + '\'' + &quot;, name='&quot; + name + '\'' + &quot;, address='&quot; + address + '\'' + '}'; } } 在Spring配置文件中初始化两个对象。 &amp;lt;bean id=&quot;zhangsan&quot; class=&quot;com.github.jettyrun.springinterface.demo.aware.beannameaware.User&quot;&amp;gt; &amp;lt;property name=&quot;name&quot; value=&quot;zhangsan&quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;property name=&quot;address&quot; value=&quot;火星&quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&quot;lisi&quot; class=&quot;com.github.jettyrun.springinterface.demo.aware.beannameaware.User2&quot;&amp;gt; &amp;lt;property name=&quot;name&quot; value=&quot;lisi&quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;property name=&quot;address&quot; value=&quot;火星&quot;&amp;gt;&amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; main方法测试一下BeanNameAware接口所起的作用。 public static void main(String[] args) { ApplicationContext context = new ClassPathXmlApplicationContext(&quot;classpath:application-beanaware.xml&quot;); User user=context.getBean(User.class); System.out.println(String.format(&quot;实现了BeanNameAware接口的信息BeanId=%s,所有信息=%s&quot;,user.getId(),user.toString())); User2 user2=context.getBean(User2.class); System.out.println(String.format(&quot;未实现BeanNameAware接口的信息BeanId=%s,所有信息=%s&quot;,user2.getId(),user2.toString())); } 运行结果 实现了BeanNameAware接口的信息BeanId=zhangsan,所有信息=User{id='zhangsan', name='zhangsan', address='火星'} 未实现BeanNameAware接口的信息BeanId=null,所有信息=User{id='null', name='lisi', address='火星'} 能够看到，我们在实现了BeanNameAware的 User中，获取到了Spring容器中的BeanId（对应spring配置文件中的id属性），而没有实现BeanNameAware的User2，则不能获取到Spring容器中的Id属性。 所以BeanNameAware接口是为了让自身Bean能够感知到，获取到自身在Spring容器中的id属性。 同理，其他的Aware接口也是为了能够感知到自身的一些属性。 比如实现了ApplicationContextAware接口的类，能够获取到ApplicationContext，实现了BeanFactoryAware接口的类，能够获取到BeanFactory对象。</summary></entry><entry><title type="html">SpringBean 生命周期</title><link href="http://localhost:4000/mianshi/spring/0707/11" rel="alternate" type="text/html" title="SpringBean 生命周期" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/spring/0707/SpringBean%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F</id><content type="html" xml:base="http://localhost:4000/mianshi/spring/0707/11">&lt;p&gt;最近面试过程中被问到了SpringBean生命周期，当时答了个印象中的大概，详细整理一下&lt;/p&gt;

&lt;p&gt;Spring容器管理的类在定位，加载之后，初始化到能用的过程如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mianshiti/0707/2081031-20200702193359366-206975160.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1、调用构造方法new一个实例到容器中&lt;/p&gt;

&lt;p&gt;2、对于依赖的属性进行注入&lt;/p&gt;

&lt;p&gt;注意：由于注入的属性在构造方法之后，所以在构造方法中使用被注解的字段（@Autowire、@Value等）会拿不到注入的值或者实例；&lt;/p&gt;

&lt;p&gt;3、bean如果集成了Aware接口的各种子接口，那么可以执行相应Aware接口的方法，Aware接口主要是获取当前bean被放入容器的信息，不如beanId，beanFactory,ClassLoader等。&lt;/p&gt;

&lt;p&gt;执行顺序，大概是BeanNameAware-&amp;gt;BeanFactoryAware…&lt;/p&gt;

&lt;p&gt;4、BeanPostProcessor（后置处理器）的postProcessBeforeInitialization方法&lt;/p&gt;

&lt;p&gt;这个before初始化的意思是调用显式初始化方法之前的方法，BeanPostProcessor的方法逻辑是什么也不做，直接返回bean,&lt;/p&gt;

&lt;p&gt;BeanPostProcessor:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//为在Bean的初始化前提供回调入口
@Nullable
default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
	return bean;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以自己定义一个处理器，来做一些想做的事&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1 　  
 2 
 3 &lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
 4 &lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans 
 7 http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 8 
 9 &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.dpb.pojo.XXX&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;init-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xxx&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
10 &lt;span class=&quot;nt&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xxx&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;波波烤鸭&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
11 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
12 
13 &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 注册处理器 --&amp;gt;&lt;/span&gt;
14 &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.dpb.processor.MyBeanPostProcessor&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/bean&amp;gt;&lt;/span&gt;
15 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;　　
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.dpb.processor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.BeansException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.beans.factory.config.BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/**
 * 自定义BeanPostProcessor实现类
 * BeanPostProcessor接口的作用是：
 *      我们可以通过该接口中的方法在bean实例化、配置以及其他初始化方法前后添加一些我们自己的逻辑
 * @author dengp
 *
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyBeanPostProcessor&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeanPostProcessor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 实例化、依赖注入完毕，在调用显示的初始化之前完成一些定制的初始化任务
     * 注意：方法返回值不能为null
     * 如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到bena实例对象
     * 因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;初始化 before--实例化的bean对象:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 可以根据beanName不同执行不同的处理操作&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * 实例化、依赖注入、初始化完毕时执行 
     * 注意：方法返回值不能为null
     * 如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到bena实例对象
     * 因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeansException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;初始化 after...实例化的bean对象:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beanName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 可以根据beanName不同执行不同的处理操作&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5、执行@PostConstruct 注解的方法，比如：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6、bean实现了InitializingBean，执行afterPropertiesSet方法,比如：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InitializingBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AfterPropertiesSet method: myServiceImpl&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;7、执行配置文件中的init-method&lt;/p&gt;

&lt;p&gt;8、BeanPostProcessor的postProcessAfterInitialization方法&lt;/p&gt;

&lt;p&gt;9、至此完成bean的准备，可以使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;当bean不在被使用，容器关闭时，bean会被销毁&lt;/strong&gt;。可以有一下方法参与销毁行为&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mianshiti/0707/2081031-20200702195852697-627239963.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1、执行@PostDestroy 注解的方法&lt;/p&gt;

&lt;p&gt;2、bean实现了DisposableBean，执行destroy方法&lt;/p&gt;

&lt;p&gt;3、执行配置文件中的destroy-method&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">最近面试过程中被问到了SpringBean生命周期，当时答了个印象中的大概，详细整理一下 Spring容器管理的类在定位，加载之后，初始化到能用的过程如下图： 1、调用构造方法new一个实例到容器中 2、对于依赖的属性进行注入 注意：由于注入的属性在构造方法之后，所以在构造方法中使用被注解的字段（@Autowire、@Value等）会拿不到注入的值或者实例； 3、bean如果集成了Aware接口的各种子接口，那么可以执行相应Aware接口的方法，Aware接口主要是获取当前bean被放入容器的信息，不如beanId，beanFactory,ClassLoader等。 执行顺序，大概是BeanNameAware-&amp;gt;BeanFactoryAware… 4、BeanPostProcessor（后置处理器）的postProcessBeforeInitialization方法 这个before初始化的意思是调用显式初始化方法之前的方法，BeanPostProcessor的方法逻辑是什么也不做，直接返回bean, BeanPostProcessor: //为在Bean的初始化前提供回调入口 @Nullable default Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { return bean; } 可以自己定义一个处理器，来做一些想做的事 1 　 2 3 &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; 4 &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 5 xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 6 xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans 7 http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt; 8 9 &amp;lt;bean class=&quot;com.dpb.pojo.XXX&quot; id=&quot;user&quot; init-method=&quot;xxx&quot;&amp;gt; 10 &amp;lt;property name=&quot;xxx&quot; value=&quot;波波烤鸭&quot; /&amp;gt; 11 &amp;lt;/bean&amp;gt; 12 13 &amp;lt;!-- 注册处理器 --&amp;gt; 14 &amp;lt;bean class=&quot;com.dpb.processor.MyBeanPostProcessor&quot;&amp;gt;&amp;lt;/bean&amp;gt; 15 &amp;lt;/beans&amp;gt;　　 package com.dpb.processor; import org.springframework.beans.BeansException; import org.springframework.beans.factory.config.BeanPostProcessor; /** * 自定义BeanPostProcessor实现类 * BeanPostProcessor接口的作用是： * 我们可以通过该接口中的方法在bean实例化、配置以及其他初始化方法前后添加一些我们自己的逻辑 * @author dengp * */ public class MyBeanPostProcessor implements BeanPostProcessor{ /** * 实例化、依赖注入完毕，在调用显示的初始化之前完成一些定制的初始化任务 * 注意：方法返回值不能为null * 如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到bena实例对象 * 因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中 */ @Override public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;初始化 before--实例化的bean对象:&quot;+bean+&quot;\t&quot;+beanName); // 可以根据beanName不同执行不同的处理操作 return bean; } /** * 实例化、依赖注入、初始化完毕时执行 * 注意：方法返回值不能为null * 如果返回null那么在后续初始化方法将报空指针异常或者通过getBean()方法获取不到bena实例对象 * 因为后置处理器从Spring IoC容器中取出bean实例对象没有再次放回IoC容器中 */ @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { System.out.println(&quot;初始化 after...实例化的bean对象:&quot;+bean+&quot;\t&quot;+beanName); // 可以根据beanName不同执行不同的处理操作 return bean; } } 5、执行@PostConstruct 注解的方法，比如： @PostConstruct private void init(){ doSomething... } 6、bean实现了InitializingBean，执行afterPropertiesSet方法,比如： public class MyServiceImpl implements InitializingBean { @Override public void afterPropertiesSet() throws Exception { System.out.println(&quot;AfterPropertiesSet method: myServiceImpl&quot;); } } 7、执行配置文件中的init-method 8、BeanPostProcessor的postProcessAfterInitialization方法 9、至此完成bean的准备，可以使用。 当bean不在被使用，容器关闭时，bean会被销毁。可以有一下方法参与销毁行为 1、执行@PostDestroy 注解的方法 2、bean实现了DisposableBean，执行destroy方法 3、执行配置文件中的destroy-method</summary></entry><entry><title type="html">Redis为什么这么快以及持久化机制</title><link href="http://localhost:4000/mianshi/redis/0707/01" rel="alternate" type="text/html" title="Redis为什么这么快以及持久化机制" /><published>2020-07-07T00:00:00+08:00</published><updated>2020-07-07T00:00:00+08:00</updated><id>http://localhost:4000/mianshi/redis/0707/Redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB%E4%BB%A5%E5%8F%8A%E6%8C%81%E4%B9%85%E5%8C%96%E6%9C%BA%E5%88%B6</id><content type="html" xml:base="http://localhost:4000/mianshi/redis/0707/01">&lt;p&gt;&lt;strong&gt;1、首先我们谈一下为什么Redis快：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一、 Redis是纯内存数据库，一般都是简单的存取操作，线程占用的时间很多，时间的花费主要集中在IO上，所以读取速度快。&lt;/p&gt;

&lt;p&gt;二、 再说一下IO，Redis使用的是非阻塞IO，IO多路复用，使用了单线程来轮询描述符，将数据库的开、关、读、写都转换成了事件，减少了线程切换时上下文的切 换和竞争。&lt;/p&gt;

&lt;p&gt;​      多路 I/O 复用模型是利用select、poll、epoll可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;select和epoll的区别&lt;/strong&gt;： 1、select支持的文件描述符数量太小了，默认是1024，而epoll无限制；&lt;/p&gt;

&lt;p&gt;​                   2、 当有A B C D4个流时，比如甲连接了A。阻塞模式，一直处理A知道完成/阻塞；select模式，甲请求后无请求事件，进入阻塞，一旦甲又来请求，开始轮询比如D、B、C、A，找到A了处理，问题是如果有500个呢？所以会产生惊群问题；epoll是在同时保持ABCD连接的同时，让甲的请求事件驱动A，直接找到A连接开始处理，避免轮询，问题是如果同时AC2个连接的请求都到了呢？redis采用线性事件串型化，让AC进入队列，然后异步消费队列进行处理，&lt;/p&gt;

&lt;p&gt;三、 Redis采用了单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争。&lt;/p&gt;

&lt;p&gt;四、另外，数据结构也帮了不少忙，Redis全程使用hash结构，读取速度快，还有一些特殊的数据结构，对数据存储进行了优化，如压缩表，对短数据进行压缩存储   ，再如，跳表，使用有序的数据结构加快读取的速度。&lt;/p&gt;

&lt;p&gt;五、还有一点，Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;上述讲到Redis是基于内存操作的，那服务器宕机了，那不是全完了，所以Redis有自己的持久化操作，下面我们来讲讲Redis的持久化&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、Redis的持久化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、RDB机制：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​     &lt;strong&gt;原理：&lt;/strong&gt;RDB是默认开启的，会按照配置的指定时间将内存中的数据快照到磁盘中，创建一个dump.rdb文件，redis启动时再恢复到内存中。redis会单独创建fork()一个子进程，将父进程的数据复制到子进程的内存中，然后由子进程写入到临时文件，再用这个临时文件替换上次的快照文件，然后子进程退出，释放内存。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mianshiti/0707/1529748-20191228144120407-772338177.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;​    &lt;strong&gt;注意&lt;/strong&gt;：&lt;strong&gt;每次快照持久化都会讲主进程的数据复制一遍，会导致内存开销加倍，若此时内存不足，则会阻塞服务器运行，直到复制结束释放内存；如果数据量过大，而且写操作频繁，必然会引起大量的磁盘操作，严重影响性能，并且最后一次持久化会消失。（顺便一提，影响Redis的性能主要是磁盘操作）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、AOF机制：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;​     &lt;strong&gt;原理：&lt;/strong&gt;以日志的形式记录每个写操作（读操作不记录），只需追加文件但不可改写文件，redis启动时会根据日志从头到尾全部加载到内存中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/mianshiti/0707/1529748-20191228144942326-2077722385.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;注意因为aof采用追加的方式所以文件会越来越大针对这个问题新增了重写机制就是当日志文件大到一定程度的时候会fork出一条新进程来遍历进程内存中的数据每条记录对应一条set语句写到临时文件中然后替换旧的日志文件默认触发是当aof文件大小是上次重启大小的一倍且当文件大于64m的时候&quot;&gt;注意：因为AOF采用追加的方式，所以文件会越来越大，针对这个问题，新增了重写机制，就是当日志文件大到一定程度的时候，会fork出一条新进程来遍历进程内存中的数据，每条记录对应一条set语句，写到临时文件中，然后替换旧的日志文件，默认触发是当AOF文件大小是上次重启大小的一倍且当文件大于64M的时候。&lt;/h4&gt;

&lt;h4 id=&quot;3二者优缺点&quot;&gt;3、二者优缺点：&lt;/h4&gt;

&lt;h4 id=&quot;rdb存在哪些优势呢&quot;&gt;RDB存在哪些优势呢？&lt;/h4&gt;

&lt;p&gt;1). 一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这对于文件备份而言是非常完美的。比如，你可能打算每个小时归档一次最近24小时的数据，同时还要每天归档一次最近30天的数据。通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。&lt;/p&gt;

&lt;p&gt;2). 对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。&lt;/p&gt;

&lt;p&gt;3). 性能最大化。对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是fork出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了。&lt;/p&gt;

&lt;p&gt;4). 相比于AOF机制，如果数据集很大，RDB的启动效率会更高。&lt;/p&gt;

&lt;p&gt;RDB又存在哪些劣势呢？&lt;/p&gt;

&lt;p&gt;1). 如果你想保证数据的高可用性，即最大限度的避免数据丢失，那么RDB将不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。&lt;/p&gt;

&lt;p&gt;2). 由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。&lt;/p&gt;

&lt;h4 id=&quot;aof的优势有哪些呢&quot;&gt;AOF的优势有哪些呢？&lt;/h4&gt;

&lt;p&gt;1). 该机制可以带来更高的数据安全性，即数据持久性。Redis中提供了3中同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变化都会被立即记录到磁盘中。可以预见，这种方式在效率上是最低的。至于无同步，无需多言，我想大家都能正确的理解它。&lt;/p&gt;

&lt;p&gt;2). 由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果我们本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通过redis-check-aof工具来帮助我们解决数据一致性的问题。&lt;/p&gt;

&lt;p&gt;3). 如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。&lt;/p&gt;

&lt;p&gt;4). AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建。&lt;/p&gt;

&lt;p&gt;AOF的劣势有哪些呢？&lt;/p&gt;

&lt;p&gt;1). 对于相同数量的数据集而言，AOF文件通常要大于RDB文件。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。&lt;/p&gt;

&lt;p&gt;2). 根据同步策略的不同，AOF在运行效率上往往会慢于RDB。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和RDB一样高效。&lt;/p&gt;

&lt;p&gt;二者选择的标准，就是看系统是愿意牺牲一些性能，换取更高的缓存一致性（aof），还是愿意写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（rdb）。rdb这个就更有些 eventually consistent的意思了。&lt;/p&gt;

&lt;h4 id=&quot;4常用配置&quot;&gt;4、常用配置&lt;/h4&gt;

&lt;h4 id=&quot;rdb持久化配置&quot;&gt;RDB持久化配置&lt;/h4&gt;

&lt;p&gt;Redis会将数据集的快照dump到dump.rdb文件中。此外，我们也可以通过配置文件来修改Redis服务器dump快照的频率，在打开6379.conf文件之后，我们搜索save，可以看到下面的配置信息：&lt;/p&gt;

&lt;p&gt;save 900 1       #在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。&lt;/p&gt;

&lt;p&gt;save 300 10      #在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。&lt;/p&gt;

&lt;p&gt;save 60 10000    #在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。&lt;/p&gt;

&lt;h4 id=&quot;aof持久化配置&quot;&gt;AOF持久化配置&lt;/h4&gt;

&lt;p&gt;在Redis的配置文件中存在三种同步方式，它们分别是：&lt;/p&gt;

&lt;p&gt;appendfsync always   #每次有数据修改发生时都会写入AOF文件。&lt;/p&gt;

&lt;p&gt;appendfsync everysec #每秒钟同步一次，该策略为AOF的缺省策略。&lt;/p&gt;

&lt;p&gt;appendfsync no     #从不同步。高效但是数据不会被持久化。&lt;/p&gt;</content><author><name>java牛牛</name><email>king101125s@gmail.com</email></author><category term="post" /><category term="面试题" /><summary type="html">1、首先我们谈一下为什么Redis快： 一、 Redis是纯内存数据库，一般都是简单的存取操作，线程占用的时间很多，时间的花费主要集中在IO上，所以读取速度快。 二、 再说一下IO，Redis使用的是非阻塞IO，IO多路复用，使用了单线程来轮询描述符，将数据库的开、关、读、写都转换成了事件，减少了线程切换时上下文的切 换和竞争。 ​ 多路 I/O 复用模型是利用select、poll、epoll可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。 select和epoll的区别： 1、select支持的文件描述符数量太小了，默认是1024，而epoll无限制； ​ 2、 当有A B C D4个流时，比如甲连接了A。阻塞模式，一直处理A知道完成/阻塞；select模式，甲请求后无请求事件，进入阻塞，一旦甲又来请求，开始轮询比如D、B、C、A，找到A了处理，问题是如果有500个呢？所以会产生惊群问题；epoll是在同时保持ABCD连接的同时，让甲的请求事件驱动A，直接找到A连接开始处理，避免轮询，问题是如果同时AC2个连接的请求都到了呢？redis采用线性事件串型化，让AC进入队列，然后异步消费队列进行处理， 三、 Redis采用了单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争。 四、另外，数据结构也帮了不少忙，Redis全程使用hash结构，读取速度快，还有一些特殊的数据结构，对数据存储进行了优化，如压缩表，对短数据进行压缩存储 ，再如，跳表，使用有序的数据结构加快读取的速度。 五、还有一点，Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大。 上述讲到Redis是基于内存操作的，那服务器宕机了，那不是全完了，所以Redis有自己的持久化操作，下面我们来讲讲Redis的持久化。 2、Redis的持久化 1、RDB机制： ​ 原理：RDB是默认开启的，会按照配置的指定时间将内存中的数据快照到磁盘中，创建一个dump.rdb文件，redis启动时再恢复到内存中。redis会单独创建fork()一个子进程，将父进程的数据复制到子进程的内存中，然后由子进程写入到临时文件，再用这个临时文件替换上次的快照文件，然后子进程退出，释放内存。 ​ 注意：每次快照持久化都会讲主进程的数据复制一遍，会导致内存开销加倍，若此时内存不足，则会阻塞服务器运行，直到复制结束释放内存；如果数据量过大，而且写操作频繁，必然会引起大量的磁盘操作，严重影响性能，并且最后一次持久化会消失。（顺便一提，影响Redis的性能主要是磁盘操作） 2、AOF机制： ​ 原理：以日志的形式记录每个写操作（读操作不记录），只需追加文件但不可改写文件，redis启动时会根据日志从头到尾全部加载到内存中。 注意：因为AOF采用追加的方式，所以文件会越来越大，针对这个问题，新增了重写机制，就是当日志文件大到一定程度的时候，会fork出一条新进程来遍历进程内存中的数据，每条记录对应一条set语句，写到临时文件中，然后替换旧的日志文件，默认触发是当AOF文件大小是上次重启大小的一倍且当文件大于64M的时候。 3、二者优缺点： RDB存在哪些优势呢？ 1). 一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这对于文件备份而言是非常完美的。比如，你可能打算每个小时归档一次最近24小时的数据，同时还要每天归档一次最近30天的数据。通过这样的备份策略，一旦系统出现灾难性故障，我们可以非常容易的进行恢复。 2). 对于灾难恢复而言，RDB是非常不错的选择。因为我们可以非常轻松的将一个单独的文件压缩后再转移到其它存储介质上。 3). 性能最大化。对于Redis的服务进程而言，在开始持久化时，它唯一需要做的只是fork出子进程，之后再由子进程完成这些持久化的工作，这样就可以极大的避免服务进程执行IO操作了。 4). 相比于AOF机制，如果数据集很大，RDB的启动效率会更高。 RDB又存在哪些劣势呢？ 1). 如果你想保证数据的高可用性，即最大限度的避免数据丢失，那么RDB将不是一个很好的选择。因为系统一旦在定时持久化之前出现宕机现象，此前没有来得及写入磁盘的数据都将丢失。 2). 由于RDB是通过fork子进程来协助完成数据持久化工作的，因此，如果当数据集较大时，可能会导致整个服务器停止服务几百毫秒，甚至是1秒钟。 AOF的优势有哪些呢？ 1). 该机制可以带来更高的数据安全性，即数据持久性。Redis中提供了3中同步策略，即每秒同步、每修改同步和不同步。事实上，每秒同步也是异步完成的，其效率也是非常高的，所差的是一旦系统出现宕机现象，那么这一秒钟之内修改的数据将会丢失。而每修改同步，我们可以将其视为同步持久化，即每次发生的数据变化都会被立即记录到磁盘中。可以预见，这种方式在效率上是最低的。至于无同步，无需多言，我想大家都能正确的理解它。 2). 由于该机制对日志文件的写入操作采用的是append模式，因此在写入过程中即使出现宕机现象，也不会破坏日志文件中已经存在的内容。然而如果我们本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，我们可以通过redis-check-aof工具来帮助我们解决数据一致性的问题。 3). 如果日志过大，Redis可以自动启用rewrite机制。即Redis以append模式不断的将修改数据写入到老的磁盘文件中，同时Redis还会创建一个新的文件用于记录此期间有哪些修改命令被执行。因此在进行rewrite切换时可以更好的保证数据安全性。 4). AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。事实上，我们也可以通过该文件完成数据的重建。 AOF的劣势有哪些呢？ 1). 对于相同数量的数据集而言，AOF文件通常要大于RDB文件。RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。 2). 根据同步策略的不同，AOF在运行效率上往往会慢于RDB。总之，每秒同步策略的效率是比较高的，同步禁用策略的效率和RDB一样高效。 二者选择的标准，就是看系统是愿意牺牲一些性能，换取更高的缓存一致性（aof），还是愿意写操作频繁的时候，不启用备份来换取更高的性能，待手动运行save的时候，再做备份（rdb）。rdb这个就更有些 eventually consistent的意思了。 4、常用配置 RDB持久化配置 Redis会将数据集的快照dump到dump.rdb文件中。此外，我们也可以通过配置文件来修改Redis服务器dump快照的频率，在打开6379.conf文件之后，我们搜索save，可以看到下面的配置信息： save 900 1 #在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。 save 300 10 #在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。 save 60 10000 #在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。 AOF持久化配置 在Redis的配置文件中存在三种同步方式，它们分别是： appendfsync always #每次有数据修改发生时都会写入AOF文件。 appendfsync everysec #每秒钟同步一次，该策略为AOF的缺省策略。 appendfsync no #从不同步。高效但是数据不会被持久化。</summary></entry></feed>