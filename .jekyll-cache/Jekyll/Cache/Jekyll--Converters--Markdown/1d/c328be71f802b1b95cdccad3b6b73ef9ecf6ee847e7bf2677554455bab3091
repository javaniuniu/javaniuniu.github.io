I".$<p>关于获取类的字段有两种方式：getFields()和getDeclaredFields()。我们先来看看这两者的区别吧：</p>

<p>getFields()：获得某个类的所有的公共（public）的字段，包括父类中的字段。
getDeclaredFields()：获得某个类的所有声明的字段，即包括public、private和proteced，但是不包括父类的申明字段。</p>

<p>同样类似的还有getConstructors()和getDeclaredConstructors()、getMethods()和getDeclaredMethods()，这两者分别表示获取某个类的方法、构造函数。</p>

<p>具体编码如下：</p>

<p>我们先创建一个POJO</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kt">long</span> <span class="n">id</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="kt">long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">id</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">name</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
<p>再来获取此类中的所有字段
Field[] fields = User.class.getDeclaredFields();
获取字段的名称</p>

<p>String fieldName = field.getName();</p>

<p>获取字段的修饰符</p>

<p>int fieldValue = field.getModifiers();//如：private、static、final等</p>

<p>与某个具体的修饰符进行比较</p>

<p>Modifier.isStatic(fieldValue)//看此修饰符是否为静态(static)</p>

<p>获取字段的声明类型</p>

<p>field.getType()；//返回的是一个class</p>

<p>与某个类型进行比较</p>

<p>field.getType() == Timestamp.class</p>

<p>获取指定对象中此字段的值</p>

<p>Object fieldObject= field.get(user);//user可以看做是从数据库中查找出来的对象</p>

<p>如果POJO类中有一个集合类型的字段，我们该如何获取字段中中的值呢？</p>

<p>首先创建一个POJO类</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bean</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">love</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nc">String</span><span class="o">[]</span> <span class="nf">getLove</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">love</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLove</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">love</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">love</span> <span class="o">=</span> <span class="n">love</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>创建一个操作类</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Admin</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="k">try</span> <span class="o">{</span>

			<span class="c1">// 赋值</span>
			<span class="nc">Object</span> <span class="n">obj</span> <span class="o">=</span> <span class="nc">Bean</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
			<span class="nc">Class</span> <span class="n">paramClass</span> <span class="o">=</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"[Ljava.lang.String;"</span><span class="o">);</span>
			<span class="nc">String</span><span class="o">[]</span> <span class="n">param</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"吃"</span><span class="o">,</span> <span class="s">"喝"</span><span class="o">,</span> <span class="s">"玩"</span><span class="o">,</span> <span class="s">"乐"</span> <span class="o">};</span>
			<span class="nc">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="nc">Bean</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"setLove"</span><span class="o">,</span> <span class="n">paramClass</span><span class="o">);</span>
			<span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">obj</span><span class="o">,</span> <span class="o">(</span><span class="nc">Object</span><span class="o">)</span> <span class="n">param</span><span class="o">);</span>

			<span class="c1">// 取值</span>
			<span class="nc">Bean</span> <span class="n">bean</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Bean</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bean</span><span class="o">.</span><span class="na">getLove</span><span class="o">().</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bean</span><span class="o">.</span><span class="na">getLove</span><span class="o">()[</span><span class="n">i</span><span class="o">]);</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>

<p>得到的结果为：
吃
喝
玩
乐</p>

<p>关于field还有一种情况我们需要注意，就是当字段修饰符为private时，我们需要加上：</p>

<p>field.setAccessible(true);</p>

<p>判断方法是：if (!field.isAccessible())</p>

<p>更详细的解释请点击</p>

<p>接下来补充一下在Java中使用正则表达式</p>

<p>先创建一个正则表达式对象</p>

<p>Pattern pattern = Pattern.compile(“[A-Z][a-z]* “);</p>

<p>指定为字符串的正则表达式必须首先被编译为此类的实例</p>

<p>Matcher matcher = pattern.matcher(fieldName);</p>

<p>尝试查找与该模式匹配的输入序列的下一个子序列</p>

<p>boolean isMatcher = matcher.find();</p>

<p>返回由以前匹配操作所匹配的输入子序列</p>

<p>String str = matcher.group();</p>

<p>实现非终端添加和替换步骤,以’_ ‘连接各个字段</p>

<p>matcher.appendReplacement(sb, str + “_ “);</p>
:ET