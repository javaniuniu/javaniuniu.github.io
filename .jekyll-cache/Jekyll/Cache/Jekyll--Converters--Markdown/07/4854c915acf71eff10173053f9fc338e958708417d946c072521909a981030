I"J+<p><strong>默认实现SimpleGrantedAuthority</strong></p>
<h4 id="grantedauthority接口">GrantedAuthority接口</h4>
<p>我们知道UserDeitails接口里面有一个getAuthorities()方法。这个方法将返回此用户的所拥有的权限。这个集合将用于用户的访问控制，也就是Authorization。</p>

<p>所谓权限，就是一个字符串。一般不会重复。</p>

<p>所谓权限检查，就是查看用户权限列表中是否含有匹配的字符串。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">GrantedAuthority</span> <span class="kd">extends</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="nf">getAuthority</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<h4 id="角色如何表示与shiro有何不同">“角色”如何表示？与Shiro有何不同？</h4>

<p>在Security中，<code class="highlighter-rouge">角色和权限共用GrantedAuthority接口</code>，唯一的不同角色就是多了个前缀”ROLE_“，而且<code class="highlighter-rouge">它没有Shiro的那种从属关系</code>，即一个角色包含哪些权限等等。在Security看来角色和权限时一样的，它认证的时候，把所有权限（角色、权限）都取出来，而不是分开验证。</p>

<p>所以，在Security提供的UserDetailsService默认实现JdbcDaoImpl中，<code class="highlighter-rouge">角色和权限都存储在auhtorities表中</code>。而不是像Shiro那样，角色有个roles表，权限有个permissions表。以及相关的管理表等等。</p>

<p><strong>GrantedAuthority接口的默认实现SimpleGrantedAuthority</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">authority</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.security.core.GrantedAuthority</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.util.Assert</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">SimpleGrantedAuthority</span> <span class="kd">implements</span> <span class="nc">GrantedAuthority</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">500L</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">role</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SimpleGrantedAuthority</span><span class="o">(</span><span class="nc">String</span> <span class="n">role</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">hasText</span><span class="o">(</span><span class="n">role</span><span class="o">,</span> <span class="s">"A granted authority textual representation is required"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">role</span> <span class="o">=</span> <span class="n">role</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAuthority</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">obj</span> <span class="k">instanceof</span> <span class="nc">SimpleGrantedAuthority</span> <span class="o">?</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">.</span><span class="na">equals</span><span class="o">(((</span><span class="nc">SimpleGrantedAuthority</span><span class="o">)</span><span class="n">obj</span><span class="o">).</span><span class="na">role</span><span class="o">)</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">role</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>注意，在构建SimpleGrantedAuthority对象的时候，它没有添加任何前缀。所以表示”角色”的权限，在数据库中就带有”ROLE_“前缀了。所以authorities表中的视图可能是这样的。</p>

<p><img src="/assets/images/SpringSecurity/1313132-20190119134521755-1100857786.png" alt="图片pic1" /></p>

<p><strong>角色和权限能否分开存储？角色能不能不带”ROLE_“前缀</strong></p>

<p>当然可以分开存储，你可以定义两张表，一张存角色，一张存权限。但是你自定义UserDetailsService的时候，需要保证把这两张表的数据都取出来，放到UserDails的权限集合中。当然你数据库中存储的角色也可以不带”ROLE_“前缀，就像这样。</p>

<p><img src="/assets/images/SpringSecurity/1313132-20190119133239244-1352677896.png" alt="图片pic2" />
<img src="/assets/images/SpringSecurity/1313132-20190119133256601-1567591650.png" alt="图片pic3" /></p>

<p>但是前面说到了，<code class="highlighter-rouge">Security才不管你是角色，还是权限。它只比对字符串。</code></p>

<p>比如它有个表达式hasRole(“ADMIN”)。那它实际上查询的是用户权限集合中是否存在字符串”ROLE_ADMIN”。如果你从角色表中取出用户所拥有的角色时不加上”ROLE_“前缀，那验证的时候就匹配不上了。</p>

<p><code class="highlighter-rouge">所以角色信息存储的时候可以没有"ROLE_"前缀，但是包装成GrantedAuthority对象的时候必须要有。</code></p>

<h4 id="权限检查访问控制方式">权限检查/访问控制方式</h4>

<p>权限检查有两种方式，一种是在配置类中，指定粗粒度的访问控制，另一种是使用注解细粒度的控制访问。</p>

<p><strong>粗粒度访问控制</strong>，所有URL以”/admin”开头的用户必须拥有角色”ADMIN”才能访问。实际上操作的时候hasRole表达式，会判断参数是否包含”ROLE_“前缀，如果没有则加上去，然后再去校验。有这个前缀则直接校验。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span><span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/admin/**"</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">"hasRole('ADMIN')"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/user/**"</span><span class="o">).</span><span class="na">access</span><span class="o">(</span><span class="s">"hasRole('USER')"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">();</span>

<span class="o">}</span>
</code></pre></div></div>
<p><strong>细粒度的访问控制</strong></p>

<p><code class="highlighter-rouge">注：需要使用注解@EnableGlobalMethodSecurity(prePostEnabled=true) 开启</code></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PreAuthoritze</span><span class="o">(</span><span class="s">"hasAuthority('readArtical')"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Artical</span><span class="o">&gt;</span> <span class="nf">getAll</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">//...</span>
<span class="o">}</span>
</code></pre></div></div>
<p>这个注解，会从SecurityContext中取出Authencation对象，然后再取出Collection<GrantedAuthority> authorites集合。然后比对当前用户是否有权限"readArtical"。实际上就是比对集合中是否有那个GrantedAuthority的getAuthority()方法返回的字符串与"radArtical"匹配。</GrantedAuthority></p>

<p>参考链接</p>
<ul>
  <li><a href="https://www.cnblogs.com/longfurcat/p/9417422.html">【详解】GrantedAuthority（已授予的权限）</a></li>
</ul>
:ET