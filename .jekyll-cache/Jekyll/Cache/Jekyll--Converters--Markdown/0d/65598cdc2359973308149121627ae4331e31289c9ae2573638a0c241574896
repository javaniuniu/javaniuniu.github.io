I"E]<h4 id="简介">简介</h4>
<p>MultipartResolver 用于处理文件上传，当收到请求时 DispatcherServlet 的 checkMultipart() 方法会调用 MultipartResolver 的 isMultipart() 方法判断请求中是否包含文件。如果请求数据中包含文件，则调用 MultipartResolver 的 resolveMultipart() 方法对请求的数据进行解析，然后将文件数据解析成 MultipartFile 并封装在 MultipartHttpServletRequest (继承了 HttpServletRequest) 对象中，最后传递给 Controller，在 MultipartResolver 接口中有如下方法：</p>

<ul>
  <li>boolean isMultipart(HttpServletRequest request); // 是否是 multipart</li>
  <li>MultipartHttpServletRequest resolveMultipart(HttpServletRequest request); // 解析请求</li>
  <li>void cleanupMultipart(MultipartHttpServletRequest request);</li>
</ul>

<p>MultipartFile 封装了请求数据中的文件，此时这个文件存储在内存中或临时的磁盘文件中，需要将其转存到一个合适的位置，因为请求结束后临时存储将被清空。在 MultipartFile 接口中有如下方法：</p>

<ul>
  <li>String getName(); // 获取参数的名称</li>
  <li>String getOriginalFilename(); // 获取文件的原名称</li>
  <li>String getContentType(); // 文件内容的类型</li>
  <li>boolean isEmpty(); // 文件是否为空</li>
  <li>long getSize(); // 文件大小</li>
  <li>byte[] getBytes(); // 将文件内容以字节数组的形式返回</li>
  <li>InputStream getInputStream(); // 将文件内容以输入流的形式返回</li>
  <li>void transferTo(File dest); // 将文件内容传输到指定文件中</li>
</ul>

<p><strong>MultipartResolver 是一个接口，它的实现类如下图所示，分为 CommonsMultipartResolver 类和 StandardServletMultipartResolver 类。</strong>
其中 CommonsMultipartResolver 使用 commons Fileupload 来处理 multipart 请求，所以在使用时，必须要引入相应的 jar 包；而 StandardServletMultipartResolver 是基于 Servlet 3.0来处理 multipart 请求的，所以不需要引用其他 jar 包，但是必须使用支持 Servlet 3.0的容器才可以，以tomcat为例，从 Tomcat 7.0.x的版本开始就支持 Servlet 3.0了。</p>

<p>一、CommonsMultipartResolver</p>

<p>1 使用方式</p>

<p>1.1 配置文件</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- 定义文件上传解析器 --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"multipartResolver"</span> <span class="na">class=</span><span class="s">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- 设定默认编码 --&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"defaultEncoding"</span> <span class="na">value=</span><span class="s">"UTF-8"</span><span class="nt">&gt;&lt;/property&gt;</span>
    <span class="c">&lt;!-- 设定文件上传的最大值为5MB，5*1024*1024 --&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maxUploadSize"</span> <span class="na">value=</span><span class="s">"5242880"</span><span class="nt">&gt;&lt;/property&gt;</span>
    <span class="c">&lt;!-- 设定文件上传时写入内存的最大值，如果小于这个参数不会生成临时文件，默认为10240 --&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maxInMemorySize"</span> <span class="na">value=</span><span class="s">"40960"</span><span class="nt">&gt;&lt;/property&gt;</span>
    <span class="c">&lt;!-- 上传文件的临时路径 --&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"uploadTempDir"</span> <span class="na">value=</span><span class="s">"fileUpload/temp"</span><span class="nt">&gt;&lt;/property&gt;</span>
    <span class="c">&lt;!-- 延迟文件解析 --&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"resolveLazily"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<p>1.2 上传表单</p>

<p>要在 form 标签中加入 enctype=”multipart/form-data” 表示该表单要提交文件。</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"${pageContext.request.contextPath}/test/file-upload.do"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">enctype=</span><span class="s">"multipart/form-data"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">name=</span><span class="s">"file"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"提交"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>
<p>1.3 处理文件</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/file-upload"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">upload</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"file"</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">,</span>
<span class="err">　　　　　　</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpSession</span> <span class="n">session</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 文件不为空</span>
    <span class="k">if</span><span class="o">(!</span><span class="n">file</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
        <span class="c1">// 文件存放路径</span>
        <span class="nc">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">().</span><span class="na">getRealPath</span><span class="o">(</span><span class="s">"/"</span><span class="o">);</span>
        <span class="c1">// 文件名称</span>
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="k">new</span> <span class="nc">Date</span><span class="o">().</span><span class="na">getTime</span><span class="o">()+</span><span class="s">"_"</span><span class="o">+</span><span class="n">file</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">());</span>
        <span class="nc">File</span> <span class="n">destFile</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="n">path</span><span class="o">,</span><span class="n">name</span><span class="o">);</span>
        <span class="c1">// 转存文件</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">file</span><span class="o">.</span><span class="na">transferTo</span><span class="o">(</span><span class="n">destFile</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IllegalStateException</span> <span class="o">|</span> <span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="c1">// 访问的url</span>
        <span class="nc">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getScheme</span><span class="o">()</span> <span class="o">+</span> <span class="s">"://"</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getServerName</span><span class="o">()</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getServerPort</span><span class="o">()</span>
<span class="err">　　　　　　</span><span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getContextPath</span><span class="o">()</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>        
    <span class="nc">ModelAndView</span> <span class="n">mv</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ModelAndView</span><span class="o">();</span>
    <span class="n">mv</span><span class="o">.</span><span class="na">setViewName</span><span class="o">(</span><span class="s">"other/home"</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">mv</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>2 源码分析</p>

<p>CommonsMultipartResolver 实现了 MultipartResolver 接口，resolveMultipart() 方法如下所示，其中 resolveLazily 是判断是否要延迟解析文件（通过XML可以设置）。当 resolveLazily 为 flase 时，会立即调用 parseRequest() 方法对请求数据进行解析，然后将解析结果封装到 DefaultMultipartHttpServletRequest 中；而当 resolveLazily 为 true 时，会在 DefaultMultipartHttpServletRequest 的 initializeMultipart() 方法调用 parseRequest() 方法对请求数据进行解析，而 initializeMultipart() 方法又是被 getMultipartFiles() 方法调用，即当需要获取文件信息时才会去解析请求数据，这种方式用了懒加载的思想。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">MultipartHttpServletRequest</span> <span class="nf">resolveMultipart</span><span class="o">(</span><span class="kd">final</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">MultipartException</span> <span class="o">{</span>
    <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="s">"Request must not be null"</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">resolveLazily</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">//懒加载，当调用DefaultMultipartHttpServletRequest的getMultipartFiles()方法时才解析请求数据</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DefaultMultipartHttpServletRequest</span><span class="o">(</span><span class="n">request</span><span class="o">)</span> <span class="o">{</span>
            <span class="nd">@Override</span> <span class="c1">//当getMultipartFiles()方法被调用时，如果还未解析请求数据，则调用initializeMultipart()方法进行解析 protected void initializeMultipart() {</span>
                <span class="nc">MultipartParsingResult</span> <span class="n">parsingResult</span> <span class="o">=</span> <span class="n">parseRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
                <span class="n">setMultipartFiles</span><span class="o">(</span><span class="n">parsingResult</span><span class="o">.</span><span class="na">getMultipartFiles</span><span class="o">());</span>
                <span class="n">setMultipartParameters</span><span class="o">(</span><span class="n">parsingResult</span><span class="o">.</span><span class="na">getMultipartParameters</span><span class="o">());</span>
                <span class="n">setMultipartParameterContentTypes</span><span class="o">(</span><span class="n">parsingResult</span><span class="o">.</span><span class="na">getMultipartParameterContentTypes</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="c1">//立即解析请求数据，并将解析结果封装到DefaultMultipartHttpServletRequest对象中</span>
        <span class="nc">MultipartParsingResult</span> <span class="n">parsingResult</span> <span class="o">=</span> <span class="n">parseRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DefaultMultipartHttpServletRequest</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">parsingResult</span><span class="o">.</span><span class="na">getMultipartFiles</span><span class="o">(),</span>
              <span class="n">parsingResult</span><span class="o">.</span><span class="na">getMultipartParameters</span><span class="o">(),</span> <span class="n">parsingResult</span><span class="o">.</span><span class="na">getMultipartParameterContentTypes</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>在上面的代码中可以看到，对请求数据的解析工作是在 parseRequest() 方法中进行的，继续看一下 parseRequest() 方法源码</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protected</span> <span class="nc">MultipartParsingResult</span> <span class="nf">parseRequest</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">MultipartException</span> <span class="o">{</span>
    <span class="c1">// 获取请求的编码类型</span>
    <span class="nc">String</span> <span class="n">encoding</span> <span class="o">=</span> <span class="n">determineEncoding</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
    <span class="nc">FileUpload</span> <span class="n">fileUpload</span> <span class="o">=</span> <span class="n">prepareFileUpload</span><span class="o">(</span><span class="n">encoding</span><span class="o">);</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FileItem</span><span class="o">&gt;</span> <span class="n">fileItems</span> <span class="o">=</span> <span class="o">((</span><span class="nc">ServletFileUpload</span><span class="o">)</span> <span class="n">fileUpload</span><span class="o">).</span><span class="na">parseRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">parseFileItems</span><span class="o">(</span><span class="n">fileItems</span><span class="o">,</span> <span class="n">encoding</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(...)</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>在 parseRequest() 方法中，首先调用了 prepareFileUpload() 方法来根据编码类型确定一个 FileUpload 实例，然后利用这个 FileUpload 实例解析请求数据后得到文件信息，最后将文件信息解析成 CommonsMultipartFile (实现了 MultipartFile 接口) 并包装在 MultipartParsingResult 对象中。</p>

<p>二、StandardServletMultipartResolver</p>

<p>1 使用方式</p>

<p>1.1 配置文件</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"multipartResolver"</span> <span class="na">class=</span><span class="s">"org.springframework.web.multipart.support.StandardServletMultipartResolver"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>
<p>这里并没有配置文件大小等参数，这些参数的配置在 web.xml 中</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;servlet&gt;</span>
    <span class="nt">&lt;servlet-name&gt;</span>springmvc<span class="nt">&lt;/servlet-name&gt;</span>
    <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
    <span class="nt">&lt;init-param&gt;</span>  
        <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>  
        <span class="nt">&lt;param-value&gt;</span>classpath:springmvc.xml<span class="nt">&lt;/param-value&gt;</span>  
    <span class="nt">&lt;/init-param&gt;</span>  
    <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
    <span class="nt">&lt;multipart-config&gt;</span>
        <span class="c">&lt;!-- 临时文件的目录 --&gt;</span>
        <span class="nt">&lt;location&gt;</span>d:/<span class="nt">&lt;/location&gt;</span>
        <span class="c">&lt;!-- 上传文件最大2M --&gt;</span>
        <span class="nt">&lt;max-file-size&gt;</span>2097152<span class="nt">&lt;/max-file-size&gt;</span>
        <span class="c">&lt;!-- 上传文件整个请求不超过4M --&gt;</span>
        <span class="nt">&lt;max-request-size&gt;</span>4194304<span class="nt">&lt;/max-request-size&gt;</span>
    <span class="nt">&lt;/multipart-config&gt;</span>
<span class="nt">&lt;/servlet&gt;</span>
</code></pre></div></div>
<p>1.2 上传表单</p>

<p>要在 form 标签中加入 enctype=”multipart/form-data” 表示该表单要提交文件。</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">"${pageContext.request.contextPath}/test/file-upload.do"</span> <span class="na">method=</span><span class="s">"post"</span> <span class="na">enctype=</span><span class="s">"multipart/form-data"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">name=</span><span class="s">"file"</span><span class="nt">&gt;</span>
     <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"提交"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/form&gt;</span>
</code></pre></div></div>
<p>1.3 处理文件</p>

<p>1.3.1 通过 MultipartFile 类型的参数</p>

<p>复制代码
@RequestMapping(“/file-upload”)
public ModelAndView upload(@RequestParam(value = “file”, required = false) MultipartFile file,
　　　　　　HttpServletRequest request, HttpSession session) {
    // 文件不为空
    if(!file.isEmpty()) {
        // 文件存放路径
        String path = request.getServletContext().getRealPath(“/”);
        // 文件名称
        String name = String.valueOf(new Date().getTime()+”_“+file.getOriginalFilename());
        File destFile = new File(path,name);
        // 转存文件
        try {
            file.transferTo(destFile);
        } catch (IllegalStateException | IOException e) {
            e.printStackTrace();
        }
        // 访问的url
        String url = request.getScheme() + “://” + request.getServerName() + “:” + request.getServerPort()
　　　　　　+ request.getContextPath() + “/” + name;
    }      <br />
    ModelAndView mv = new ModelAndView();
    mv.setViewName(“other/home”);
    return mv;
}
复制代码
1.3.2 通过 MultipartHttpServletRequest 类型的参数</p>

<p>复制代码
@RequestMapping(“/file-upload”)
public ModelAndView upload(MultipartHttpServletRequest request, HttpSession session) {
    // 根据页面input标签的name
    MultipartFile file = request.getFile(“file”);
    // 文件不为空
    if(!file.isEmpty()) {
        // 文件存放路径
        String path = request.getServletContext().getRealPath(“/”);
        // 文件名称
        String name = String.valueOf(new Date().getTime()+”_“+file.getOriginalFilename());
        File destFile = new File(path,name);
        // 转存文件
        try {
            file.transferTo(destFile);
        } catch (IllegalStateException | IOException e) {
            e.printStackTrace();
        }
        // 访问的url
        String url = request.getScheme() + “://” + request.getServerName() + “:” + request.getServerPort()
　　　　　　+ request.getContextPath() + “/” + name;
    }      <br />
    ModelAndView mv = new ModelAndView();
    mv.setViewName(“other/home”);
    return mv;
}
复制代码
2 源码分析</p>

<p>StandardServletMultipartResolver 实现了 MultipartResolver 接口，resolveMultipart() 方法如下所示，其中 resolveLazily 是判断是否要延迟解析文件（通过XML可以设置）。</p>

<p>复制代码
public MultipartHttpServletRequest resolveMultipart(HttpServletRequest request) throws MultipartException {
    return new StandardMultipartHttpServletRequest(request, this.resolveLazily);
}
public StandardMultipartHttpServletRequest(HttpServletRequest request, boolean lazyParsing) throws MultipartException {
    super(request);
    // 判断是否立即解析
    if (!lazyParsing) {
        parseRequest(request);
    }
}
复制代码
对请求数据的解析工作是在 parseRequest() 方法中进行的，继续看一下 parseRequest() 方法源码</p>

<p>复制代码
private void parseRequest(HttpServletRequest request) {
    try {
        Collection<Part> parts = request.getParts();
        this.multipartParameterNames = new LinkedHashSet<String>(parts.size());
        MultiValueMap&lt;String, MultipartFile&gt; files = new LinkedMultiValueMap&lt;String, MultipartFile&gt;(parts.size());
        for (Part part : parts) {
            String disposition = part.getHeader(CONTENT_DISPOSITION);
            String filename = extractFilename(disposition);
            if (filename == null) {
                filename = extractFilenameWithCharset(disposition);
            }
            if (filename != null) {
                files.add(part.getName(), new StandardMultipartFile(part, filename));
            } else {
                this.multipartParameterNames.add(part.getName());
            }
        }
        setMultipartFiles(files);
    } catch (Throwable ex) {}
}
复制代码
parseRequest() 方法利用了 servlet3.0 的 request.getParts() 方法获取上传文件，并将其封装到 MultipartFile 对象中。</String></Part></p>
:ET