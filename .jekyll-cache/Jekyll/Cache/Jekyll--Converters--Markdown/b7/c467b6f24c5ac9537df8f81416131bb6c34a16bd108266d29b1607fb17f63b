I"!<h2 id="题目-704-二分查找">题目 <a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h2>
<p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p>

<h2 id="示例">示例</h2>
<h3 id="示例-1">示例 1:</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: nums = [-1,0,3,5,9,12], target = 9
输出: 4
解释: 9 出现在 nums 中并且下标为 4
</code></pre></div></div>
<h3 id="示例2">示例 2:</h3>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>输入: nums = [-1,0,3,5,9,12], target = 2
输出: -1
解释: 2 不存在 nums 中因此返回 -1
 ```

### 提示：
</code></pre></div></div>
<p>你可以假设 nums 中的所有元素是不重复的。
n 将在 [1, 10000]之间。
nums 的每个元素都将在 [-9999, 9999]之间。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
## 思路 二分法
```java
class Solution {
    public int search(int[] nums, int target) {
        int l = 0;
        int r = nums.length;
        while(l&lt;r) {
            int m = l+(r-l)/2;
            if (nums[m]==target) return m;
            if (nums[m]&gt;target) r=m;
            else l=m+1;
        }
        return -1;
    }
}
</code></pre></div></div>

<h2 id="知识点-二分法">知识点 二分法</h2>
<p>最明显的题目就是 <a href="https://blog.csdn.net/fuxuemingzhu/article/details/83273084">34. Find First and Last Position of Element in Sorted Array</a></p>

<p>花花酱的二分查找专题视频：https://www.youtube.com/watch?v=v57lNF2mb_s</p>

<p>模板：</p>

<p>区间定义：<strong>[l, r) 左闭右开</strong></p>

<p>其中f(m)函数代表找到了满足条件的情况，有这个条件的判断就返回对应的位置，如果没有这个条件的判断就是lowwer_bound和higher_bound.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">binary_search</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">r</span><span class="p">):</span>
    <span class="k">while</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">l</span> <span class="o">+</span> <span class="p">(</span><span class="n">r</span> <span class="o">-</span> <span class="n">l</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">f</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>    <span class="c1"># 判断找了没有，optional
</span>            <span class="k">return</span> <span class="n">m</span>
        <span class="k">if</span> <span class="n">g</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">m</span>   <span class="c1"># new range [l, m)
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">l</span> <span class="o">=</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span> <span class="c1"># new range [m+1, r)
</span>    <span class="k">return</span> <span class="n">l</span>    <span class="c1"># or not found
</span></code></pre></div></div>

<p><strong>lower bound</strong>: find index of i, such that A[i] &gt;= x</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">lowwer_bound</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="c1"># find in range [left, right)
</span>    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
    <span class="k">return</span> <span class="n">left</span>
</code></pre></div></div>

<p><strong>upper bound</strong> :  find index of i, such that A[i] &gt; x</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">higher_bound</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="c1"># find in range [left, right)
</span>    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">:</span>
        <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">target</span><span class="p">:</span>
            <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span>
    <span class="k">return</span> <span class="n">left</span>
</code></pre></div></div>
:ET