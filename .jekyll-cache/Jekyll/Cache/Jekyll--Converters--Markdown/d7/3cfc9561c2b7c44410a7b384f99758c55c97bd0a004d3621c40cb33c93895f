I"6m<h4 id="简介">简介</h4>

<p>ThreadLocal是用来处理多线程并发问题的一种解决方案。ThreadLocal是的作用是提供线程的局部变量，在多线程并发环境下，提供了与其他线程隔离的局部变量。通常这样的设计的情况是因为这个局部变量是不适合放在全局变量进行同步处理的。</p>
<h4 id="应用场景">应用场景</h4>

<p>在Service中，怎么获取当前登录用户信息？
最简单的将用户信息存到session中，controller层将session中存的用户信息取出，再作为方法参数传到service层。但是这样做的话，太low了。</p>
<h4 id="分析">分析</h4>

<p>ThreadLocal类，它是在当前线程（Thread.currentThread()）的ThreadLocalMap对象中添加值，key为ThreadLocal对象，也就是说ThreadLocal类用来提供线程内部的局部变量。我们都知道Http请求就是一个线程，只要我们在这个线程中，添加了我们想要的request、session对象，那么响应服务器请求的Controller、Service、Dao等这些层面的代码不就都可以通过当前线程（Thread.currentThread()）取出request、session对象了！但是我们怎么在请求到Controller等Control控制器之前，添加这些信息呢？很容易我们想到了Filter过滤器或者Interceptor拦截器，因为Http请求会调用Filter的doFilter或者Interceptor的preHandle进行处理，是在同一个线程中，可以在Filter或者Interceptor中用ThreadLocal来实现！
ThreadLocal的核心get方法：</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="no">T</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
        <span class="nc">ThreadLocalMap</span> <span class="n">map</span> <span class="o">=</span> <span class="n">getMap</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">ThreadLocalMap</span><span class="o">.</span><span class="na">Entry</span> <span class="n">e</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">getEntry</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"unchecked"</span><span class="o">)</span>
                <span class="no">T</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="no">T</span><span class="o">)</span><span class="n">e</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
                <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nf">setInitialValue</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>
<h4 id="实战interceptor实现方案">实战（Interceptor实现方案）</h4>

<h5 id="1自定义basecontexthandler类">1.自定义BaseContextHandler类：</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">io.fredia.femicro.common.context</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertEquals</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.mockito.runners.MockitoJUnitRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.constant.CommonConstants</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.util.StringHelper</span><span class="o">;</span>

<span class="cm">/**
 * 上下文处理基类
 *
 * @author : Fredia
 * @since : 2018年6月1日
 * @version : v1.0.0
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseContextHandler</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">threadLocal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThreadLocal</span><span class="o">&lt;</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">threadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;();</span>
            <span class="n">threadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Object</span> <span class="nf">get</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">){</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="n">threadLocal</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">map</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;();</span>
            <span class="n">threadLocal</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getUserID</span><span class="o">(){</span>
        <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USER_ID</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">returnObjectValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getUsername</span><span class="o">(){</span>
        <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USERNAME</span><span class="o">);</span>
        <span class="k">return</span> <span class="nf">returnObjectValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">(){</span>
        <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USER_NAME</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">StringHelper</span><span class="o">.</span><span class="na">getObjectValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getToken</span><span class="o">(){</span>
        <span class="nc">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">get</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USER_TOKEN</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">StringHelper</span><span class="o">.</span><span class="na">getObjectValue</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">token</span><span class="o">){</span><span class="n">set</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USER_TOKEN</span><span class="o">,</span><span class="n">token</span><span class="o">);}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span><span class="n">set</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USER_NAME</span><span class="o">,</span><span class="n">name</span><span class="o">);}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setUserID</span><span class="o">(</span><span class="nc">String</span> <span class="n">userID</span><span class="o">){</span>
        <span class="n">set</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USER_ID</span><span class="o">,</span><span class="n">userID</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setUsername</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">){</span>
        <span class="n">set</span><span class="o">(</span><span class="nc">CommonConstants</span><span class="o">.</span><span class="na">CONTEXT_KEY_USERNAME</span><span class="o">,</span><span class="n">username</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">returnObjectValue</span><span class="o">(</span><span class="nc">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">==</span><span class="kc">null</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="n">value</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">remove</span><span class="o">(){</span>
        <span class="n">threadLocal</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h5 id="2自定义userauthrestinterceptor拦截器">2.自定义UserAuthRestInterceptor拦截器</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">io.fredia.femicro.auth.client.interceptor</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.Cookie</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.apache.commons.lang3.StringUtils</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.Logger</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.slf4j.LoggerFactory</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.method.HandlerMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.servlet.handler.HandlerInterceptorAdapter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.fredia.femicro.auth.client.annotation.IgnoreUserToken</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.auth.client.config.UserAuthConfig</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.auth.client.jwt.UserAuthUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.auth.common.util.jwt.IJWTInfo</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.context.BaseContextHandler</span><span class="o">;</span>

<span class="cm">/**
 * 用户授权拦截器
 *
 * @author : Fredia
 * @since : 2018年3月16日
 * @version : v1.0.0
 */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserAuthRestInterceptor</span> <span class="kd">extends</span> <span class="nc">HandlerInterceptorAdapter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">UserAuthRestInterceptor</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">UserAuthUtil</span> <span class="n">userAuthUtil</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">UserAuthConfig</span> <span class="n">userAuthConfig</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">HandlerMethod</span> <span class="n">handlerMethod</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HandlerMethod</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
        <span class="c1">//此处为业务代码，可以忽略</span>
        <span class="nc">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="n">userAuthConfig</span><span class="o">.</span><span class="na">getTokenHeader</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">StringUtils</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">(</span><span class="n">token</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="nc">Cookie</span> <span class="n">cookie</span> <span class="o">:</span> <span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">cookie</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">userAuthConfig</span><span class="o">.</span><span class="na">getTokenHeader</span><span class="o">()))</span> <span class="o">{</span>
                        <span class="n">token</span> <span class="o">=</span> <span class="n">cookie</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">IJWTInfo</span> <span class="n">infoFromToken</span> <span class="o">=</span> <span class="n">userAuthUtil</span><span class="o">.</span><span class="na">getInfoFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="c1">//上下文属性保存</span>
        <span class="nc">BaseContextHandler</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">infoFromToken</span><span class="o">.</span><span class="na">getUniqueName</span><span class="o">());</span>
        <span class="nc">BaseContextHandler</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">infoFromToken</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="nc">BaseContextHandler</span><span class="o">.</span><span class="na">setUserID</span><span class="o">(</span><span class="n">infoFromToken</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">preHandle</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterCompletion</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">handler</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="c1">//上下文属性值清除，防止内存泄漏</span>
        <span class="nc">BaseContextHandler</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">afterCompletion</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handler</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>回顾一下基础知识：</p>

<p><strong>preHandle</strong>：预处理回调方法，实现处理器的预处理（如登录检查），第三个参数为响应的处理器；</p>
<ul>
  <li>返回值：  <br />
  true表示继续流程（如调用下一个拦截器或处理器）；  <br />
  false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；</li>
</ul>

<p><strong>postHandle</strong>：后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过<code class="highlighter-rouge">modelAndView</code>（模型和视图对象）对模型数据进行处理或对视图进行处理，<code class="highlighter-rouge">modelAndView</code>也可能为null。 <br />
<strong>afterCompletion</strong>：整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于<code class="highlighter-rouge">try-catch-finally</code>中的<code class="highlighter-rouge">finally</code>，但仅调用处理器执行链中preHandle返回true的拦截器的afterCompletion。</p>

<h5 id="3controller使用threadlocal工具">3.Controller使用ThreadLocal工具</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">io.fredia.femicro.common.rest</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.PathVariable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestBody</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestParam</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.biz.BaseBiz</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.context.BaseContextHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.msg.ObjectRestResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.msg.TableResultResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.fredia.femicro.common.util.Query</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="cm">/**
 * controller基类
 *
 * @author : Fredia
 * @since : 2018年6月1日
 * @version : v1.0.0
 */</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BaseController</span><span class="o">&lt;</span><span class="nc">Biz</span> <span class="kd">extends</span> <span class="nc">BaseBiz</span><span class="o">,</span><span class="nc">Entity</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCurrentUserName</span><span class="o">(){</span>
        <span class="k">return</span> <span class="nc">BaseContextHandler</span><span class="o">.</span><span class="na">getUsername</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h5 id="4总结">4.总结</h5>

<p>实现一个功能有N种方案，我们可以选择低耦合的方法去实现，在保证效率的情况下，也要考虑性能问题。threadlocal实现简单，但是它和io很像，如果数据量大，它所占用的内存空间无法释放会导致内存泄漏，毕竟不自带内存生命周期管理的一切都要慎重使用。</p>
:ET