I"UZ<h2 id="jpaspecificationexecutor接口该接口提供了如下一些方法">JpaSpecificationExecutor接口，该接口提供了如下一些方法：</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">JpaSpecificationExecutor</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="no">T</span> <span class="nf">findOne</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">);</span><span class="c1">//根据sql获取单个对象数据</span>

    <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">);</span><span class="c1">//根据sql查询所有数据</span>

    <span class="nc">Page</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">,</span> <span class="nc">Pageable</span> <span class="n">pageable</span><span class="o">);</span><span class="c1">//根据sql分页查询数据</span>

    <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">,</span> <span class="nc">Sort</span> <span class="n">sort</span><span class="o">);</span> <span class="c1">//根据sql查询数据，并根据参数进行排序</span>

    <span class="kt">long</span> <span class="nf">count</span><span class="o">(</span><span class="nc">Specification</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">spec</span><span class="o">);</span> <span class="c1">//根据sql查询数据总数</span>
<span class="o">}</span>
</code></pre></div></div>
<h2 id="sort-的构造函数如下">Sort 的构造函数如下</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//可以输入多个Sort.Order对象，在进行多个值排序时有用</span>
<span class="kd">public</span> <span class="nf">Sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Order</span><span class="o">...</span> <span class="n">orders</span><span class="o">);</span>

<span class="c1">//和上面的方法一样，无非把多个参数换成了一个List</span>
<span class="kd">public</span> <span class="nf">Sort</span><span class="o">(</span><span class="nc">List</span> <span class="n">orders</span><span class="o">);</span>

<span class="c1">//当排序方向固定时，使用这个比较方便，第一个参数是排序方向，第二个开始就是排序的字段.</span>
<span class="kd">public</span> <span class="nf">Sort</span><span class="o">(</span><span class="nc">Sort</span><span class="o">.</span><span class="na">Direction</span> <span class="n">direction</span><span class="o">,</span> <span class="nc">String</span><span class="o">...</span> <span class="n">properties</span><span class="o">);</span>

<span class="c1">//第一个参数是排序方向,还有一个方法第二个参数是list，原理相同</span>
<span class="kd">public</span> <span class="nf">Sort</span><span class="o">(</span><span class="nc">Direction</span> <span class="n">direction</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">properties</span><span class="o">);</span>
</code></pre></div></div>

<h2 id="pageable-是一个接口提供了分页一组方法的声明如第几页每页多少条记录排序信息等">Pageable 是一个接口，提供了分页一组方法的声明，如第几页，每页多少条记录，排序信息等</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">getPageNumber</span><span class="o">();</span>

<span class="kt">int</span> <span class="nf">getPageSize</span><span class="o">();</span>

<span class="kt">int</span> <span class="nf">getOffset</span><span class="o">();</span>

<span class="nc">Sort</span> <span class="nf">getSort</span><span class="o">();</span>

<span class="nc">Pageable</span> <span class="nf">next</span><span class="o">();</span>

<span class="nc">Pageable</span> <span class="nf">previousOrFirst</span><span class="o">();</span>

<span class="nc">Pageable</span> <span class="nf">first</span><span class="o">();</span>

<span class="kt">boolean</span> <span class="nf">hasPrevious</span><span class="o">();</span>
</code></pre></div></div>

<h2 id="pagerequest-它是-pageable-的实现类它提供三个构造方法">PageRequest  它是 Pageable 的实现类，它提供三个构造方法</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//这个构造方法构造出来的分页对象不具备排序功能</span>
<span class="kd">public</span> <span class="nf">PageRequest</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="o">(</span><span class="nc">Sort</span><span class="o">)</span><span class="kc">null</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//Direction和properties用来做排序操作</span>
<span class="kd">public</span> <span class="nf">PageRequest</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="nc">Direction</span> <span class="n">direction</span><span class="o">,</span> <span class="nc">String</span><span class="o">...</span> <span class="n">properties</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Sort</span><span class="o">(</span><span class="n">direction</span><span class="o">,</span> <span class="n">properties</span><span class="o">));</span>
<span class="o">}</span>
<span class="c1">//此构造方法是自定义一个排序的操作</span>
<span class="kd">public</span> <span class="nf">PageRequest</span><span class="o">(</span><span class="kt">int</span> <span class="n">page</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">,</span> <span class="nc">Sort</span> <span class="n">sort</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">page</span><span class="o">,</span> <span class="n">size</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">sort</span> <span class="o">=</span> <span class="n">sort</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Spring Data Jpa 支持 Criteria 查询方式，使用这种方式需要继承JpaSpecificationExecutor，通过实现 Specification
中的 toPredicate方法来定义动态查询，通过 CriteriaBuilder 来创建查询条件</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">specification</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Specification</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;(){</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Predicate</span> <span class="nf">toPredicate</span><span class="o">(</span><span class="nc">Root</span><span class="o">&lt;</span><span class="nc">MessageItem</span><span class="o">&gt;</span> <span class="n">root</span><span class="o">,</span> <span class="nc">CriteriaQuery</span><span class="o">&lt;?&gt;</span> <span class="n">query</span><span class="o">,</span> <span class="nc">CriteriaBuilder</span> <span class="n">cb</span><span class="o">){</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Predicate</span><span class="o">&gt;</span> <span class="n">predicates</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Predicate</span><span class="o">&gt;();</span>
    <span class="c1">//root.get("name")表示获取name这个字段名称,like表示执行like查询,%zt%表示值</span>
    <span class="nc">Predicate</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span> <span class="s">"%ray%"</span><span class="o">);</span>
    <span class="nc">Predicate</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">greaterThan</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"rid"</span><span class="o">),</span><span class="s">"3"</span><span class="o">);</span>
    <span class="c1">//将两个查询条件联合起来之后返回Predicate对象</span>
     <span class="c1">//建立子查询</span>
     <span class="c1">//构建criteriaQuery对象</span>
    <span class="nc">CriteriaQuery</span><span class="o">&lt;</span><span class="nc">Organization</span><span class="o">&gt;</span> <span class="n">criteriaQuery</span>  <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="nc">Organization</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="c1">//获取子查询Subquery对象</span>
    <span class="nc">Subquery</span><span class="o">&lt;</span><span class="nc">Organization</span><span class="o">&gt;</span> <span class="n">organizationSubQuery</span> <span class="o">=</span> <span class="n">criteriaQuery</span><span class="o">.</span><span class="na">subquery</span><span class="o">(</span><span class="nc">Organization</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="c1">//构建新的子查询字段Mapping对象</span>
    <span class="nc">Root</span><span class="o">&lt;</span><span class="nc">Organization</span><span class="o">&gt;</span> <span class="n">organizationSubRoot</span> <span class="o">=</span>         <span class="n">organizationubQuery</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">Organization</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="c1">//相当于sql中的select *，如需获取一个字段可以使用organizationSubRoot.get("字段").as(String.class).</span>
    <span class="n">organizationSubQuery</span><span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">organizationSubRoot</span><span class="o">);</span>
    <span class="nc">Predicate</span> <span class="n">subqueryPredicate</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">organizationSubRoot</span> <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"rid"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">),</span> <span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"rid"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">),</span>
    <span class="n">cb</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">organizationSubRoot</span> <span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"orgName"</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">),</span><span class="s">"部门名称"</span><span class="o">))</span><span class="err">；</span>
    <span class="c1">//构建where条件</span>
    <span class="n">organizationSubQuery</span> <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">subqueryPredicate</span><span class="o">);</span>
    <span class="c1">// exists的使用</span>
    <span class="nc">Predicate</span> <span class="n">p3</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">exists</span><span class="o">(</span><span class="n">organizationSubQuery</span><span class="o">);</span>
    <span class="c1">//相当于select rid,name...</span>
    <span class="n">query</span><span class="o">.</span><span class="na">multiselect</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"rid"</span><span class="o">),</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
    <span class="nc">Predicate</span> <span class="n">p4</span> <span class="o">=</span> <span class="n">cb</span><span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">p1</span><span class="o">,</span><span class="n">p2</span><span class="o">,</span><span class="n">p3</span><span class="o">);</span>
    <span class="n">predicates</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">p4</span><span class="o">)</span>
    <span class="k">return</span> <span class="n">query</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">predicates</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span>     <span class="nc">Predicate</span><span class="o">[</span><span class="n">predicates</span><span class="o">.</span><span class="na">size</span><span class="o">()])).</span><span class="na">getRestriction</span><span class="o">();</span>

    <span class="o">}</span>
<span class="o">};</span>
</code></pre></div></div>

<p>利用JpaSpecificationExecutor的findAl方法进行分页查询，例子如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">(</span><span class="nc">Direction</span><span class="o">.</span><span class="na">ASC</span><span class="o">,</span><span class="s">"name"</span><span class="o">);</span>
<span class="nc">Sort</span> <span class="n">sort</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sort</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
<span class="nc">Pageable</span> <span class="n">pageable</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PageRequest</span><span class="o">(</span><span class="n">page</span><span class="o">,</span><span class="n">size</span><span class="o">,</span><span class="n">sort</span><span class="o">);</span><span class="c1">//page从0开始</span>
<span class="nc">Page</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">resutls</span> <span class="o">=</span> <span class="nc">UserDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="n">specification</span><span class="o">,</span> <span class="n">pageable</span><span class="o">);</span>
</code></pre></div></div>

<p>PS:其中UserDao需要继承JpaSpecificationExecutor和Repository接口。</p>

<p>其实也可以定义多个 Specification，然后通过 Specifications 对象将其连接起来,复杂sql可以这样做，使代码不会这么臃肿。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//第一个Specification定义了两个or的组合</span>
<span class="nc">Specification</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Specification</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Predicate</span> <span class="nf">toPredicate</span><span class="o">(</span><span class="nc">Root</span> <span class="n">root</span><span class="o">,</span> <span class="nc">CriteriaQuery</span> <span class="n">criteriaQuery</span><span class="o">,</span> <span class="nc">CriteriaBuilder</span> <span class="n">criteriaBuilder</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Predicate</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">criteriaBuilder</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"rid"</span><span class="o">),</span><span class="s">"2"</span><span class="o">);</span>
        <span class="nc">Predicate</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">criteriaBuilder</span><span class="o">.</span><span class="na">equal</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"rid"</span><span class="o">),</span><span class="s">"3"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">criteriaBuilder</span><span class="o">.</span><span class="na">or</span><span class="o">(</span><span class="n">p1</span><span class="o">,</span><span class="n">p2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>
<span class="c1">//第二个Specification定义了两个or的组合</span>
<span class="nc">Specification</span> <span class="n">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Specification</span><span class="o">()</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Predicate</span> <span class="nf">toPredicate</span><span class="o">(</span><span class="nc">Root</span> <span class="n">root</span><span class="o">,</span> <span class="nc">CriteriaQuery</span> <span class="n">criteriaQuery</span><span class="o">,</span> <span class="nc">CriteriaBuilder</span> <span class="n">criteriaBuilder</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Predicate</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">criteriaBuilder</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span><span class="s">"r%"</span><span class="o">);</span>
        <span class="nc">Predicate</span> <span class="n">p2</span> <span class="o">=</span> <span class="n">criteriaBuilder</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span><span class="s">"a%"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">criteriaBuilder</span><span class="o">.</span><span class="na">or</span><span class="o">(</span><span class="n">p1</span><span class="o">,</span><span class="n">p2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>
<span class="c1">//通过Specifications将两个Specification连接起来，第一个条件加where，第二个是and</span>
<span class="nc">List</span> <span class="n">userList</span><span class="o">=</span> <span class="nc">UserDao</span><span class="o">.</span><span class="na">findAll</span><span class="o">(</span><span class="nc">Specifications</span><span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">s1</span><span class="o">).</span><span class="na">and</span><span class="o">(</span><span class="n">s2</span><span class="o">));</span>
</code></pre></div></div>

<p>这个代码生成的 SQL 是</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">t_user</span> <span class="k">where</span> <span class="p">(</span><span class="n">rid</span><span class="o">=</span><span class="s1">'2'</span> <span class="k">or</span> <span class="n">rid</span><span class="o">=</span><span class="s1">'3'</span><span class="p">)</span> <span class="k">and</span> <span class="p">(</span><span class="n">name</span> <span class="k">like</span> <span class="s1">'r%'</span> <span class="k">or</span> <span class="n">name</span> <span class="k">like</span> <span class="s1">'a%'</span><span class="p">);</span>
</code></pre></div></div>
:ET