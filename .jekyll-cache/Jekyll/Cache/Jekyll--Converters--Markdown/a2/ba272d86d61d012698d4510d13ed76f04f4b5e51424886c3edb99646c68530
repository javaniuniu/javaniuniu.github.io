I"bk<p><a href="https://github.com/minplemon/springboot-buckets/tree/master/springboot-jpa">Github源码地址</a></p>

<h4 id="一句话简介">一句话简介</h4>
<p>Java Persistence API定义了一种定义，可以将常规的普通Java对象（有时被称作POJO）映射到数据库</p>

<h4 id="映射规则">映射规则：</h4>
<ol>
  <li>实体类__必须__用 @javax.persistence.<strong>Entity</strong> 进行注解；</li>
  <li><strong>必须__使用 @javax.persistence.__Id</strong> 来注解一个主键；</li>
  <li>实体类必须拥有一个 <strong>public 或者 protected</strong> 的 <strong>无参</strong> 构造函数，之外实体类还可以拥有其他的构造函数；</li>
  <li>实体类必须是一个 <strong>顶级类</strong>（top-level class）。一个枚举（enum）或者一个接口（interface）不能被注解为一个实体；</li>
  <li>实体类不能是 <strong>final</strong> 类型的，也 <strong>不能有 final</strong> 类型的方法；</li>
  <li>如果实体类的一个实例需要用传值的方式调用（例如，远程调用），则这个实体类必须实现（implements）java.io.Serializable 接口。 <br />
不与@Table结合的话 表名 默认为 SnakeCaseStrategy(命名策略 )为表名<br />
若使用 name属性 且没有与@Table结合 则表名为 name值的SnakeCaseStrategy(命名策略 )
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Entity  
public class UserEntity{...} 表名 user_entity  
@Entity(name="UE")  
public class UserEntity{...} 表名 ue  
@Entity(name="UsEntity")  
public class UserEntity{...} 表名 us_entity
</code></pre></div>    </div>
    <h4 id="映射规则可以通过使用-table-和-column-注解修改">映射规则可以通过使用 @Table 和 @Column 注解修改</h4>
    <h5 id="table">@Table</h5>
    <ul>
      <li>@Table注解的常用选项是 name，用于指明数据库的表名</li>
      <li>@Table注解还有两个选项 catalog 和 schema 用于设置表所属的数据库目录或模式，通常为数据库名</li>
    </ul>
  </li>
</ol>

<h5 id="column">@Column</h5>
<p>@Column注解用来改变class中字段名与db中表的字段名的映射规则</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Column注释定义了将成员属性映射到关系表中的哪一列和该列的结构信息，属性如下：
　　1）name：映射的列名。如：映射tbl_user表的name列，可以在name属性的上面或getName方法上面加入；
　　2）unique：是否唯一；
　　3）nullable：是否允许为空；
　　4）length：对于字符型列，length属性指定列的最大字符长度；
　　5）insertable：是否允许插入；
　　6）updatetable：是否允许更新；
　　7）columnDefinition：定义建表时创建此列的DDL；
　　8）secondaryTable：从表名。如果此列不建在主表上（默认是主表），该属性定义该列所在从表的名字
</code></pre></div></div>

<h4 id="hibernate中entity和table的区别">hibernate中@Entity和@Table的区别：</h4>
<p>@Entity说明这个class是实体类，并且使用默认的orm规则，即class名即数据库表中表名，class字段名即表中的字段名
如果想改变这种默认的orm规则，就要使用@Table来改变class名与数据库中表名的映射规则，@Column来改变class中字段名与db中表的字段名的映射规则</p>

<h4 id="mappedsuperclass和entity的区别">@MappedSuperclass和@Entity的区别</h4>
<h5 id="使用场景">使用场景</h5>
<p>数据库表中都需要id来表示编号，id是这些映射实体类的通用的属性，交给jpa统一生成主键id编号，那么使用一个父类来封装这些通用属性，并用@MappedSuperclas标识。</p>

<h5 id="示例">示例</h5>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">IdEntity</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">Integer</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Integer</span> <span class="nf">getId</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">id</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@MappedSuperclass</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="kd">extends</span> <span class="nc">IdEntity</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="o">)</span>   
    <span class="kd">public</span> <span class="nc">Integer</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">id</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Integer</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"yyw_user"</span><span class="o">)</span>
<span class="nd">@Cache</span><span class="o">(</span><span class="n">usage</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">annotations</span><span class="o">.</span><span class="na">CacheConcurrencyStrategy</span><span class="o">.</span><span class="na">READ_WRITE</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="o">,</span><span class="n">nullable</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="o">,</span><span class="n">nullable</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(){}</span>
    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">();</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setPassword</span><span class="o">(</span><span class="nc">String</span> <span class="n">password</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="n">password</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"User [name="</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">", id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", password="</span> <span class="o">+</span> <span class="n">password</span>
                <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"yyw_subjects"</span><span class="o">)</span>
<span class="nd">@Cache</span><span class="o">(</span><span class="n">usage</span><span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">annotations</span><span class="o">.</span><span class="na">CacheConcurrencyStrategy</span><span class="o">.</span><span class="na">READ_WRITE</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Subject</span> <span class="kd">extends</span> <span class="nc">BaseEntity</span> <span class="o">{</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">length</span><span class="o">=</span><span class="mi">20</span><span class="o">,</span><span class="n">nullable</span><span class="o">=</span><span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Subject</span><span class="o">(){}</span>
    <span class="kd">public</span> <span class="nf">Subject</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setContent</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Subject [id="</span> <span class="o">+</span> <span class="n">id</span> <span class="o">+</span> <span class="s">", content="</span> <span class="o">+</span> <span class="n">content</span> <span class="o">+</span> <span class="s">"]"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="注意">注意:</h5>
<ol>
  <li>标注为@MappedSuperclass的类将不是一个完整的实体类，他将 <strong>不会映射到数据库表</strong>，但是 <strong>他的属性都将映射到其子类的数据库字段中</strong>。</li>
  <li>标注为@MappedSuperclass的类 <strong>不能再标注@Entity或@Table注解</strong>，也 <strong>无需实现序列化接口</strong>。</li>
</ol>

<h4 id="secondarytable-的使用">@SecondaryTable 的使用</h4>
<p>将一个实体类映射到数据库 <strong>两张或更多表</strong> 中呢表中</p>

<h5 id="示例-1">示例</h5>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
 <span class="nd">@SecondaryTables</span><span class="o">({</span>
    <span class="nd">@SecondaryTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Address"</span><span class="o">),</span>
    <span class="nd">@SecondaryTable</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"Comments"</span><span class="o">)</span>
 <span class="o">})</span>
 <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Forum</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"Address"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">street</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"Address"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">city</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"Address"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">conutry</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"Comments"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"Comments"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nc">Comments</span><span class="o">;</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">table</span> <span class="o">=</span> <span class="s">"Comments"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">comments_length</span><span class="o">;</span>

    <span class="c1">// Getters and Setters</span>
 <span class="o">}</span>
</code></pre></div></div>

<h5 id="er图">ER图</h5>
<p><img src="/assets/images/java_code_design_data/280044-20161224100845886-614588432.jpg" alt="图片pic1" /></p>

<h4 id="其他注解">其他注解</h4>
<h5 id="manytoone-多对一单向不产生中间表但可以用joincolumnname--来指定生成外键的名字外键在多的一方表中产生">@ManyToOne （多对一）单向：不产生中间表，但可以用@Joincolumn（name=”  “）来指定生成外键的名字，外键在多的一方表中产生</h5>
<h5 id="onetomany-一对多单向会产生中间表此时可以用onetomany-joincolumnname-避免产生中间表并且指定了外键的名字别看joincolumn在一中写着但它存在在多的那个表中通常配合list-一起使用">@OneToMany （一对多）单向：会产生中间表，此时可以用@onetoMany @Joincolumn（name=” “）避免产生中间表，并且指定了外键的名字（别看@joincolumn在一中写着，但它存在在多的那个表中,通常配合List 一起使用）</h5>
<h5 id="onetomanymanytoone双向两个注解一起用的如果不在onetomany中加mappedy属性就会产生中间表此时通常在manytoone的注解下再添上注解joincolumnname-来指定外键的名字说明多的一方为关系维护端关系维护端负责外键记录的更新关系被维护端没有权利更新外键记录onetomanymappedby一对多中多中一的属性出现mapby为被维护端默认为延迟加载">@OneToMany ,@ManyToOne 双向（两个注解一起用的）：如果不在@OneToMany中加mappedy属性就会产生中间表，此时通常在@ManyToOne的注解下再添上注解@Joincolumn(name=” “)来指定外键的名字(说明：多的一方为关系维护端，关系维护端负责外键记录的更新，关系被维护端没有权利更新外键记录)！（@OneToMany(mappedBy=”一对多中，多中一的属性”)出现mapby为被维护端|||默认为延迟加载)</h5>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//用例：</span>
<span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span><span class="o">=</span><span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
<span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"child_id"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">OrderChild</span> <span class="n">orderChild</span><span class="o">;</span>

<span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span><span class="o">=</span><span class="s">"orderChild"</span><span class="o">,</span><span class="n">fetch</span><span class="o">=</span><span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span><span class="n">cascade</span><span class="o">={</span><span class="nc">CascadeType</span><span class="o">.</span><span class="na">MERGE</span><span class="o">})</span>
<span class="nd">@NotFound</span><span class="o">(</span><span class="n">action</span><span class="o">=</span><span class="nc">NotFoundAction</span><span class="o">.</span><span class="na">IGNORE</span><span class="o">)</span><span class="c1">//代表可以为空，允许为null</span>
<span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">OrderChildGoods</span><span class="o">&gt;</span> <span class="n">goodsList</span><span class="o">;</span>
<span class="c1">//hibernate中@ManyToOne默认是立即加载，@OneToMany默认是懒加载</span>

<span class="c1">//但是如果加上了@NotFound之后设置的fetch=FetchType.LAZY是不起作用的，也就是设置@NotFound后变为了立即加载eager</span>
</code></pre></div></div>
<h5 id="joincolumn">@JoinColumn</h5>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ManyToOne</span> <span class="c1">//多个公告对于一个管理员</span>
<span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">columnDefinition</span><span class="o">=</span><span class="s">"BIGINT(20) NOT NULL COMMENT '创建管理员ID'"</span><span class="o">)</span>
<span class="c1">//JoinColumn 不添加name属性，按照生成数据库字段的规则_id 数据库中字段 create_admin_id</span>
<span class="kd">private</span> <span class="nc">Admin</span> <span class="n">createAdmin</span><span class="o">;</span>
</code></pre></div></div>
<h5 id="lob-大对象存储类型">@Lob 大对象存储类型</h5>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Lob</span>
<span class="nd">@Column</span><span class="o">(</span><span class="n">columnDefinition</span> <span class="o">=</span> <span class="s">"TEXT COMMENT '商品描述'"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">String</span> <span class="n">note</span><span class="o">;</span>
<span class="c1">//`note` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '商品描述',</span>
</code></pre></div></div>
<h5 id="transient-将不需要序列化的属性前添加关键字transient">@Transient 将不需要序列化的属性前添加关键字transient</h5>
<h5 id="embeddable-嵌套映射">@Embeddable 嵌套映射</h5>
<h5 id="creationtimestamp--根据当前时间来生成默认的时间戳insert时生成">@CreationTimestamp  根据当前时间来生成默认的时间戳（insert时生成）</h5>
<h5 id="updatetimestamp----根据当前时间来生成默认的时间戳update是更新">@UpdateTimestamp    根据当前时间来生成默认的时间戳（update是更新）</h5>
<h5 id="inheritance-hibernate继承策略总共有三种single_tabletable_per_class-和-joined">@Inheritance Hibernate继承策略,总共有三种<a href="https://blog.csdn.net/zhong562748437/article/details/85113555">SINGLE_TABLE、TABLE_PER_CLASS 和 JOINED</a></h5>
<h5 id="id">@id</h5>
<p>如果是主键id，还会用到@Id注解</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Id注释指定表的主键，它可以有多种生成方式：
　　1）TABLE：容器指定用底层的数据表确保唯一；
　　2）SEQUENCE：使用数据库德SEQUENCE列莱保证唯一（Oracle数据库通过序列来生成唯一ID）；
　　3）IDENTITY：使用数据库的IDENTITY列莱保证唯一；
　　4）AUTO：由容器挑选一个合适的方式来保证唯一；
　　5）NONE：容器不负责主键的生成，由程序来完成。
</code></pre></div></div>

<h5 id="双向关联模型">双向关联模型</h5>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"address"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AddressEO</span> <span class="kd">implements</span> <span class="n">java</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">Serializable</span> <span class="o">{</span>

  <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">cascade</span> <span class="o">=</span> <span class="o">{</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">ALL</span> <span class="o">})</span>
  <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"customer_id"</span><span class="o">)</span><span class="c1">//外键字段</span>
  <span class="kd">private</span> <span class="nc">CustomerEO</span> <span class="n">customer</span><span class="o">;</span>

  <span class="c1">// ...</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"customer"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomerEO</span> <span class="o">{</span>

  <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span><span class="o">=</span><span class="s">"customer"</span><span class="o">)</span>
  <span class="kd">private</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">AddressEO</span><span class="o">&gt;</span> <span class="n">addresses</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">AddressEO</span><span class="o">&gt;();</span>

  <span class="c1">// ...</span>
<span class="o">}</span>
<span class="c1">//其中，@OneToMany标记中的mappedBy属性的值为AddressEO实体中所引用的CustomerEO实体的属性名</span>
</code></pre></div></div>

<h4 id="总结">总结</h4>
<ol>
  <li>@Entity  @Table 区别通过上面博文可得出</li>
  <li>@Entity  @Table 通常同时出现</li>
  <li>@MappedSuperclass类 相当于把通用属性放在一起，再让之类继承实现</li>
</ol>

<p>参考链接</p>
<ul>
  <li><a href="https://www.cnblogs.com/gXing/p/8662453.html">hibernate注解@manytoone，@onetomany</a></li>
  <li><a href="https://blog.csdn.net/qq_34042441/article/details/80281654">Hibernate 多表关联 @ManyToOne</a></li>
  <li><a href="https://www.cnblogs.com/jpfss/p/11059629.html">@JoinColumn 详解</a></li>
</ul>
:ET