I".8<pre><code class="language-JAVA">package sc.whorl.logic.service.user;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ObjectUtils;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import lombok.extern.slf4j.Slf4j;
import sc.whorl.logic.domain.dao.auth.UserMapper;
import sc.whorl.logic.domain.model.auth.User;
import sc.whorl.logic.domain.model.auth.UserRole;
import sc.whorl.system.commons.MsgResponseBody;
import sc.whorl.system.commons.PageResponse;
import sc.whorl.system.commons.SenUnitDic;
import sc.whorl.system.commons.SenUnitException;
import sc.whorl.system.commons.base.BaseService;
import sc.whorl.system.commons.lock.RedisLock;
import sc.whorl.system.config.jwt.JWTUserDetail;
import sc.whorl.system.config.jwt.JwtTokenUtil;
import sc.whorl.system.config.springsecurity.utils.ErrorCodeEnum;
import sc.whorl.system.config.springsecurity.utils.UserAuthInfoUtils;
import sc.whorl.system.utils.ScUtils;
import sc.whorl.system.utils.redis.RedisUtil;
import sc.whorl.system.utils.spring.SpringUtil;
import sc.whorl.web.vo.system.UserListQueryRequest;
import sc.whorl.web.vo.user.UserVo;
import tk.mybatis.mapper.entity.Example;

/**
 * &lt;一句话功能简述&gt; &lt;功能详细描述&gt;
 *
 * @see: [相关类/方法]（可选）
 * @since [产品/模块版本] （可选）
 */
@Service
@Slf4j
public class UserService extends BaseService&lt;UserMapper, User&gt; {
    @Autowired
    private RedisUtil redisUtil;
    @Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;
    @Autowired
    private JwtTokenUtil jwtTokenUtil;
    @Value("${jwt.access_token:#{30*24*60*60}}")
    private Long access_token_expiration;

    @Autowired
    AuthenticationManager authenticationManager;

    public MsgResponseBody&lt;String&gt; upUser(Long userId, User user) {
        user.setTid(userId);
        updateByPrimaryKeySelective(user);
        return MsgResponseBody.success().setResult("用户更新成功!");
    }

    @Transactional(rollbackFor = Exception.class)
    public MsgResponseBody&lt;String&gt; dblUser(Long userId) {
        User user = new User();
        user.setStatus(SenUnitDic.USER_STATUS_DBL);
        user.setTid(userId);
        this.updateByPrimaryKeySelective(user);
        UserRole userRole = new UserRole();
        userRole.setUserId(userId);
        userRole.setStatus(SenUnitDic.USER_STATUS_DBL);
        return MsgResponseBody.success().setResult("用户禁用成功!");
    }


    public PageResponse&lt;User&gt; searchListUser(UserListQueryRequest userRequest) {
        PageHelper.startPage(userRequest.getPageIndex(), userRequest.getPageSize());
        List&lt;User&gt; userList = selectListAll();
        PageInfo&lt;User&gt; pageInfo = new PageInfo&lt;User&gt;(userList);
        return new PageResponse(pageInfo);

    }

    public void sample() {
        //获取spring上下文
        WebApplicationContext wac = (WebApplicationContext) SpringUtil.getApplicationContext();
        //获取请求上下文
        HttpServletRequest httpRequest = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
        ServletContext sc = httpRequest.getServletContext();
        //获取响应上下文
        HttpServletResponse httpResponse = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getResponse();
        //获取用户登陆后的信息
        UserAuthInfoUtils.getUser();
    }

    public void register(UserVo userVo) {
        Example example = new Example(User.class);
        example.createCriteria().andEqualTo("loginName", userVo.getAccountname()).orEqualTo("mobile", userVo.getUserPhone());
        RedisLock.tryLock(userVo.getAccountname());
        List&lt;User&gt; userList = this.selectByExample(example);
        RedisLock.unLock(userVo.getAccountname());
        if (!ScUtils.isEmpty(userList)) {
            throw new SenUnitException(SenUnitDic.RESULT_CODE_SERVICE_UNAVAILABLE, "账户已存在!");
        }
        User users = new User();
        users.setLoginName(userVo.getAccountname());
        users.setPassWord(bCryptPasswordEncoder.encode(userVo.getPassword()));
        users.setMobile(userVo.getUserPhone());
        users.setStatus("EBL");
        this.insert(users);
    }


    /**
     * 用户登陆相关,主要验证用户用户密码以及设置jwt和用户缓存相关,并返回jwt的凭证
     *
     * @param userVo
     * @return
     */
    public MsgResponseBody&lt;JWTUserDetail&gt; login(UserVo userVo) {
        User user = new User();
        user.setLoginName(userVo.getAccountname());
        User userOne = selectOne(user);
        if (ObjectUtils.isEmpty(userOne)) {
            log.info("用户不存在!");
            return MsgResponseBody.error(ErrorCodeEnum.LOGIN_INCORRECT.getCode()).setResult(ErrorCodeEnum.LOGIN_INCORRECT.getMessage());
        }
        if (!bCryptPasswordEncoder.matches(userVo.getPassword(), userOne.getPassWord())) {
            log.info("用户登陆密码错误!");
            return MsgResponseBody.error(ErrorCodeEnum.LOGIN_INCORRECT.getCode()).setResult(ErrorCodeEnum.LOGIN_INCORRECT.getMessage());
        }
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        userVo.getAccountname(),
                        userVo.getPassword()
                )
        );
        SecurityContextHolder.getContext().setAuthentication(authentication);
        //使用jwt生成token 用于权限效验
        JWTUserDetail jwtUserDetail = new JWTUserDetail();
        jwtUserDetail.setLoginName(userOne.getLoginName());
        jwtUserDetail.setLoginTime(new Date());
        jwtUserDetail.setUserId(userOne.getTid());
        jwtUserDetail.setUserType(JWTUserDetail.UserType.User);
        String token = jwtTokenUtil.generateToken(jwtUserDetail);
        jwtUserDetail.setJwtToken(token);
        return MsgResponseBody.success().setResult(jwtUserDetail);
    }

    public void logout() {
        redisUtil.setEx(String.format(JwtTokenUtil.JWT_TOKEN_PREFIX, UserAuthInfoUtils.getUserType(), UserAuthInfoUtils.getUserId()), UserAuthInfoUtils.getUser().getJwtToken(), access_token_expiration, TimeUnit.SECONDS);
    }
}

</code></pre>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">javaniuniu</span><span class="o">.</span><span class="na">scshorlsweb</span><span class="o">.</span><span class="na">system</span><span class="o">.</span><span class="na">config</span><span class="o">.</span><span class="na">jwt</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSONObject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.EqualsAndHashCode</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.Serializable</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="nd">@EqualsAndHashCode</span><span class="o">(</span><span class="n">callSuper</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JWTUserDetail</span> <span class="kd">implements</span> <span class="nc">Serializable</span> <span class="o">{</span>
    <span class="cm">/**
     * 登陆用户编号
     */</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">userId</span><span class="o">;</span>
    <span class="cm">/**
     * 登陆用户账户名称(可能为手机号邮箱或者名称用户维度唯一)
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">loginName</span><span class="o">;</span>
    <span class="cm">/**
     * 登陆用户类型
     */</span>
    <span class="kd">private</span> <span class="nc">UserType</span> <span class="n">userType</span><span class="o">;</span>
    <span class="cm">/**
     * 登陆用户凭证
     */</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">jwtToken</span><span class="o">;</span>
    <span class="cm">/**
     * 登陆时间
     */</span>
    <span class="kd">private</span> <span class="nc">Date</span> <span class="n">loginTime</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">enum</span> <span class="nc">UserType</span> <span class="o">{</span>
        <span class="nc">User</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span>
        <span class="nc">Operator</span><span class="o">(</span><span class="s">"OPT"</span><span class="o">,</span> <span class="mi">2</span><span class="o">),</span>
        <span class="nc">Erp</span><span class="o">(</span><span class="s">"ERP"</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>

        <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">index</span><span class="o">;</span>

        <span class="kd">private</span> <span class="nf">UserType</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">index</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">UserType</span> <span class="n">c</span> <span class="o">:</span> <span class="nc">UserType</span><span class="o">.</span><span class="na">values</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getIndex</span><span class="o">()</span> <span class="o">==</span> <span class="n">index</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">c</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getIndex</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">index</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">JWTUserDetail</span> <span class="nf">fromJson</span><span class="o">(</span><span class="nc">String</span> <span class="n">json</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">JSONObject</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">json</span><span class="o">,</span> <span class="nc">JWTUserDetail</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toJson</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>



</code></pre></div></div>
:ET