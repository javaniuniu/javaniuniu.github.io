I"D&<h3 id="题目-最长回文串">题目 <a href="https://leetcode-cn.com/problems/longest-palindrome/">最长回文串</a></h3>
<p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。 <br />
在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。</p>

<p>注意: <br />
假设字符串的长度不会超过 1010。</p>
<h3 id="示例">示例</h3>
<p>输入:
“abccccdd”</p>

<p>输出:
7</p>

<p>解释:
我们可以构造的最长的回文串是”dccaccd”, 它的长度是 7。</p>
<h3 id="自己的思路">自己的思路</h3>
<ul>
  <li>参考了 <a href="/leetcode/2020/0317">拼写单词</a> 构造长度为58的每个元素分别代表一个字母的数组，来简化计算</li>
  <li>含大小写 长度58，只有大写或小写大小26</li>
  <li><strong>友情提示</strong>：遇到有提示字符串仅包含小写（或者大写）英文字母的题,都可以试着考虑能不能构造长度为26的每个元素分别代表一个字母的数组，来简化计算</li>
</ul>

<h3 id="代码">代码</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">58</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">char</span> <span class="nl">cc:</span><span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">c</span><span class="o">[(</span><span class="kt">int</span><span class="o">)</span><span class="n">cc</span><span class="o">-</span><span class="sc">'A'</span><span class="o">]+=</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">boolean</span> <span class="n">flg</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">58</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">]%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">]!=</span><span class="mi">0</span><span class="o">){</span>
                <span class="n">res</span><span class="o">+=</span><span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="c1">// flg = true;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">]%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="o">){</span>
                <span class="n">res</span><span class="o">+=</span><span class="n">c</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">flg</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">flg</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">res</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">res</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="官方解题思路">官方解题思路</h3>

<h4 id="方法一贪心">方法一：贪心</h4>
<h5 id="思路">思路</h5>

<table>
  <tbody>
    <tr>
      <td>回文串是一个正着读和反着读都一样的字符串。以回文中心为分界线，对于回文串中左侧的字符 ch，在右侧对称的位置也会出现同样的字符。例如在字符串 “abba” 中，回文中心是 “ab</td>
      <td>ba” 中竖线的位置，而在字符串 “abcba” 中，回文中心是 “ab(c)ba” 中的字符 “c” 本身。我们可以发现，在一个回文串中，只有最多一个字符出现了奇数次，其余的字符都出现偶数次。</td>
    </tr>
  </tbody>
</table>

<p>那么我们如何通过给定的字符构造一个回文串呢？我们可以将每个字符使用偶数次，使得它们根据回文中心对称。在这之后，如果有剩余的字符，我们可以再取出一个，作为回文中心。</p>

<h5 id="算法">算法</h5>

<p>对于每个字符 ch，假设它出现了 v 次，我们可以使用该字符 v / 2 * 2 次，在回文串的左侧和右侧分别放置 v / 2 个字符 ch，其中 / 为整数除法。例如若 “a” 出现了 5 次，那么我们可以使用 “a” 的次数为 4，回文串的左右两侧分别放置 2 个 “a”。</p>

<p>如果有任何一个字符 ch 的出现次数 v 为奇数（即 v % 2 == 1），那么可以将这个字符作为回文中心，注意只能最多有一个字符作为回文中心。在代码中，我们用 ans 存储回文串的长度，由于在遍历字符时，ans 每次会增加 v / 2 * 2，因此 ans 一直为偶数。但在发现了第一个出现次数为奇数的字符后，我们将 ans 增加 1，这样 ans 变为奇数，在后面发现其它出现奇数次的字符时，我们就不改变 ans 的值了。</p>

<h3 id="官方代码">官方代码</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">longestPalindrome</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">128</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="nl">c:</span> <span class="n">s</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span>
            <span class="n">count</span><span class="o">[</span><span class="n">c</span><span class="o">]++;</span>

        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">v:</span> <span class="n">count</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="n">v</span> <span class="o">/</span> <span class="mi">2</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">ans</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                <span class="n">ans</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">ans</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="复杂度分析">复杂度分析</h3>
<ul>
  <li>
    <p>时间复杂度：O(N)，其中 N 为字符串 s 的长度。我们需要遍历每个字符一次。</p>
  </li>
  <li>
    <p>空间复杂度：O(S)，其中 SS 为字符集大小。在 Java 代码中，我们使用了一个长度为 128 的数组，存储每个字符出现的次数，这是因为字符的 ASCII 值的范围为 [0, 128)。而由于题目中保证了给定的字符串 s 只包含大小写字母，因此我们也可以使用哈希映射（HashMap）来存储每个字符出现的次数，例如 Python 和 C++ 的代码。如果使用哈希映射，最多只会存储 52 个（即小写字母与大写字母的数量之和）键值对。</p>
  </li>
</ul>
:ET